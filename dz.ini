; This file contains all the variables that "customize"
; Doszip to your particular needs.
;
; The entries have the following format:
;
; [<Section name>]
; <Entry name>=<properties>
;
; Space and tabs may appear before or after the equal sign.
;

[Environ]
0=AsmcDir=%DZ%
1=LIB=%DZ%\lib
2=INCLUDE=%DZ%\include

[Path]
0=%DZ%\BIN
1=%PATH%

[Comspec]
0=%SystemRoot%\system32\cmd.exe
1=/C

[Load]
;0=echo Welcome

[Exit]
;0=echo Goodbye

[Filetype]
txt=%edit%
asm=%edit%
inc=%edit%
ini=%edit%
h=%edit%
c=%edit%
mak=make -f
makefile=make -f

[FileColor]
;exe=4
;zip=B

[View]
;F3=
;Alt=
;Ctrl=
;Shift=

[Edit]
;F3=
;Alt=
;Ctrl=
;Shift=

[Directory]
0=Doszip &Directory,%doszip%
1=&Config Directory,%dz%
2=<>
3=System &Root,%SYSTEMROOT%
4=&Program Files,%PROGRAMFILES%
5=<>
6=&Temp Directory,%TEMP%

[Tools]
0=&Add tool,%edit% %dz%\dz.ini
1=<>
2=View &DZ.TXT,%view% %dz%\dz.txt

[Filter]
0=&Source code,*.asm *.inc *.c *.h

[MKList]
0=Default &List,filelist.bat@%f\n
1=&Obj List,obj.mif@%n.obj \\\n

[AltF2]
asm=asmc -X -I%INCLUDE%\dos

[AltF3]
asm=asmc -pe !:\!\\!.!, !.exe, pause

[AltF4]
asm=ml /c /Fl /Sa !:\!\\!.! > !.err

[AltF5]
asm=jwasm -coff -Fl -Sg

[AltF6]
asm=asmc -coff !.!, link /subsystem:console /libpath:\masm32\lib !.obj, !.exe

[AltF9]
inc=build
c=build
asm=build
makefile=build
mak=make -f
cmd=!.!

[ShiftF1]
asm=asmc -D_WIN64 -Fl -Sg
c=wcc386 -q -I%AsmcDir%\source\asmc\src\h -d2 -bt=nt -bc -ecd -3r -obmilrt -s
makefile=make -f
mak=make -f

[ShiftF2]
asm=asmc -I%AsmcDir%\source\asmc\src\h -coff -Fl -Sg !:\!\\!.!
c=wcc386 -q -I%AsmcDir%\source\asmc\src\h -d2 -bt=nt -bc -ecd -3r -obmilrt -s

[ShiftF3]
asm=asmc -I%AsmcDir%\source\dz\inc -D__W95__ -coff -Fl -Sg !:\!\\!.!

[ShiftF4]
asm=jwasm -D_WIN64 -Fl -Sg

[ShiftF5]
asm=ml64 /c /Fl /Sa !:\!\\!.! > !.err

[ShiftF6]
asm=asmc -Xc -Fl -Sg

[ShiftF7]
asm=asmc -Fl -Sg

[Compress]
0=7-Zip
1=ARJ
2=RAR

[7-Zip]
0=7za u -y
2=.7z

[ARJ]
0=arj u -jm -y
1=!
2=.arj

[RAR]
0=rar u -y
2=.rar

[Decompress]
0=.7z
1=.ARJ
2=.RAR

[.7z]
0=7za x -y
1=-o

[.ARJ]
0=arj x -y

[.RAR]
0=rar x -y

[Style]
asm=style_asm
inc=style_asm
ini=style_asm
cpp=style_c
hpp=style_c
c=style_c
h=style_c
pas=style_pas
bas=style_bas
mak=style_mak
makefile=style_mak
bat=style_bat
cmd=style_bat

[style_default]
0=.st_control
1=.st_number
2=.st_$
3=.st_operator
4=.st_quote

[style_c]
0=.C_A_16
1=.C_B_X2
2=.C_B_X8
3=.C_W_XF
4=[style_default]
5=.C_N_X8

[style_pas]
0=.PAS_W_XF
1=[style_default]
2=.PAS_N_X8
3=.PAS_N_X8_2

[style_bas]
0=.BAS_W_XF
1=[style_default]
2=.BAS_B_X8

[style_asm]
0=.asm_attrib
1=.asm_comment
2=.asm_include
3=.st_quote
4=[.asm_register]
5=.asm_assert
6=.asm_directive
7=.asm_instruction
8=.asm_call
9=.asm_special
10=.asm_avx
11=[.asm_asmc]
12=[.asm_dotname]
13=[.asm_default]

[.asm_asmc]
0=.asm_asmc_dot1
1=.asm_asmc_dot2
2=.asm_asmc_option

[.asm_dotname]
0=.asm_dotname1
1=.asm_dotname2

[.asm_register]
0=.asm_accumulator
1=.asm_volatile
2=.asm_nonvolatile
3=.asm_segments

[.asm_default]
0=.st_control
1=.st_number
2=.st_$
3=.st_operator

[style_mak]
0=.MAK_A_07
1=.C_B_X2
2=.MAK_W_XF
3=.MAK_B_X2
4=.MAK_N_X6
5=[style_default]

[style_bat]
0=.BAT_W_XF
1=[style_default]
2=.BAT_B_X8

[.st_control]
0=O 40

[.st_number]
0=D XB

[.st_$]
0=C XB $\

[.st_operator]
0=C XF .:!|/<[{()}]>,-*+?%&=^~;

[.st_quote]
0=Q XB

[.asm_attrib]
0=A 07

[.asm_comment]
0=B X8 ;

[.asm_segments]
0=W XF cs ds es ss fs gs

[.asm_volatile]
0=W X2 rcx ecx cx cl ch
1=rdx edx dx dl dh
2=r8 r8d r8w r8b
3=r9 r9d r9w r9b
4=r10 r10d r10w r10b
5=r11 r11d r11w r11b

[.asm_nonvolatile]
0=W X6 rbx ebx bx bl bh
1=rsi esi si sil
2=rdi edi di dil
3=rbp ebp bp bpl
4=r12 r12d r12w r12b
5=r13 r13d r13w r13b
6=r14 r14d r14w r14b
7=r15 r15d r15w r15b
8=rsp esp sp spl

[.asm_accumulator]
0=W X4 rax eax ax al ah

[.asm_assert]
0=B X4 assert assertb assertw assertd

[.asm_include]
0=B X2 include incbin includelib
1=if ife if1 if2 ifdif ifdifi ifidn ifidni ifb ifdef ifndef ifnb else elseif
2=elseife elseif1 elseif2 elseifdif elseifdifi elseifidn elseifidni elseifb
3=elseifnb elseifdef elseifndef endif

[.asm_dotname1]
0=W XF mmx xmm x64 x64p no87 cref lfcond list listall listif nocref nolist nolistif
1=sfcond tfcond xcref xlist listmacro listmacroall nolistmacro xall lall sall
2=alpha .dosseg seq code stack data fardata const
3=break continue .exit .startup model radix
4=safeseh err err1 err2 erre errnz errdif errdifi erridn
5=erridni errb errnb errdef errndef .repeat .while endw until untilcxz

[.asm_dotname2]
0=W X2 .if .else .elseif .endif

[.asm_directive]
0=W XF page subtitle subttl title dosseg comment
1=for forc irp irpc repeat rept while macro exitm endm goto purge textequ catstr
2=substr instr sizestr db dw dd df dq dt allocstack endprolog pushframe pushreg
3=savereg savexmm128 setframe struc struct union typedef record comm extern extrn
4=externdef public proto proc endp local label org align even segment ends
5=group assume alias echo end equ name option popcontex pushcontext

[.asm_instruction]
0=W X3 loop
1=loope
2=loopz loopne loopnz loopd looped loopzd loopned loopnzd loopw
3=loopew loopzw loopnew loopnzw add or adc sbb and sub xor cmp rcl rcr rol ror
4=sal sar shl shr cmps cmpsb cmpsw cmpsd ins insb insw insd lods lodsb lodsw
5=lodsd movs movsb movsw movsd outs outsb outsw outsd scas scasb scasw scasd
6=stos stosb stosw stosd aaa aad aam aas daa das lds les popa popad popaw popfd
7=pusha pushad pushaw pushfd pushd retd retw arpl lldt lmsw ltr sldt smsw str
8=verr verw div idiv mul neg not lock rep repe repne repnz repz bt btc btr bts
9=cmc clc stc cli sti cld std inc dec push pop pushw pushf popf mov bound bsf
10=bsr bswap cbw cdq cwd cwde clts cmpxchg cmpxchg8b cpuid enter hlt imul in int
11=into invd invlpg iret iretd iretf iretdf lahf lar lsl lea leave lfs lgs lss
12=lgdt lidt movsx movzx nop out rdmsr rdpmc rdtsc rdtscp rsm sahf
13=sgdt sidt shld shrd sysenter sysexit test ud2 wait wbinvd wrmsr xadd xchg xlat
14=xlatb seta setae setb setbe setc sete setg setge setl setle setna setnae setnb
15=setnbe setnc setne setng setnge setnl setnle setno setnp setns setnz seto setp
16=setpe setpo sets setz cmova cmovae cmovb cmovbe cmovc cmove cmovg cmovge cmovl
17=cmovle cmovna cmovnae cmovnb cmovnbe cmovnc cmovne cmovng cmovnge cmovnl
18=cmovnle cmovno cmovnp cmovns cmovnz cmovo cmovp cmovpe cmovpo cmovs cmovz
19=fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomp
20=fcompp fucom fucomp fucompp fcomi fcomip fucomi fucomip fadd faddp fmul fmulp
21=fdiv fdivp fdivr fdivrp fsub fsubp fsubr fsubrp fiadd ficom ficomp fidiv
22=fidivr fimul fisub fisubr fild fistp fist fld fstp fst fldenv fldenvd fldenvw
23=fnsave fnsaved fnsavew fnstenv fnstenvd fnstenvw frstor frstord frstorw fsave
24=fsaved fsavew fstenv fstenvd fstenvw fldcw fnstcw fnstsw fstcw fstsw fcos
25=fpatan fptan fsin fsincos finit fninit fdisi fndisi feni fneni fclex fnclex
26=f2xm1 fabs fbld fbstp fchs fld1 fldl2e fldl2t fldlg2 fldln2 fldpi fldz
27=fdecstp fincstp ffree ffreep fnop fprem fprem1 frndint fscale fsetpm fsqrt
28=ftst fwait fxam fxch fxrstor fxsave fxtract fyl2x fyl2xp1 emms clflush
29=ldmxcsr stmxcsr lfence mfence sfence prefetchnta prefetcht0 prefetcht1
30=prefetcht2 pause addpd addps addsd addss divpd divps divsd divss maxpd maxps
31=maxsd maxss minpd minps minsd minss mulpd mulps mulsd mulss sqrtpd sqrtps
32=sqrtsd sqrtss subpd subps subsd subss cmppd cmpps cmpss
33=cmpeqpd cmpltpd cmplepd cmpunordpd cmpneqpd cmpnltpd cmpnlepd cmpordpd
34=cmpeqps cmpltps cmpleps cmpunordps cmpneqps cmpnltps cmpnleps cmpordps
35=cmpeqsd cmpltsd cmplesd cmpunordsd cmpneqsd cmpnltsd cmpnlesd cmpordsd
36=cmpeqss cmpltss cmpless cmpunordss cmpneqss cmpnltss cmpnless cmpordss
37=andnpd andnps andpd andps orpd orps comisd comiss xorpd xorps
38=cvtpd2pi cvtps2pi cvtsd2si cvtss2si cvtpi2pd cvtpi2ps cvtsi2sd cvtsi2ss
39=cvttpd2pi cvttps2pi cvttsd2si cvttss2si cvtdq2ps cvtps2dq cvttps2dq
40=cvtpd2dq cvtdq2pd cvttpd2dq cvtpd2ps cvtps2pd cvtsd2ss cvtss2sd maskmovdqu
41=maskmovq movd movq movapd movaps movdqa movdqu movupd movups movhpd movhps
42=movlpd movlps movhlps movlhps movdq2q movq2dq movmskpd movmskps movntdq
43=movnti movntpd movntps movntq movss packssdw packsswb packuswb paddb paddw
44=paddd paddq paddsb paddsw paddusb paddusw pand pandn pavgb pavgw pcmpeqb
45=pcmpeqw pcmpeqd pcmpgtb pcmpgtw pcmpgtd pextrw pinsrw pmaddwd pmaxsw pmaxub
46=pminsw pminub pmovmskb pmulhuw pmulhw pmullw pmuludq por psadbw pshufd pshufw
47=pshufhw pshuflw psllw pslld psllq psraw psrad psrlw psrld psrlq pslldq psrldq
48=psubb psubw psubd psubq psubsb psubsw psubusb psubusw pxor punpckhbw punpckhwd
49=punpckhdq punpcklbw punpcklwd punpckldq punpckhqdq punpcklqdq rcpps rcpss
50=rsqrtps rsqrtss shufpd shufps ucomisd ucomiss unpckhpd unpckhps unpcklpd
51=unpcklps femms prefetch prefetchw pavgusb pf2id pf2iw pfacc pfadd pfcmpeq
52=pfcmpge pfcmpgt pfmax pfmin pfmul pfnacc pfpnacc pfrcp pfrcpit1 pfrcpit2
53=pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pi2fw pmulhrw pswapd addsubpd addsubps
54=fisttp haddpd haddps hsubpd hsubps lddqu monitor movddup movshdup movsldup
55=mwait pabsb pabsd pabsw palignr phaddd phaddsw phaddw phsubd phsubsw phsubw
56=pmaddubsw pmulhrsw pshufb psignb psignd psignw cdqe cqo pushfq popfq iretq
57=cmpxchg16b movsxd cmpsq lodsq movsq scasq stosq pextrq pinsrq swapgs
58=sysret blendpd blendps blendvpd blendvps dppd dpps extractps insertps
59=movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd phminposuw
60=pinsrb pinsrd pmaxsb pmaxsd pmaxuw pmaxud pminsb pminsd pminuw pminud
61=pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd
62=pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundps roundpd
63=roundss roundsd crc32 pcmpestrm pcmpestri pcmpistrm pcmpistri pcmpgtq popcnt
64=xrstor xsave xsaveopt xgetbv xsetbv vmcall vmlaunch vmresume vmxoff vmptrld
65=vmptrst vmclear vmxon vmread vmwrite invept invvpid vbroadcastss vbroadcastsd
66=vbroadcastf128 vblendvpd vblendvps vinsertf128 vextractf128 vmaskmovps
67=vmaskmovpd vpblendvb vpermilpd vpermilps vperm2f128 vtestps vtestpd vzeroall
68=vzeroupper vcvtpd2dq vcvttpd2dq vcvtpd2ps vmovddup vmovmskpd vmovmskps

[.asm_call]
0=W X6 call jmp ja jae jb jbe jc je jg jge jl jle jna jnae jnb jnbe jnc jne
1=jng jnge jnl jnle jno jnp jns jnz jo jp jpe jpo js jz jcxz jecxz jrcxz
2=invoke ret retn retf

[.asm_special]
0=W XF st mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0 xmm1 xmm2 xmm3 xmm4 xmm5 xmm6 xmm7
1=ymm0 ymm1 ymm2 ymm3 ymm4 ymm5 ymm6 ymm7 cr0 cr2 cr3 cr4 dr0 dr1 dr2 dr3 dr6 dr7
2=tr3 tr4 tr5 tr6 tr7 xmm8 xmm9 xmm10 xmm11 xmm12 xmm13 xmm14 xmm15 ymm8 ymm9
3=ymm10 ymm11 ymm12 ymm13 ymm14 ymm15 cr8 byte sbyte word sword dword sdword
4=real4 fword qword sqword real8 tbyte real10 oword ymmword near far near16
5=near32 far16 far32 mmword xmmword .type high high32 highword imagerel length
6=lengthof low low32 lowword lroffset mask offset opattr sectionrel seg short
7=size sizeof this type width eq ne ge gt le lt mod ptr dup addr flat vararg
8=frame c syscall stdcall pascal fortran basic fastcall tiny small compact large
9=private uses _text _data nothing

[.asm_avx]
0=W X3 vaddpd vaddps vaddsd vaddss vdivpd vdivps vdivsd vdivss vmaxpd vmaxps
1=vmaxsd vmaxss vminpd vminps vminsd vminss vmulpd vmulps vmulsd vmulss vsqrtpd
2=vsqrtps vsqrtsd vsqrtss vsubpd vsubps vsubsd vsubss vcmppd vcmpps vcmpsd vcmpss
3=vandpd vandps vandnpd vandnps vorpd vorps vcomisd vcomiss vxorpd vxorps
4=vcvtdq2pd vcvtdq2ps vcvtps2dq vcvttps2dq vcvtps2pd vcvtsd2si vcvttsd2si
5=vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttss2si vaddsubpd
6=vaddsubps vblendpd vblendps vdppd vdpps vextractps vhaddpd vhaddps vhsubpd
7=vhsubps vinsertps vlddqu vldmxcsr vstmxcsr vmaskmovdqu vmovapd vmovaps vmovd
8=vmovq vmovdqa vmovdqu vmovhlps vmovlhps vmovhpd vmovhps vmovlpd vmovlps vmovsd
9=vmovss vmovntdq vmovntdqa vmovntpd vmovntps vmovshdup vmovsldup vmovupd vmovups
10=vmpsadbw vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb
11=vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn
12=vpavgb vpavgw vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb
13=vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtB vpcmpgtw vpcmpgtd vpcmpgtq vpextrb vpextrw
14=vpextrd vpinsrb vpinsrw vpinsrd vpextrq vpinsrq vphaddw vphaddd vphaddsw
15=vphminposuw vphsubw vphsubd vphsubsw vpmaddwd vpmaddubsw vpmaxsb vpmaxsw
16=vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw
17=vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq
18=vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw
19=vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw
20=vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw
21=vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw
22=vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw
23=vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss
24=vroundpd vroundps vroundsd vroundss vshufpd vshufps vucomisd vucomiss
25=vunpckhpd vunpckhps vunpcklpd vunpcklps

[.asm_asmc_option]
0=W XF asmc cstack loopalign casealign wstring

[.asm_asmc_dot1]
0=W X2 ifa .ifb ifg ifl ifo ifp ifs ifz ifna .ifnb ifng ifnl ifno ifnp ifns ifnz
1=ifw ifd ifsb ifsw ifsd

[.asm_asmc_dot2]
0=W XF switch case endc default endsw whilea whileb break1 break2 break3
1=whileg whilel whileo whilep whiles whilez whilena whilenb whileng whilenl
2=whileno whilenp whilens whilenz whilew whiled whilesb whilesw whilesd untila
3=untilb untilg untill untilo untilp untils untilz untilna untilnb untilng untilnl
4=untilno untilnp untilns untilnz untilw untild untilsb untilsw untilsd breaka
5=breakb breakg breakl breako breakp breaks breakz breakna breaknb breakng breaknl
6=breakno breaknp breakns breaknz conta contb contg contl conto contp conts contz
7=contna contnb contng contnl contno contnp contns contnz endca endcb endcg endcl
8=endco endcp endcs endcz endcna endcnb endcng endcnl endcno endcnp endcns endcnz
9=untilaxz untilbxz untildxz cont0 cont1 cont2 cont3 cont01 cont02 cont03 endf
10=_CType _CDecl SIZE_T TCHAR LPSTR LPWSTR LPTSTR SINT UINT ULONG PVOID HANDLE
11=LPWORD LPDWORD LPQWORD

[.C_A_16]
0=A 16

[.C_B_X2]
0=B X2 #

[.C_B_X8]
0=B X8 //

[.C_N_X8]
0=N X8 /* */

[.C_W_XF]
0=W XF const operator char int long void typedef struct
1=if else for do while break continue goto return
2=switch case default public extern signed unsigned
3=static enum union short

[.PAS_W_XF]
0=W XF program unit interface uses integer function procedure
1=implementation begin end var const type byte word dword string
2=record far external if then or with do pointer longint exit
3=stdcall false true

[.PAS_N_X8]
0=N X8 (* *)

[.PAS_N_X8_2]
0=N X8 { }

[.BAS_B_X8]
0=B X8 '

[.BAS_W_XF]
0=W XF END SUB PRINT USING DECLARE FUNCTION SUB
1=AS LONG INTEGER TYPE CONST DECLARE DIM STRING
2=if then else

[.MAK_A_07]
0=A 07

[.MAK_W_XF]
0=W XF SUFFIXES OBJ C ASM IDD

[.MAK_N_X6]
0=N X6 $( )

[.MAK_B_X2]
0=B X2 !

[.BAT_B_X8]
0=B X8 rem

[.BAT_W_XF]
0=W XF for in echo off on call do if errorlevel goto
1=exit

[.config]
0=348
1=17F70AC
2=62AA
3=20
4=11
5=3FE0
6=8
7=2
8=9
9=0
10=0
11=6
12=0
13=0
14=1000386
15=1000387
16=70F0F00
17=7000008
18=B0A0008
19=F0F0F00
20=70701000
21=70303040
22=303030
23=6071010
24=0
25=0
26=0
27=FFFFFFFF
28=0
29=FFFFFFFF
30=0
31=0
32=0
33=0
34=*.*
38=*.*
42=*.*
47=filelist.bat
48=%f\n
49=*.*
51=*.*
52=default.7z
53=default.zip

[.directory]

[.doskey]
