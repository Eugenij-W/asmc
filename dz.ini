;
; Set environment %LIB%, %INCLUDE%, and %AsmcDir%
;
[Environ]
0=AsmcDir=%DZ%
1=LIB=%DZ%\lib
2=INCLUDE=%DZ%\include
3=WATCOM=C:\WATCOM
;
; Set an exclusive %PATH% for this environment
; Note: Visual C needs to be set before Watcom
;
[Path]
0=%AsmcDir%\bin
1=C:\VC\bin
2=%WATCOM%\BINNT
3=%WATCOM%\BINW
4=C:\jWasm
5=%PATH%
;
; Setup some editor transfer keys
;
[AltF2]
asm	= asmc -X -I%INCLUDE%\dos
[AltF3]
asm	= asmc -pe !:\!\\!.!, !.exe, pause
[AltF4]
asm	= ml /c /Fl /Sa !:\!\\!.! > !.err
[AltF5]
asm	= jwasm -coff -Fl -Sg
[AltF6]
asm	= asmc -coff !.!, link /subsystem:console /libpath:\masm32\lib !.obj, !.exe
[AltF9]
inc	= build
c	= build
asm	= build
makefile= build
mak	= make -f
cmd	= !.!

[ShiftF1]
;asm	= asmc -DDEBUG -D_WIN64 -win64 /Fl /Sa /Sf /Sn /Sg
asm	= asmc -DDEBUG -D_WIN64 -win64 -Fl -Sg
cmd	= asmc -Fl -Sg
c	= wcc386 -q -I\asmc\source\asmc\src\h -d2 -bt=nt -bc -ecd -3r -obmilrt -s
makefile= make -f
mak	= make -f
[ShiftF4]
asm	= jwasm -D_WIN64 -Fl -Sg -win64
[ShiftF5]
asm	= ml64 /c /Fl /Sa !:\!\\!.! > !.err
[ShiftF6]
asm	= asmc -W3 -WX -coff -Fl -Sg !:\!\\!.!

[CodeInfo]
0=%dz%\lib\libc.ci

[Filetype]
txt	= %edit%
asm	= %edit%
inc	= %edit%
ini	= %edit%
h	= %edit%
c	= %edit%
lst	= %edit%
idd	= dzrc
mak	= make -f
makefile= make -f
obj	= objconv -fasm !.! _!.asm

[Comspec]
0=%SystemRoot%\system32\cmd.exe
1=/C

[Load]
[Exit]
[FileColor]
;exe=4
;zip=B

[View]
;F3=
Alt=ftime -mt01:07:00
Ctrl=ftime -mt03:48:00
Shift=ftime -mt02:21:00

[Edit]
;F3=
Alt=notepad
;Ctrl=
;Shift=

[Directory]
0=Doszip &Directory,%dz%
1=LIBC 32,%AsmcDir%\source\libc
2=LIBC 64,%AsmcDir%\source\Ix64\libc
3=include,%AsmcDir%\include
4=asmc,%AsmcDir%\source\asmc
5=<>
6=&Temp Directory,%TEMP%

[Tools]
0=&Add tool,%edit% %dz%\dz.ini

[Filter]
0=&Source code,*.asm *.inc *.c *.h

[MKList]
0=Default &List,filelist.bat@%f\n
1=&Obj List,obj.mif@%n.obj \\\n

[Compress]
0=7-Zip
1=ARJ
2=RAR
[7-Zip]
0=7za u -y
2=.7z
[ARJ]
0=arj u -jm -y
1=!
2=.arj
[RAR]
0=rar u -y
2=.rar

[Decompress]
0=.7z
1=.ARJ
2=.RAR
[.7z]
0=7za x -y
1=-o
[.ARJ]
0=arj x -y
[.RAR]
0=rar x -y

[Style]
asm=style_asm
inc=style_asm
ini=style_asm
cpp=style_c
hpp=style_c
c=style_c
h=style_c
pas=style_pas
bas=style_bas
mak=style_mak
makefile=style_mak
bat=style_bat
cmd=style_asm

[style_default]
0=.st_control
1=.st_number
2=.st_$
3=.st_operator
4=.st_quote

[style_c]
0=.C_A_16
1=.C_B_X2
2=.C_B_X8
3=.C_W_XF
4=[style_default]
5=.C_N_X8

[style_pas]
0=.PAS_W_XF
1=[style_default]
2=.PAS_N_X8
3=.PAS_N_X8_2

[style_bas]
0=.BAS_W_XF
1=[style_default]
2=.BAS_B_X8

[style_asm]
0=.asm_A_07
1=.asm_B_X2
2=.asm_B_X4
3=.asm_B_X8
4=.asm_W_X2
5=.asm_W_X3
6=.asm_W_X4
7=.asm_W_X5
8=.asm_W_X6
9=.asm_W_X9
10=.asm_W_XF
11=[style_default]

[style_mak]
0=.MAK_A_07
1=.C_B_X2
2=.MAK_W_XF
3=.MAK_B_X2
4=.MAK_N_X6
5=[style_default]

[style_bat]
0=.BAT_W_XF
1=[style_default]
2=.BAT_B_X8

[.st_control]
0=O 40
[.st_number]
0=D XB
[.st_$]
0=C XB $\
[.st_operator]
0=C XF ".:!|/<[{()}]>,-*+?%&=^~;"
[.st_quote]
0=Q XB

[.asm_A_07]
0=A 07
[.asm_B_X2]
0=B X2 ifdef ifndef include
[.asm_B_X4]
;0=B X4 assert
[.asm_B_X8]
0=B X8 ";"
[.asm_W_X2]
0=W X2 if ifd ifw ifb else elseif endif assert assertd assertw assertb
1=rcx rdx rsp ecx edx esp cx dx sp cl dl ch dh
2=r8 r9 r10 r11 r8d r9d r10d r11d r8w r9w r10w r11w r8b r9b r10b r11b
[.asm_W_X3]
0=W X3 mov movzx movsx xchg cwb cbw
1=push pop popa pusha lea les lds
2=and or xor not neg add adc sub sbb shl shr dec inc
3=cmp test cld std clc stc mul div imul idiv
4=rep repe repne repz repnz in out aam org
5=pushfd popfd pushfq popfq
[.asm_W_X4]
0=W X4 rax eax ax ah al
[.asm_W_X5]
0=W X5 cs ds es ss
[.asm_W_X6]
0=W X6 rbp rsi rdi rbx ebp esi edi ebx bp si di bx bh bl
1=scasb scasw lodsb stosb lodsw stosw movsb movsw
2=scasd lodsd stosd movsd movsq stosq lodsq
3=call invoke int ret iret retn retf
4=r12 r13 r14 r15 r12d r13d r14d r15d r12w r13w r14w r15w r12b r13b r14b r15b
5=cpuid rdtsc
[.asm_W_X9]
0=W X9 jmp ja jb jc jz jna jnb jnc jnz jna jnz je
1=jne jae jbe jl jg jle jge js jns jnl
[.asm_W_XF]
0=W XF seg segment offset near far ends end
1=model tiny small compact large flat c pascal stdcall
2=label proto proc public private uses local endp vararg
3=ptr byte word dword qword db dw dd dq dt struc option
4=externdef extrn assume align size sizeof length dup
5=code data stack _text _data macro endm exitm equ textequ
6=real4 real8 real10 union fastcall nothing
7=repeat until continue while break endw cstack
8=switch case endc default endsw untilcxz xmm
9=sbyte sword sdword sqword typedef extern

[.C_A_16]
0=A 16
[.C_B_X2]
0=B X2 #
[.C_B_X8]
0=B X8 //
[.C_N_X8]
0=N X8 /* */
[.C_W_XF]
0=W XF const operator char int long void typedef struct
1=if else for do while break continue goto return
2=switch case default public extern signed unsigned
3=static enum union short

[.PAS_W_XF]
0=W XF program unit interface uses integer function procedure
1=implementation begin end var const type byte word dword string
2=record far external if then or with do pointer longint exit
3=stdcall false true
[.PAS_N_X8]
0=N X8 (* *)
[.PAS_N_X8_2]
0=N X8 { }

[.BAS_B_X8]
0=B X8 '
[.BAS_W_XF]
0=W XF END SUB PRINT USING DECLARE FUNCTION SUB
1=AS LONG INTEGER TYPE CONST DECLARE DIM STRING
2=if then else

[.MAK_A_07]
0=A 07
[.MAK_W_XF]
0=W XF SUFFIXES OBJ C ASM IDD
[.MAK_N_X6]
0=N X6 $( )
[.MAK_B_X2]
0=B X2 !

[.BAT_B_X8]
0=B X8 rem
[.BAT_W_XF]
0=W XF for in echo off on call do if errorlevel goto
1=exit
