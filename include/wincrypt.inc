ifndef __LIBC_INC
 include libc.inc
endif
.xlist
ifndef __WINCRYPT_H__
__WINCRYPT_H__ equ 1


if(_WIN32_WINNT GE 0x0400)

ifndef _HRESULT_DEFINED
_HRESULT_DEFINED	equ 1
HRESULT			typedef LONG

endif 

if NOT defined(_CRYPT32_)
WINCRYPT32API		equ DECSPEC_IMPORT
else
WINCRYPT32API		equ 1
endif


GET_ALG_CLASS macro x
	exitm<(x AND (7 SHL 13))>
	endm
GET_ALG_TYPE macro x
	exitm<(x AND (15 SHL 9))>
	endm
GET_ALG_SID macro x
	exitm<(x AND (511))>
	endm

ALG_CLASS_ANY		equ (0)
ALG_CLASS_SIGNATURE	equ (1 SHL 13)
ALG_CLASS_MSG_ENCRYPT	equ (2 SHL 13)
ALG_CLASS_DATA_ENCRYPT	equ (3 SHL 13)
ALG_CLASS_HASH		equ (4 SHL 13)
ALG_CLASS_KEY_EXCHANGE	equ (5 SHL 13)

ALG_TYPE_ANY		equ (0)
ALG_TYPE_DSS		equ (1 SHL 9)
ALG_TYPE_RSA		equ (2 SHL 9)
ALG_TYPE_BLOCK		equ (3 SHL 9)
ALG_TYPE_STREAM		equ (4 SHL 9)
ALG_TYPE_DH		equ (5 SHL 9)
ALG_TYPE_SECURECHANNEL	equ (6 SHL 9)

ALG_SID_ANY		equ (0)

ALG_SID_RSA_ANY		equ 0
ALG_SID_RSA_PKCS	equ 1
ALG_SID_RSA_MSATWORK	equ 2
ALG_SID_RSA_ENTRUST	equ 3
ALG_SID_RSA_PGP		equ 4

ALG_SID_DSS_ANY		equ 0
ALG_SID_DSS_PKCS	equ 1
ALG_SID_DSS_DMS		equ 2

ALG_SID_DES		equ 1
ALG_SID_3DES		equ 3
ALG_SID_DESX		equ 4
ALG_SID_IDEA		equ 5
ALG_SID_CAST		equ 6
ALG_SID_SAFERSK64	equ 7
ALG_SID_SAFERSK128	equ 8
ALG_SID_3DES_112	equ 9
ALG_SID_CYLINK_MEK	equ 12
ALG_SID_RC5		equ 13

ALG_SID_SKIPJACK	equ 10
ALG_SID_TEK		equ 11

CRYPT_MODE_CBCI		equ 6	
CRYPT_MODE_CFBP		equ 7	
CRYPT_MODE_OFBP		equ 8	
CRYPT_MODE_CBCOFM	equ 9	
CRYPT_MODE_CBCOFMI	equ 10	

ALG_SID_RC2		equ 2

ALG_SID_RC4		equ 1
ALG_SID_SEAL		equ 2

ALG_SID_DH_SANDF	equ 1
ALG_SID_DH_EPHEM	equ 2
ALG_SID_AGREED_KEY_ANY	equ 3
ALG_SID_KEA		equ 4

ALG_SID_MD2		equ 1
ALG_SID_MD4		equ 2
ALG_SID_MD5		equ 3
ALG_SID_SHA		equ 4
ALG_SID_SHA1		equ 4
ALG_SID_MAC		equ 5
ALG_SID_RIPEMD		equ 6
ALG_SID_RIPEMD160	equ 7
ALG_SID_SSL3SHAMD5	equ 8
ALG_SID_HMAC		equ 9

ALG_SID_SSL3_MASTER	equ 1
ALG_SID_SCHANNEL_MASTER_HASH equ 2
ALG_SID_SCHANNEL_MAC_KEY equ 3
ALG_SID_PCT1_MASTER	equ 4
ALG_SID_SSL2_MASTER	equ 5
ALG_SID_TLS1_MASTER	equ 6
ALG_SID_SCHANNEL_ENC_KEY equ 7

ALG_SID_EXAMPLE		equ 80

ifndef ALGIDDEF
ALGIDDEF equ 1
ALG_ID			typedef UINT
endif

CALG_MD2		equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR AG_SID_MD2)
CALG_MD4		equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR AG_SID_MD4)
CALG_MD5		equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR AG_SID_MD5)
CALG_SHA		equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR AG_SID_SHA)
CALG_SHA1		equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR AG_SID_SHA1)
CALG_MAC		equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR AG_SID_MAC)
CALG_RSA_SIGN		equ (ALG_CLASS_SIGNATURE OR ALG_TYPE_RSA OR AG_SID_RSA_ANY)
CALG_DSS_SIGN		equ (ALG_CLASS_SIGNATURE OR ALG_TYPE_DSS OR AG_SID_DSS_ANY)
CALG_RSA_KEYX		equ (ALG_CLASS_KEY_EXCHANGE OR ALG_TYPE_RSA OR AG_SID_RSA_ANY)
CALG_DES		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR AG_SID_DES)
CALG_3DES_112		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR AG_SID_3DES_112)
CALG_3DES		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR AG_SID_3DES)
CALG_RC2		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR AG_SID_RC2)
CALG_RC4		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_STREAM OR AG_SID_RC4)
CALG_SEAL		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_STREAM OR ALG_SID_SEA)
CALG_DH_SF		equ (ALG_CLASS_KEY_EXCHANGE OR ALG_TYPE_DH OR AG_SID_DH_SANDF)
CALG_DH_EPHEM		equ (ALG_CLASS_KEY_EXCHANGE OR ALG_TYPE_DH OR AG_SID_DH_EPHEM)
CALG_AGREEDKEY_ANY	equ (ALG_CLASS_KEY_EXCHANGE OR ALG_TYPE_DH OR AG_SID_AGREED_KEY_ANY)
CALG_KEA_KEYX		equ (ALG_CLASS_KEY_EXCHANGE OR ALG_TYPE_DH OR AG_SID_KEA)
CALG_HUGHES_MD5		equ (ALG_CLASS_KEY_EXCHANGE OR ALG_TYPE_ANY OR AG_SID_MD5)
CALG_SKIPJACK		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR AG_SID_SKIPJACK)
CALG_TEK		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR AG_SID_TEK)
CALG_CYLINK_MEK		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR ALG_SID_CYLINK_MEK)
CALG_SSL3_SHAMD5	equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR ALG_SID_SSL3SHAMD5)
CALG_SSL3_MASTER	equ (ALG_CLASS_MSG_ENCRYPT OR ALG_TYPE_SECURECHANNEL OR ALG_SID_SSL3_MASTER)
CALG_SCHANNEL_MASTER_HASH equ (ALG_CLASS_MSG_ENCRYPT OR ALG_TYPE_SECURECHANNEL OR ALG_SID_SCHANNE_MASTER_HASH)
CALG_SCHANNEL_MAC_KEY	equ (ALG_CLASS_MSG_ENCRYPT OR ALG_TYPE_SECURECHANNEL OR ALG_SID_SCHANNE_MAC_KEY)
CALG_SCHANNEL_ENC_KEY	equ (ALG_CLASS_MSG_ENCRYPT OR ALG_TYPE_SECURECHANNEL OR ALG_SID_SCHANNE_ENC_KEY)
CALG_PCT1_MASTER	equ (ALG_CLASS_MSG_ENCRYPT OR ALG_TYPE_SECURECHANNEL OR AG_SID_PCT1_MASTER)
CALG_SSL2_MASTER	equ (ALG_CLASS_MSG_ENCRYPT OR ALG_TYPE_SECURECHANNEL OR ALG_SID_SSL2_MASTER)
CALG_TLS1_MASTER	equ (ALG_CLASS_MSG_ENCRYPT OR ALG_TYPE_SECURECHANNEL OR ALG_SID_TLS1_MASTER)
CALG_RC5		equ (ALG_CLASS_DATA_ENCRYPT OR ALG_TYPE_BLOCK OR AG_SID_RC5)
CALG_HMAC		equ (ALG_CLASS_HASH OR ALG_TYPE_ANY OR AG_SID_HMAC)

VTableProvStruc		STRUC
Version			dd ?
FuncVerifyImage		FARPROC ?
FuncReturnhWnd		FARPROC ?
dwProvType		dd ?
pbContextInfo		LPSTR ?
cbContextInfo		dd ?
VTableProvStruc		ENDS
PVTableProvStruc	typedef ptr VTableProvStruc

HCRYPTPROV		typedef DWORD
HCRYPTKEY		typedef DWORD
HCRYPTHASH		typedef DWORD

CRYPT_VERIFYCONTEXT	equ 0xF0000000
CRYPT_NEWKEYSET		equ 0x00000008
CRYPT_DELETEKEYSET	equ 0x00000010
CRYPT_MACHINE_KEYSET	equ 0x00000020

CRYPT_EXPORTABLE	equ 0x00000001
CRYPT_USER_PROTECTED	equ 0x00000002
CRYPT_CREATE_SALT	equ 0x00000004
CRYPT_UPDATE_KEY	equ 0x00000008
CRYPT_NO_SALT		equ 0x00000010
CRYPT_PREGEN		equ 0x00000040
CRYPT_RECIPIENT		equ 0x00000010
CRYPT_INITIATOR		equ 0x00000040
CRYPT_ONLINE		equ 0x00000080
CRYPT_SF		equ 0x00000100
CRYPT_CREATE_IV		equ 0x00000200
CRYPT_KEK		equ 0x00000400
CRYPT_DATA_KEY		equ 0x00000800

CRYPT_SERVER		equ 0x00000400

KEY_LENGTH_MASK		equ 0xFFFF0000

CRYPT_Y_ONLY		equ 0x00000001
CRYPT_SSL2_SLUMMING	equ 0x00000002

CRYPT_LITTLE_ENDIAN	equ 0x00000001

CRYPT_MACHINE_DEFAULT	equ 0x00000001
CRYPT_USER_DEFAULT	equ 0x00000002
CRYPT_DELETE_DEFAULT	equ 0x00000004

SIMPLEBLOB		equ 0x1
PUBLICKEYBLOB		equ 0x6
PRIVATEKEYBLOB		equ 0x7
PLAINTEXTKEYBLOB	equ 0x8

AT_KEYEXCHANGE		equ 1
AT_SIGNATURE		equ 2

CRYPT_USERDATA		equ 1

KP_IV			equ 1	
KP_SALT			equ 2	
KP_PADDING		equ 3	
KP_MODE			equ 4	
KP_MODE_BITS		equ 5	
KP_PERMISSIONS		equ 6	
KP_ALGID		equ 7	
KP_BLOCKLEN		equ 8	
KP_KEYLEN		equ 9	
KP_SALT_EX		equ 10	
KP_P			equ 11	
KP_G			equ 12	
KP_Q			equ 13	
KP_X			equ 14	
KP_Y			equ 15	
KP_RA			equ 16	
KP_RB			equ 17	
KP_INFO			equ 18	
KP_EFFECTIVE_KEYLEN	equ 19	
KP_SCHANNEL_ALG		equ 20	
KP_CLIENT_RANDOM	equ 21	
KP_SERVER_RANDOM	equ 22	
KP_RP			equ 23
KP_PRECOMP_MD5		equ 24
KP_PRECOMP_SHA		equ 25
KP_CERTIFICATE		equ 26	
KP_CLEAR_KEY		equ 27	
KP_PUB_EX_LEN		equ 28
KP_PUB_EX_VAL		equ 29

PKCS5_PADDING		equ 1	
RANDOM_PADDING		equ 2
ZERO_PADDING		equ 3

CRYPT_MODE_CBC		equ 1	
CRYPT_MODE_ECB		equ 2	
CRYPT_MODE_OFB		equ 3	
CRYPT_MODE_CFB		equ 4	
CRYPT_MODE_CTS		equ 5	

CRYPT_ENCRYPT		equ 0x0001	
CRYPT_DECRYPT		equ 0x0002	
CRYPT_EXPORT		equ 0x0004	
CRYPT_READ		equ 0x0008	
CRYPT_WRITE		equ 0x0010	
CRYPT_MAC		equ 0x0020	
CRYPT_EXPORT_KEY	equ 0x0040	
CRYPT_IMPORT_KEY	equ 0x0080	

HP_ALGID		equ 0x0001	
HP_HASHVAL		equ 0x0002	
HP_HASHSIZE		equ 0x0004	
HP_HMAC_INFO		equ 0x0005	

CRYPT_FAILED		equ FASE
CRYPT_SUCCEED		equ TRUE

RCRYPT_SUCCEEDED macro rt
	exitm<((rt) EQ CRYPT_SUCCEED)>
	endm
RCRYPT_FAILED macro rt
	exitm<((rt) EQ CRYPT_FAILED)>
	endm

PP_ENUMALGS		equ 1
PP_ENUMCONTAINERS	equ 2
PP_IMPTYPE		equ 3
PP_NAME			equ 4
PP_VERSION		equ 5
PP_CONTAINER		equ 6
PP_CHANGE_PASSWORD	equ 7
PP_KEYSET_SEC_DESCR	equ 8	
PP_CERTCHAIN		equ 9	
PP_KEY_TYPE_SUBTYPE	equ 10
PP_PROVTYPE		equ 16
PP_KEYSTORAGE		equ 17
PP_APPLI_CERT		equ 18
PP_SYM_KEYSIZE		equ 19
PP_SESSION_KEYSIZE	equ 20
PP_UI_PROMPT		equ 21
PP_ENUMALGS_EX		equ 22

CRYPT_FIRST		equ 1
CRYPT_NEXT		equ 2

CRYPT_IMPL_HARDWARE	equ 1
CRYPT_IMPL_SOFTWARE	equ 2
CRYPT_IMPL_MIXED	equ 3
CRYPT_IMPL_UNKNOWN	equ 4

CRYPT_SEC_DESCR		equ 0x00000001
CRYPT_PSTORE		equ 0x00000002
CRYPT_UI_PROMPT		equ 0x00000004

CRYPT_FLAG_PCT1		equ 0x0001
CRYPT_FLAG_SSL2		equ 0x0002
CRYPT_FLAG_SSL3		equ 0x0004
CRYPT_FLAG_TLS1		equ 0x0008

PP_CLIENT_HWND		equ 1
PP_CONTEXT_INFO		equ 11
PP_KEYEXCHANGE_KEYSIZE	equ 12
PP_SIGNATURE_KEYSIZE	equ 13
PP_KEYEXCHANGE_ALG	equ 14
PP_SIGNATURE_ALG	equ 15
PP_DELETEKEY		equ 24

PROV_RSA_FULL		equ 1
PROV_RSA_SIG		equ 2
PROV_DSS		equ 3
PROV_FORTEZZA		equ 4
PROV_MS_EXCHANGE	equ 5
PROV_SSL		equ 6
PROV_RSA_SCHANNEL	equ 12
PROV_DSS_DH		equ 13
PROV_EC_ECDSA_SIG	equ 14
PROV_EC_ECNRA_SIG	equ 15
PROV_EC_ECDSA_FULL	equ 16
PROV_EC_ECNRA_FULL	equ 17
PROV_SPYRUS_LYNKS	equ 20

PROV_STT_MER		equ 7
PROV_STT_ACQ		equ 8
PROV_STT_BRND		equ 9
PROV_STT_ROOT		equ 10
PROV_STT_ISS		equ 11

MS_DEF_PROV		equ <"Microsoft Base Cryptographic Provider v1.0">
MS_ENHANCED_PROV	equ <"Microsoft Enhanced Cryptographic Provider v1.0">
MS_DEF_RSA_SIG_PROV	equ <"Microsoft RSA Signature Cryptographic Provider">
MS_DEF_RSA_SCHANNEL_PROV equ <"Microsoft Base RSA SChannel Cryptographic Provider">
MS_ENHANCED_RSA_SCHANNEL_PROV equ <"Microsoft Enhanced RSA SChannel Cryptographic Provider">
MS_DEF_DSS_PROV		equ <"Microsoft Base DSS Cryptographic Provider">
MS_DEF_DSS_DH_PROV	equ <"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider">


MAXUIDLEN		equ 64

CUR_BLOB_VERSION	equ 2

HMAC_INFO		STRUC
HashAlgid		ALG_ID ?
pbInnerString		LPSTR ?
cbInnerString		dd ?
pbOuterString		LPSTR ?
cbOuterString		dd ?
HMAC_INFO		ENDS
PHMAC_INFO		typedef ptr HMAC_INFO

SCHANNEL_ALG		STRUC
dwUse			dd ?
Algid			ALG_ID ?
cBits			dd ?
SCHANNEL_ALG		ENDS
PSCHANNEL_ALG		typedef ptr SCHANNEL_ALG

SCHANNEL_MAC_KEY	equ 0x00000000
SCHANNEL_ENC_KEY	equ 0x00000001

PROV_ENUMALGS		STRUC
aiAlgid			ALG_ID ?
dwBitLen		dd ?
dwNameLen		dd ?
szName			db 20 dup(?)
PROV_ENUMALGS		ENDS

PROV_ENUMALGS_EX	STRUC
aiAlgid			ALG_ID ?
dwDefaultLen		dd ?
dwMinLen		dd ?
dwMaxLen		dd ?
dwProtocols		dd ?
dwNameLen		dd ?
szName			db 20 dup(?)
dwLongNameLen		dd ?
szLongName		db 40 dup(?)
PROV_ENUMALGS_EX	ENDS

BLOBHEADER		STRUC
bType			db ?
bVersion		db ?
reserved		dw ?
aiKeyAlg		ALG_ID ?
BLOBHEADER		ENDS
PUBLICKEYSTRUC		typedef BLOBHEADER

RSAPUBKEY		STRUC
magic			dd ?	
bitlen			dd ?	
pubexp			dd ?	
RSAPUBKEY		ENDS

DHPUBKEY		STRUC
magic			dd ?
bitlen			dd ?	
DHPUBKEY		ENDS
DSSPUBKEY		typedef DHPUBKEY
KEAPUBKEY		typedef DHPUBKEY
TEKPUBKEY		typedef DHPUBKEY

DSSSEED			STRUC
counter			dd ?
seed			db 20 dup(?)
DSSSEED			ENDS

KEY_TYPE_SUBTYPE	STRUC
dwKeySpec		dd ?
_Type			GUID <>
Subtype			GUID <>
KEY_TYPE_SUBTYPE	ENDS
PKEY_TYPE_SUBTYPE	typedef ptr KEY_TYPE_SUBTYPE


;BOOL
CryptAcquireContextA proto WINAPI \
		phProv: ptr HCRYPTPROV,
	  pszContainer: LPCSTR,
	   pszProvider: LPCSTR,
	    dwProvType: DWORD,
	       dwFlags: DWORD
;BOOL
CryptAcquireContextW proto WINAPI \
		phProv: ptr HCRYPTPROV,
	  pszContainer: LPCWSTR,
	   pszProvider: LPCWSTR,
	    dwProvType: DWORD,
	       dwFlags: DWORD
ifdef _UNICODE
CryptAcquireContext	equ <CryptAcquireContextW>
else
CryptAcquireContext	equ <CryptAcquireContextA>
endif 


;BOOL
CryptReleaseContext proto WINAPI \
		 hProv: HCRYPTPROV,
	       dwFlags: DWORD


;BOOL
CryptGenKey proto WINAPI \
		 hProv: HCRYPTPROV,
		 Algid: ALG_ID,
	       dwFlags: DWORD,
		 phKey: ptr HCRYPTKEY

;BOOL
CryptDeriveKey proto WINAPI \
		 hProv: HCRYPTPROV,
		 Algid: ALG_ID,
	     hBaseData: HCRYPTHASH,
	       dwFlags: DWORD,
		 phKey: ptr HCRYPTKEY


;BOOL
CryptDestroyKey proto WINAPI \
		  hKey: HCRYPTKEY

;BOOL
CryptSetKeyParam proto WINAPI \
		  hKey: HCRYPTKEY,
	       dwParam: DWORD,
		pbData: LPBYTE,
	       dwFlags: DWORD

;BOOL
CryptGetKeyParam proto WINAPI \
		  hKey: HCRYPTKEY,
	       dwParam: DWORD,
		pbData: LPBYTE,
	    pdwDataLen: LPDWORD,
	       dwFlags: DWORD

;BOOL
CryptSetHashParam proto WINAPI \
		 hHash: HCRYPTHASH,
	       dwParam: DWORD,
		pbData: LPBYTE,
	       dwFlags: DWORD

;BOOL
CryptGetHashParam proto WINAPI \
		 hHash: HCRYPTHASH,
	       dwParam: DWORD,
		pbData: LPBYTE,
	    pdwDataLen: LPDWORD,
	       dwFlags: DWORD

;BOOL
CryptSetProvParam proto WINAPI \
		 hProv: HCRYPTPROV,
	       dwParam: DWORD,
		pbData: LPBYTE,
	       dwFlags: DWORD

;BOOL
CryptGetProvParam proto WINAPI \
		 hProv: HCRYPTPROV,
	       dwParam: DWORD,
		pbData: LPBYTE,
	    pdwDataLen: LPDWORD,
	       dwFlags: DWORD

;BOOL
CryptGenRandom proto WINAPI \
		 hProv: HCRYPTPROV,
		 dwLen: DWORD,
	      pbBuffer: LPBYTE

;BOOL
CryptGetUserKey proto WINAPI \
		 hProv: HCRYPTPROV,
	     dwKeySpec: DWORD,
	     phUserKey: ptr HCRYPTKEY

;BOOL
CryptExportKey proto WINAPI \
		  hKey: HCRYPTKEY,
	       hExpKey: HCRYPTKEY,
	    dwBlobType: DWORD,
	       dwFlags: DWORD,
		pbData: LPBYTE,
	    pdwDataLen: LPDWORD

;BOOL
CryptImportKey proto WINAPI \
		 hProv: HCRYPTPROV,
		pbData: LPBYTE,
	     dwDataLen: DWORD,
	       hPubKey: HCRYPTKEY,
	       dwFlags: DWORD,
		 phKey: ptr HCRYPTKEY

;BOOL
CryptEncrypt proto WINAPI \
		  hKey: HCRYPTKEY,
		 hHash: HCRYPTHASH,
		 Final: BOOL,
	       dwFlags: DWORD,
		pbData: LPBYTE,
	    pdwDataLen: LPDWORD,
	      dwBufLen: DWORD

;BOOL
CryptDecrypt proto WINAPI \
		  hKey: HCRYPTKEY,
		 hHash: HCRYPTHASH,
		 Final: BOOL,
	       dwFlags: DWORD,
		pbData: LPBYTE,
	    pdwDataLen: LPDWORD

;BOOL
CryptCreateHash proto WINAPI \
		 hProv: HCRYPTPROV,
		 Algid: ALG_ID,
		  hKey: HCRYPTKEY,
	       dwFlags: DWORD,
		phHash: ptr HCRYPTHASH

;BOOL
CryptHashData proto WINAPI \
		 hHash: HCRYPTHASH,
		pbData: LPBYTE,
	     dwDataLen: DWORD,
	       dwFlags: DWORD

;BOOL
CryptHashSessionKey proto WINAPI \
		 hHash: HCRYPTHASH,
		  hKey: HCRYPTKEY,
	       dwFlags: DWORD

;BOOL
CryptDestroyHash proto WINAPI \
		 hHash: HCRYPTHASH

;BOOL
CryptSignHashA proto WINAPI \
		 hHash: HCRYPTHASH,
	     dwKeySpec: DWORD,
	  sDescription: LPCSTR,
	       dwFlags: DWORD,
	   pbSignature: LPBYTE,
	     pdwSigLen: LPDWORD
;BOOL
CryptSignHashW proto WINAPI \
		 hHash: HCRYPTHASH,
	     dwKeySpec: DWORD,
	  sDescription: LPCWSTR,
	       dwFlags: DWORD,
	   pbSignature: LPBYTE,
	     pdwSigLen: LPDWORD
ifdef _UNICODE
CryptSignHash		equ <CryptSignHashW>
else
CryptSignHash		equ <CryptSignHashA>
endif 

;BOOL
CryptVerifySignatureA proto WINAPI \
		 hHash: HCRYPTHASH,
	   pbSignature: LPBYTE,
	      dwSigLen: DWORD,
	       hPubKey: HCRYPTKEY,
	  sDescription: LPCSTR,
	       dwFlags: DWORD
;BOOL
CryptVerifySignatureW proto WINAPI \
		 hHash: HCRYPTHASH,
	   pbSignature: LPBYTE,
	      dwSigLen: DWORD,
	       hPubKey: HCRYPTKEY,
	  sDescription: LPCWSTR,
	       dwFlags: DWORD
ifdef _UNICODE
CryptVerifySignature	equ <CryptVerifySignatureW>
else
CryptVerifySignature	equ <CryptVerifySignatureA>
endif 

;BOOL
CryptSetProviderA proto WINAPI \
	   pszProvName: LPCSTR,
	    dwProvType: DWORD
;BOOL
CryptSetProviderW proto WINAPI \
	   pszProvName: LPCWSTR,
	    dwProvType: DWORD
ifdef _UNICODE
CryptSetProvider	equ <CryptSetProviderW>
else
CryptSetProvider	equ <CryptSetProviderA>
endif 

;BOOL
CryptSetProviderExA proto WINAPI \
	   pszProvName: LPCSTR,
	    dwProvType: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD
;BOOL
CryptSetProviderExW proto WINAPI \
	   pszProvName: LPCWSTR,
	    dwProvType: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD
ifdef _UNICODE
CryptSetProviderEx	equ <CryptSetProviderExW>
else
CryptSetProviderEx	equ <CryptSetProviderExA>
endif 

;BOOL
CryptGetDefaultProviderA proto WINAPI \
	    dwProvType: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
	   pszProvName: LPSTR,
	   pcbProvName: LPDWORD
;BOOL
CryptGetDefaultProviderW proto WINAPI \
	    dwProvType: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
	   pszProvName: LPWSTR,
	   pcbProvName: LPDWORD
ifdef _UNICODE
CryptGetDefaultProvider equ <CryptGetDefaultProviderW>
else
CryptGetDefaultProvider equ <CryptGetDefaultProviderA>
endif 

;BOOL
CryptEnumProviderTypesA proto WINAPI \
	       dwIndex: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
	   pdwProvType: LPDWORD,
	   pszTypeName: LPSTR,
	   pcbTypeName: LPDWORD
;BOOL
CryptEnumProviderTypesW proto WINAPI \
	       dwIndex: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
	   pdwProvType: LPDWORD,
	   pszTypeName: LPWSTR,
	   pcbTypeName: LPDWORD
ifdef _UNICODE
CryptEnumProviderTypes	equ <CryptEnumProviderTypesW>
else
CryptEnumProviderTypes	equ <CryptEnumProviderTypesA>
endif 

;BOOL
CryptEnumProvidersA proto WINAPI \
	       dwIndex: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
	   pdwProvType: LPDWORD,
	   pszProvName: LPSTR,
	   pcbProvName: LPDWORD
;BOOL
CryptEnumProvidersW proto WINAPI \
	       dwIndex: DWORD,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
	   pdwProvType: LPDWORD,
	   pszProvName: LPWSTR,
	   pcbProvName: LPDWORD
ifdef _UNICODE
CryptEnumProviders	equ <CryptEnumProvidersW>
else
CryptEnumProviders	equ <CryptEnumProvidersA>
endif 

;BOOL
CryptContextAddRef proto WINAPI \
		 hProv: HCRYPTPROV,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD

;BOOL
CryptDuplicateKey proto WINAPI \
		  hKey: HCRYPTKEY,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
		 phKey: ptr HCRYPTKEY

;BOOL
CryptDuplicateHash proto WINAPI \
		 hHash: HCRYPTHASH,
	   pdwReserved: LPDWORD,
	       dwFlags: DWORD,
		phHash: ptr HCRYPTHASH

CRYPT_INTEGER_BLOB	STRUC
cbData			dd ?
pbData			LPSTR ?
CRYPT_INTEGER_BLOB	ENDS

PCRYPT_INTEGER_BLOB	typedef ptr CRYPT_INTEGER_BLOB
CRYPT_UINT_BLOB		typedef CRYPT_INTEGER_BLOB
PCRYPT_UINT_BLOB	typedef ptr CRYPT_INTEGER_BLOB
CRYPT_OBJID_BLOB	typedef CRYPT_INTEGER_BLOB
PCRYPT_OBJID_BLOB	typedef ptr CRYPT_INTEGER_BLOB
CERT_NAME_BLOB		typedef CRYPT_INTEGER_BLOB
PCERT_NAME_BLOB		typedef ptr CRYPT_INTEGER_BLOB
CERT_RDN_VALUE_BLOB	typedef CRYPT_INTEGER_BLOB
PCERT_RDN_VALUE_BLOB	typedef ptr CRYPT_INTEGER_BLOB
CERT_BLOB		typedef CRYPT_INTEGER_BLOB
PCERT_BLOB		typedef ptr CRYPT_INTEGER_BLOB
CRL_BLOB		typedef CRYPT_INTEGER_BLOB
PCRL_BLOB		typedef ptr CRYPT_INTEGER_BLOB
DATA_BLOB		typedef CRYPT_INTEGER_BLOB
PDATA_BLOB		typedef ptr CRYPT_INTEGER_BLOB
CRYPT_DATA_BLOB		typedef CRYPT_INTEGER_BLOB
PCRYPT_DATA_BLOB	typedef ptr CRYPT_INTEGER_BLOB
CRYPT_HASH_BLOB		typedef CRYPT_INTEGER_BLOB
PCRYPT_HASH_BLOB	typedef ptr CRYPT_INTEGER_BLOB
CRYPT_DIGEST_BLOB	typedef CRYPT_INTEGER_BLOB
PCRYPT_DIGEST_BLOB	typedef ptr CRYPT_INTEGER_BLOB
CRYPT_DER_BLOB		typedef CRYPT_INTEGER_BLOB
PCRYPT_DER_BLOB		typedef ptr CRYPT_INTEGER_BLOB
CRYPT_ATTR_BLOB		typedef CRYPT_INTEGER_BLOB
PCRYPT_ATTR_BLOB	typedef ptr CRYPT_INTEGER_BLOB


CRYPT_BIT_BLOB		STRUC
cbData			dd ?
pbData			LPSTR ?
cUnusedBits		dd ?
CRYPT_BIT_BLOB		ENDS
PCRYPT_BIT_BLOB		typedef ptr CRYPT_BIT_BLOB

CRYPT_ALGORITHM_IDENTIFIER  STRUC
pszObjId		LPSTR ?
Parameters		CRYPT_OBJID_BLOB <>
CRYPT_ALGORITHM_IDENTIFIER ENDS
PCRYPT_ALGORITHM_IDENTIFIER typedef ptr CRYPT_ALGORITHM_IDENTIFIER

szOID_RSA		equ <"1.2.840.113549">
szOID_PKCS		equ <"1.2.840.113549.1">
szOID_RSA_HASH		equ <"1.2.840.113549.2">
szOID_RSA_ENCRYPT	equ <"1.2.840.113549.3">

szOID_PKCS_1		equ <"1.2.840.113549.1.1">
szOID_PKCS_2		equ <"1.2.840.113549.1.2">
szOID_PKCS_3		equ <"1.2.840.113549.1.3">
szOID_PKCS_4		equ <"1.2.840.113549.1.4">
szOID_PKCS_5		equ <"1.2.840.113549.1.5">
szOID_PKCS_6		equ <"1.2.840.113549.1.6">
szOID_PKCS_7		equ <"1.2.840.113549.1.7">
szOID_PKCS_8		equ <"1.2.840.113549.1.8">
szOID_PKCS_9		equ <"1.2.840.113549.1.9">
szOID_PKCS_10		equ <"1.2.840.113549.1.10">

szOID_RSA_RSA		equ <"1.2.840.113549.1.1.1">
szOID_RSA_MD2RSA	equ <"1.2.840.113549.1.1.2">
szOID_RSA_MD4RSA	equ <"1.2.840.113549.1.1.3">
szOID_RSA_MD5RSA	equ <"1.2.840.113549.1.1.4">
szOID_RSA_SHA1RSA	equ <"1.2.840.113549.1.1.5">
szOID_RSA_SETOAEP_RSA	equ <"1.2.840.113549.1.1.6">

szOID_RSA_data		equ <"1.2.840.113549.1.7.1">
szOID_RSA_signedData	equ <"1.2.840.113549.1.7.2">
szOID_RSA_envelopedData equ <"1.2.840.113549.1.7.3">
szOID_RSA_signEnvData	equ <"1.2.840.113549.1.7.4">
szOID_RSA_digestedData	equ <"1.2.840.113549.1.7.5">
szOID_RSA_hashedData	equ <"1.2.840.113549.1.7.5">
szOID_RSA_encryptedData equ <"1.2.840.113549.1.7.6">

szOID_RSA_emailAddr	equ <"1.2.840.113549.1.9.1">
szOID_RSA_unstructName	equ <"1.2.840.113549.1.9.2">
szOID_RSA_contentType	equ <"1.2.840.113549.1.9.3">
szOID_RSA_messageDigest equ <"1.2.840.113549.1.9.4">
szOID_RSA_signingTime	equ <"1.2.840.113549.1.9.5">
szOID_RSA_counterSign	equ <"1.2.840.113549.1.9.6">
szOID_RSA_challengePwd	equ <"1.2.840.113549.1.9.7">
szOID_RSA_unstructAddr	equ <"1.2.840.113549.1.9.8">
szOID_RSA_extCertAttrs	equ <"1.2.840.113549.1.9.9">
szOID_RSA_SMIMECapabilities equ <"1.2.840.113549.1.9.15">
szOID_RSA_preferSignedData equ <"1.2.840.113549.1.9.15.1">

szOID_RSA_MD2		equ <"1.2.840.113549.2.2">
szOID_RSA_MD4		equ <"1.2.840.113549.2.4">
szOID_RSA_MD5		equ <"1.2.840.113549.2.5">

szOID_RSA_RC2CBC	equ <"1.2.840.113549.3.2">
szOID_RSA_RC4		equ <"1.2.840.113549.3.4">
szOID_RSA_DES_EDE3_CBC	equ <"1.2.840.113549.3.7">
szOID_RSA_RC5_CBCPad	equ <"1.2.840.113549.3.9">

szOID_DS		equ <"2.5">
szOID_DSALG		equ <"2.5.8">
szOID_DSALG_CRPT	equ <"2.5.8.1">
szOID_DSALG_HASH	equ <"2.5.8.2">
szOID_DSALG_SIGN	equ <"2.5.8.3">
szOID_DSALG_RSA		equ <"2.5.8.1.1">
szOID_OIW		equ <"1.3.14">
szOID_OIWSEC		equ <"1.3.14.3.2">
szOID_OIWSEC_md4RSA	equ <"1.3.14.3.2.2">
szOID_OIWSEC_md5RSA	equ <"1.3.14.3.2.3">
szOID_OIWSEC_md4RSA2	equ <"1.3.14.3.2.4">
szOID_OIWSEC_desECB	equ <"1.3.14.3.2.6">
szOID_OIWSEC_desCBC	equ <"1.3.14.3.2.7">
szOID_OIWSEC_desOFB	equ <"1.3.14.3.2.8">
szOID_OIWSEC_desCFB	equ <"1.3.14.3.2.9">
szOID_OIWSEC_desMAC	equ <"1.3.14.3.2.10">
szOID_OIWSEC_rsaSign	equ <"1.3.14.3.2.11">
szOID_OIWSEC_dsa	equ <"1.3.14.3.2.12">
szOID_OIWSEC_shaDSA	equ <"1.3.14.3.2.13">
szOID_OIWSEC_mdc2RSA	equ <"1.3.14.3.2.14">
szOID_OIWSEC_shaRSA	equ <"1.3.14.3.2.15">
szOID_OIWSEC_dhCommMod	equ <"1.3.14.3.2.16">
szOID_OIWSEC_desEDE	equ <"1.3.14.3.2.17">
szOID_OIWSEC_sha	equ <"1.3.14.3.2.18">
szOID_OIWSEC_mdc2	equ <"1.3.14.3.2.19">
szOID_OIWSEC_dsaComm	equ <"1.3.14.3.2.20">
szOID_OIWSEC_dsaCommSHA equ <"1.3.14.3.2.21">
szOID_OIWSEC_rsaXchg	equ <"1.3.14.3.2.22">
szOID_OIWSEC_keyHashSeal equ <"1.3.14.3.2.23">
szOID_OIWSEC_md2RSASign equ <"1.3.14.3.2.24">
szOID_OIWSEC_md5RSASign equ <"1.3.14.3.2.25">
szOID_OIWSEC_sha1	equ <"1.3.14.3.2.26">
szOID_OIWSEC_dsaSHA1	equ <"1.3.14.3.2.27">
szOID_OIWSEC_dsaCommSHA1 equ <"1.3.14.3.2.28">
szOID_OIWSEC_sha1RSASign equ <"1.3.14.3.2.29">
szOID_OIWDIR		equ <"1.3.14.7.2">
szOID_OIWDIR_CRPT	equ <"1.3.14.7.2.1">
szOID_OIWDIR_HASH	equ <"1.3.14.7.2.2">
szOID_OIWDIR_SIGN	equ <"1.3.14.7.2.3">
szOID_OIWDIR_md2	equ <"1.3.14.7.2.2.1">
szOID_OIWDIR_md2RSA	equ <"1.3.14.7.2.3.1">


szOID_INFOSEC				equ <"2.16.840.1.101.2.1">
szOID_INFOSEC_sdnsSignature		equ <"2.16.840.1.101.2.1.1.1">
szOID_INFOSEC_mosaicSignature		equ <"2.16.840.1.101.2.1.1.2">
szOID_INFOSEC_sdnsConfidentiality	equ <"2.16.840.1.101.2.1.1.3">
szOID_INFOSEC_mosaicConfidentiality	equ <"2.16.840.1.101.2.1.1.4">
szOID_INFOSEC_sdnsIntegrity		equ <"2.16.840.1.101.2.1.1.5">
szOID_INFOSEC_mosaicIntegrity		equ <"2.16.840.1.101.2.1.1.6">
szOID_INFOSEC_sdnsTokenProtection	equ <"2.16.840.1.101.2.1.1.7">
szOID_INFOSEC_mosaicTokenProtection	equ <"2.16.840.1.101.2.1.1.8">
szOID_INFOSEC_sdnsKeyManagement		equ <"2.16.840.1.101.2.1.1.9">
szOID_INFOSEC_mosaicKeyManagement	equ <"2.16.840.1.101.2.1.1.10">
szOID_INFOSEC_sdnsKMandSig		equ <"2.16.840.1.101.2.1.1.11">
szOID_INFOSEC_mosaicKMandSig		equ <"2.16.840.1.101.2.1.1.12">
szOID_INFOSEC_SuiteASignature		equ <"2.16.840.1.101.2.1.1.13">
szOID_INFOSEC_SuiteAConfidentiality	equ <"2.16.840.1.101.2.1.1.14">
szOID_INFOSEC_SuiteAIntegrity		equ <"2.16.840.1.101.2.1.1.15">
szOID_INFOSEC_SuiteATokenProtection	equ <"2.16.840.1.101.2.1.1.16">
szOID_INFOSEC_SuiteAKeyManagement	equ <"2.16.840.1.101.2.1.1.17">
szOID_INFOSEC_SuiteAKMandSig		equ <"2.16.840.1.101.2.1.1.18">
szOID_INFOSEC_mosaicUpdatedSig		equ <"2.16.840.1.101.2.1.1.19">
szOID_INFOSEC_mosaicKMandUpdSig		equ <"2.16.840.1.101.2.1.1.20">
szOID_INFOSEC_mosaicUpdatedInteg	equ <"2.16.840.1.101.2.1.1.21">

CRYPT_OBJID_TABLE	STRUC
dwAlgId			dd ?
pszObjId		LPCSTR ?
CRYPT_OBJID_TABLE	ENDS
PCRYPT_OBJID_TABLE	typedef ptr CRYPT_OBJID_TABLE


CRYPT_HASH_INFO		STRUC
HashAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
Hash			CRYPT_HASH_BLOB <>
CRYPT_HASH_INFO		ENDS
PCRYPT_HASH_INFO	typedef ptr CRYPT_HASH_INFO

CERT_EXTENSION		STRUC
pszObjId		LPSTR ?
fCritical		BOOL ?
Value			CRYPT_OBJID_BLOB <>
CERT_EXTENSION		ENDS
PCERT_EXTENSION		typedef ptr CERT_EXTENSION

CRYPT_ATTRIBUTE_TYPE_VALUE  STRUC
pszObjId		LPSTR ?
Value			CRYPT_OBJID_BLOB <>
CRYPT_ATTRIBUTE_TYPE_VALUE ENDS
PCRYPT_ATTRIBUTE_TYPE_VALUE typedef ptr CRYPT_ATTRIBUTE_TYPE_VALUE

CRYPT_ATTRIBUTE		STRUC
pszObjId		LPSTR ?
cValue			dd ?
rgValue			PCRYPT_ATTR_BLOB ?
CRYPT_ATTRIBUTE		ENDS
PCRYPT_ATTRIBUTE	typedef ptr CRYPT_ATTRIBUTE

CRYPT_ATTRIBUTES	STRUC
cAttr			dd ?
rgAttr			PCRYPT_ATTRIBUTE ?
CRYPT_ATTRIBUTES	ENDS
PCRYPT_ATTRIBUTES	typedef ptr CRYPT_ATTRIBUTES

CERT_RDN_ATTR		STRUC
pszObjId		LPSTR ?
dwValueType		dd ?
Value			CERT_RDN_VALUE_BLOB <>
CERT_RDN_ATTR		ENDS
PCERT_RDN_ATTR		typedef ptr CERT_RDN_ATTR

szOID_COMMON_NAME	equ <"2.5.4.3"> 
szOID_SUR_NAME		equ <"2.5.4.4"> 
szOID_DEVICE_SERIAL_NUMBER equ <"2.5.4.5">  

szOID_COUNTRY_NAME	equ <"2.5.4.6"> 
szOID_LOCALITY_NAME	equ <"2.5.4.7"> 
szOID_STATE_OR_PROVINCE_NAME equ <"2.5.4.8">  
szOID_STREET_ADDRESS	equ <"2.5.4.9"> 

szOID_ORGANIZATION_NAME equ <"2.5.4.10"> 
szOID_ORGANIZATIONAL_UNIT_NAME equ <"2.5.4.11"> 
szOID_TITLE		equ <"2.5.4.12"> 

szOID_DESCRIPTION	equ <"2.5.4.13"> 
szOID_SEARCH_GUIDE	equ <"2.5.4.14">
szOID_BUSINESS_CATEGORY equ <"2.5.4.15"> 

szOID_POSTAL_ADDRESS	equ <"2.5.4.16">
szOID_POSTAL_CODE	equ <"2.5.4.17"> 
szOID_POST_OFFICE_BOX	equ <"2.5.4.18"> 
szOID_PHYSICAL_DELIVERY_OFFICE_NAME equ <"2.5.4.19"> 

szOID_TELEPHONE_NUMBER	equ <"2.5.4.20"> 
szOID_TELEX_NUMBER	equ <"2.5.4.21">
szOID_TELETEXT_TERMINAL_IDENTIFIER equ <"2.5.4.22">
szOID_FACSIMILE_TELEPHONE_NUMBER equ <"2.5.4.23">
szOID_X21_ADDRESS	equ <"2.5.4.24"> 
szOID_INTERNATIONAL_ISDN_NUMBER equ <"2.5.4.25"> 
szOID_REGISTERED_ADDRESS equ <"2.5.4.26">
szOID_DESTINATION_INDICATOR equ <"2.5.4.27"> 

szOID_PREFERRED_DELIVERY_METHOD equ <"2.5.4.28">

szOID_PRESENTATION_ADDRESS equ <"2.5.4.29">
szOID_SUPPORTED_APPLICATION_CONTEXT equ <"2.5.4.30">

szOID_MEMBER		equ <"2.5.4.31">
szOID_OWNER		equ <"2.5.4.32">
szOID_ROLE_OCCUPANT	equ <"2.5.4.33">
szOID_SEE_ALSO		equ <"2.5.4.34">

szOID_USER_PASSWORD	equ <"2.5.4.35">
szOID_USER_CERTIFICATE	equ <"2.5.4.36">
szOID_CA_CERTIFICATE	equ <"2.5.4.37">
szOID_AUTHORITY_REVOCATION_LIST equ <"2.5.4.38">
szOID_CERTIFICATE_REVOCATION_LIST equ <"2.5.4.39">
szOID_CROSS_CERTIFICATE_PAIR equ <"2.5.4.40">

szOID_GIVEN_NAME	equ <"2.5.4.42"> 
szOID_INITIALS		equ <"2.5.4.43"> 

szOID_DOMAIN_COMPONENT	equ <"0.9.2342.19200300.100.1.25"> 

CERT_RDN_ANY_TYPE	equ 0
CERT_RDN_ENCODED_BLOB	equ 1
CERT_RDN_OCTET_STRING	equ 2
CERT_RDN_NUMERIC_STRING equ 3
CERT_RDN_PRINTABLE_STRING equ 4
CERT_RDN_TELETEX_STRING equ 5
CERT_RDN_T61_STRING	equ 5
CERT_RDN_VIDEOTEX_STRING equ 6
CERT_RDN_IA5_STRING	equ 7
CERT_RDN_GRAPHIC_STRING equ 8
CERT_RDN_VISIBLE_STRING equ 9
CERT_RDN_ISO646_STRING	equ 9
CERT_RDN_GENERAL_STRING equ 10
CERT_RDN_UNIVERSAL_STRING equ 11
CERT_RDN_INT4_STRING	equ 11
CERT_RDN_BMP_STRING	equ 12
CERT_RDN_UNICODE_STRING equ 12


IS_CERT_RDN_CHAR_STRING macro X
	exitm<(X GE CERT_RDN_NUMERIC_STRING)>
	endm

CERT_RDN		STRUC
cRDNAttr		dd ?
rgRDNAttr		PCERT_RDN_ATTR ?
CERT_RDN		ENDS
PCERT_RDN		typedef ptr CERT_RDN

CERT_NAME_INFO		STRUC
cRDN			dd ?
rgRDN			PCERT_RDN ?
CERT_NAME_INFO		ENDS
PCERT_NAME_INFO		typedef ptr CERT_NAME_INFO

CERT_NAME_VALUE		STRUC
dwValueType		dd ?
Value			CERT_RDN_VALUE_BLOB <>
CERT_NAME_VALUE		ENDS
PCERT_NAME_VALUE	typedef ptr CERT_NAME_VALUE

CERT_PUBLIC_KEY_INFO	STRUC
Algorithm		CRYPT_ALGORITHM_IDENTIFIER <>
PublicKey		CRYPT_BIT_BLOB <>
CERT_PUBLIC_KEY_INFO	ENDS
PCERT_PUBLIC_KEY_INFO	typedef ptr CERT_PUBLIC_KEY_INFO

CERT_RSA_PUBLIC_KEY_OBJID equ szOID_RSA_RSA
CERT_DEFAULT_OID_PUBLIC_KEY_SIGN equ szOID_RSA_RSA
CERT_DEFAULT_OID_PUBLIC_KEY_XCHG equ szOID_RSA_RSA

CERT_INFO		STRUC
dwVersion		dd ?
SerialNumber		CRYPT_INTEGER_BLOB <>
SignatureAlgorithm	CRYPT_ALGORITHM_IDENTIFIER <>
Issuer			CERT_NAME_BLOB <>
NotBefore		FILETIME <>
NotAfter		FILETIME <>
Subject			CERT_NAME_BLOB <>
SubjectPublicKeyInfo	CERT_PUBLIC_KEY_INFO <>
IssuerUniqueId		CRYPT_BIT_BLOB <>
SubjectUniqueId		CRYPT_BIT_BLOB <>
cExtension		dd ?
rgExtension		PCERT_EXTENSION ?
CERT_INFO		ENDS
PCERT_INFO		typedef ptr CERT_INFO

CERT_V1			equ 0
CERT_V2			equ 1
CERT_V3			equ 2

CERT_INFO_VERSION_FLAG	equ 1
CERT_INFO_SERIAL_NUMBER_FLAG equ 2
CERT_INFO_SIGNATURE_ALGORITHM_FLAG equ 3
CERT_INFO_ISSUER_FLAG	equ 4
CERT_INFO_NOT_BEFORE_FLAG equ 5
CERT_INFO_NOT_AFTER_FLAG equ 6
CERT_INFO_SUBJECT_FLAG	equ 7
CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG equ 8
CERT_INFO_ISSUER_UNIQUE_ID_FLAG equ 9
CERT_INFO_SUBJECT_UNIQUE_ID_FLAG equ 10
CERT_INFO_EXTENSION_FLAG equ 11

CRL_ENTRY		STRUC
SerialNumber		CRYPT_INTEGER_BLOB <>
RevocationDate		FILETIME <>
cExtension		dd ?
rgExtension		PCERT_EXTENSION ?
CRL_ENTRY		ENDS
PCRL_ENTRY		typedef ptr CRL_ENTRY

CRL_INFO		STRUC
dwVersion		dd ?
SignatureAlgorithm	CRYPT_ALGORITHM_IDENTIFIER <>
Issuer			CERT_NAME_BLOB <>
ThisUpdate		FILETIME <>
NextUpdate		FILETIME <>
cCRLEntry		dd ?
rgCRLEntry		PCRL_ENTRY ?
cExtension		dd ?
rgExtension		PCERT_EXTENSION ?
CRL_INFO		ENDS
PCRL_INFO		typedef ptr CRL_INFO

CRL_V1			equ 0
CRL_V2			equ 1


CERT_REQUEST_INFO	STRUC
dwVersion		dd ?
Subject			CERT_NAME_BLOB <>
SubjectPublicKeyInfo	CERT_PUBLIC_KEY_INFO <>
cAttribute		dd ?
rgAttribute		PCRYPT_ATTRIBUTE ?
CERT_REQUEST_INFO	ENDS
PCERT_REQUEST_INFO	typedef ptr CERT_REQUEST_INFO

CERT_REQUEST_V1		equ 0

CERT_KEYGEN_REQUEST_INFO  STRUC
dwVersion		dd ?
SubjectPublicKeyInfo	CERT_PUBLIC_KEY_INFO <>
pwszChallengeString	LPWSTR ?	
CERT_KEYGEN_REQUEST_INFO ENDS
PCERT_KEYGEN_REQUEST_INFO typedef ptr CERT_KEYGEN_REQUEST_INFO

CERT_KEYGEN_REQUEST_V1	equ 0


CERT_SIGNED_CONTENT_INFO  STRUC
ToBeSigned		CRYPT_DER_BLOB <>
SignatureAlgorithm	CRYPT_ALGORITHM_IDENTIFIER <>
Signature		CRYPT_BIT_BLOB <>
CERT_SIGNED_CONTENT_INFO ENDS
PCERT_SIGNED_CONTENT_INFO typedef ptr CERT_SIGNED_CONTENT_INFO



CTL_USAGE		STRUC
cUsageIdentifier	dd ?
rgpszUsageIdentifier	LPSTR ? 
CTL_USAGE		ENDS
PCTL_USAGE		typedef ptr CTL_USAGE
PCERT_ENHKEY_USAGE	typedef ptr CERT_ENHKEY_USAGE


CTL_ENTRY		STRUC
SubjectIdentifier	CRYPT_DATA_BLOB <>	
cAttribute		dd ?
rgAttribute		PCRYPT_ATTRIBUTE ?	
CTL_ENTRY		ENDS
PCTL_ENTRY		typedef ptr CTL_ENTRY

CTL_INFO		STRUC
dwVersion		dd ?
SubjectUsage		CTL_USAGE <>
ListIdentifier		CRYPT_DATA_BLOB <>	
SequenceNumber		CRYPT_INTEGER_BLOB <>	
ThisUpdate		FILETIME <>
NextUpdate		FILETIME <> 
SubjectAlgorithm	CRYPT_ALGORITHM_IDENTIFIER <>
cCTLEntry		dd ?
rgCTLEntry		PCTL_ENTRY ?	
cExtension		dd ?
rgExtension		PCERT_EXTENSION ?	
CTL_INFO		ENDS
PCTL_INFO		typedef ptr CTL_INFO

CTL_V1			equ 0


CRYPT_TIME_STAMP_REQUEST_INFO  STRUC
pszTimeStampAlgorithm	LPSTR ? 
pszContentType		LPSTR ? 
Content			CRYPT_OBJID_BLOB <>
cAttribute		dd ?
rgAttribute		PCRYPT_ATTRIBUTE ?
CRYPT_TIME_STAMP_REQUEST_INFO ENDS
PCRYPT_TIME_STAMP_REQUEST_INFO typedef ptr CRYPT_TIME_STAMP_REQUEST_INFO

CERT_ENCODING_TYPE_MASK equ 0x0000FFFF
CMSG_ENCODING_TYPE_MASK equ 0xFFFF0000
GET_CERT_ENCODING_TYPE macro X
	exitm<(X AND CERT_ENCODING_TYPE_MASK)>
	endm
GET_CMSG_ENCODING_TYPE macro X
	exitm<(X AND CMSG_ENCODING_TYPE_MASK)>
	endm

CRYPT_ASN_ENCODING	equ 0x00000001
CRYPT_NDR_ENCODING	equ 0x00000002
X509_ASN_ENCODING	equ 0x00000001
X509_NDR_ENCODING	equ 0x00000002
PKCS_7_ASN_ENCODING	equ 0x00010000
PKCS_7_NDR_ENCODING	equ 0x00020000


;BOOL
CryptFormatObject proto WINAPI \
    dwCertEncodingType: DWORD,
	  dwFormatType: DWORD,
       dwFormatStrType: DWORD,
	 pFormatStruct: PVOID,
	lpszStructType: LPCSTR,
	     pbEncoded: LPBYTE,
	     cbEncoded: DWORD,
	      pbFormat: PVOID,
	     pcbFormat: LPDWORD



;BOOL
CryptEncodeObject proto WINAPI \
    dwCertEncodingType: DWORD,
	lpszStructType: LPCSTR,
	  pvStructInfo: PVOID,
	     pbEncoded: LPBYTE,
	    pcbEncoded: LPDWORD

;BOOL
CryptDecodeObject proto WINAPI \
    dwCertEncodingType: DWORD,
	lpszStructType: LPCSTR,
	     pbEncoded: LPBYTE,
	     cbEncoded: DWORD,
	       dwFlags: DWORD,
	  pvStructInfo: PVOID,
	 pcbStructInfo: LPDWORD

CRYPT_DECODE_NOCOPY_FLAG equ 0x1

CRYPT_ENCODE_DECODE_NONE equ 0
X509_CERT		equ (1)
X509_CERT_TO_BE_SIGNED	equ (2)
X509_CERT_CRL_TO_BE_SIGNED equ (3)
X509_CERT_REQUEST_TO_BE_SIGNED equ (4)
X509_EXTENSIONS		equ (5)
X509_NAME_VALUE		equ (6)
X509_NAME		equ (7)
X509_PUBLIC_KEY_INFO	equ (8)

X509_AUTHORITY_KEY_ID	equ (9)
X509_KEY_ATTRIBUTES	equ (10)
X509_KEY_USAGE_RESTRICTION equ (11)
X509_ALTERNATE_NAME	equ (12)
X509_BASIC_CONSTRAINTS	equ (13)
X509_KEY_USAGE		equ (14)
X509_BASIC_CONSTRAINTS2 equ (15)
X509_CERT_POLICIES	equ (16)

PKCS_UTC_TIME		equ (17)
PKCS_TIME_REQUEST	equ (18)
RSA_CSP_PUBLICKEYBLOB	equ (19)
X509_UNICODE_NAME	equ (20)

X509_KEYGEN_REQUEST_TO_BE_SIGNED equ (21)
PKCS_ATTRIBUTE		equ (22)
PKCS_CONTENT_INFO_SEQUENCE_OF_ANY equ (23)

X509_UNICODE_NAME_VALUE equ (24)
X509_ANY_STRING		equ X509_NAME_VAUE
X509_UNICODE_ANY_STRING equ X509_UNICODE_NAME_VAUE
X509_OCTET_STRING	equ (25)
X509_BITS		equ (26)
X509_INTEGER		equ (27)
X509_MULTI_BYTE_INTEGER equ (28)
X509_ENUMERATED		equ (29)
X509_CHOICE_OF_TIME	equ (30)

X509_AUTHORITY_KEY_ID2	equ (31)
X509_CRL_REASON_CODE	equ X509_ENUMERATED
PKCS_CONTENT_INFO	equ (33)
X509_SEQUENCE_OF_ANY	equ (34)
X509_CRL_DIST_POINTS	equ (35)
X509_ENHANCED_KEY_USAGE equ (36)
PKCS_CTL		equ (37)

X509_MULTI_BYTE_UINT	equ (38)
X509_DSS_PUBLICKEY	equ X509_MULTI_BYTE_UINT
X509_DSS_PARAMETERS	equ (39)
X509_DSS_SIGNATURE	equ (40)
PKCS_RC2_CBC_PARAMETERS equ (41)
PKCS_SMIME_CAPABILITIES equ (42)


PKCS7_SIGNER_INFO	equ (500)


szOID_AUTHORITY_KEY_IDENTIFIER equ <"2.5.29.1">
szOID_KEY_ATTRIBUTES	equ <"2.5.29.2">
szOID_KEY_USAGE_RESTRICTION equ <"2.5.29.4">
szOID_SUBJECT_ALT_NAME	equ <"2.5.29.7">
szOID_ISSUER_ALT_NAME	equ <"2.5.29.8">
szOID_BASIC_CONSTRAINTS equ <"2.5.29.10">
szOID_KEY_USAGE		equ <"2.5.29.15">
szOID_BASIC_CONSTRAINTS2 equ <"2.5.29.19">
szOID_CERT_POLICIES	equ <"2.5.29.32">

szOID_AUTHORITY_KEY_IDENTIFIER2 equ <"2.5.29.35">
szOID_SUBJECT_KEY_IDENTIFIER equ <"2.5.29.14">
szOID_SUBJECT_ALT_NAME2 equ <"2.5.29.17">
szOID_ISSUER_ALT_NAME2	equ <"2.5.29.18">
szOID_CRL_REASON_CODE	equ <"2.5.29.21">
szOID_CRL_DIST_POINTS	equ <"2.5.29.31">
szOID_ENHANCED_KEY_USAGE equ <"2.5.29.37">


szOID_PKIX		equ <"1.3.6.1.5.5.7">
szOID_AUTHORITY_INFO_ACCESS equ <"1.3.6.1.5.5.7.2">

szOID_CERT_EXTENSIONS	equ <"1.3.6.1.4.1.311.2.1.14">
szOID_NEXT_UPDATE_LOCATION equ <"1.3.6.1.4.1.311.10.2">

szOID_CTL		equ <"1.3.6.1.4.1.311.10.1">

szOID_POLICY_MAPPINGS	equ <"2.5.29.5">
szOID_SUBJECT_DIR_ATTRS equ <"2.5.29.9">

szOID_PKIX_KP		equ <"1.3.6.1.5.5.7.3">

szOID_PKIX_KP_SERVER_AUTH equ <"1.3.6.1.5.5.7.3.1">

szOID_PKIX_KP_CLIENT_AUTH equ <"1.3.6.1.5.5.7.3.2">

szOID_PKIX_KP_CODE_SIGNING equ <"1.3.6.1.5.5.7.3.3">

szOID_PKIX_KP_EMAIL_PROTECTION equ <"1.3.6.1.5.5.7.3.4">


szOID_KP_CTL_USAGE_SIGNING equ <"1.3.6.1.4.1.311.10.3.1">

szOID_KP_TIME_STAMP_SIGNING equ <"1.3.6.1.4.1.311.10.3.2">

szOID_YESNO_TRUST_ATTR	equ <"1.3.6.1.4.1.311.10.4.1">





CERT_EXTENSIONS		STRUC
cExtension		dd ?
rgExtension		PCERT_EXTENSION ?
CERT_EXTENSIONS		ENDS
PCERT_EXTENSIONS	typedef ptr CERT_EXTENSIONS





CERT_UNICODE_RDN_ERR_INDEX_MASK equ 0x3FF
CERT_UNICODE_RDN_ERR_INDEX_SHIFT equ 22
CERT_UNICODE_ATTR_ERR_INDEX_MASK equ 0x003F
CERT_UNICODE_ATTR_ERR_INDEX_SHIFT equ 16
CERT_UNICODE_VALUE_ERR_INDEX_MASK equ 0x0000FFFF
CERT_UNICODE_VALUE_ERR_INDEX_SHIFT equ 0

GET_CERT_UNICODE_RDN_ERR_INDEX macro X
	exitm<((X SHR CERT_UNICODE_RDN_ERR_INDEX_SHIFT) AND CERT_UNICODE_RDN_ERR_INDEX_MASK)>
	endm
GET_CERT_UNICODE_ATTR_ERR_INDEX macro X
	exitm<((X SHR CERT_UNICODE_ATTR_ERR_INDEX_SHIFT) AND CERT_UNICODE_ATTR_ERR_INDEX_MASK)>
	endm
GET_CERT_UNICODE_VALUE_ERR_INDEX macro X
	exitm<(X AND CERT_UNICODE_VAUE_ERR_INDEX_MASK)>
	endm



CERT_AUTHORITY_KEY_ID_INFO  STRUC
KeyId			CRYPT_DATA_BLOB <>
CertIssuer		CERT_NAME_BLOB <>
CertSerialNumber	CRYPT_INTEGER_BLOB <>
CERT_AUTHORITY_KEY_ID_INFO ENDS
PCERT_AUTHORITY_KEY_ID_INFO typedef ptr CERT_AUTHORITY_KEY_ID_INFO

CERT_PRIVATE_KEY_VALIDITY  STRUC
NotBefore		FILETIME <>
NotAfter		FILETIME <>
CERT_PRIVATE_KEY_VALIDITY ENDS
PCERT_PRIVATE_KEY_VALIDITY typedef ptr CERT_PRIVATE_KEY_VALIDITY

CERT_KEY_ATTRIBUTES_INFO  STRUC
KeyId			CRYPT_DATA_BLOB <>
IntendedKeyUsage	CRYPT_BIT_BLOB <>
pPrivateKeyUsagePeriod	PCERT_PRIVATE_KEY_VALIDITY ?	
CERT_KEY_ATTRIBUTES_INFO ENDS
PCERT_KEY_ATTRIBUTES_INFO typedef ptr CERT_KEY_ATTRIBUTES_INFO

CERT_DIGITAL_SIGNATURE_KEY_USAGE equ 0x80
CERT_NON_REPUDIATION_KEY_USAGE equ 0x40
CERT_KEY_ENCIPHERMENT_KEY_USAGE equ 0x20
CERT_DATA_ENCIPHERMENT_KEY_USAGE equ 0x10
CERT_KEY_AGREEMENT_KEY_USAGE equ 0x08
CERT_KEY_CERT_SIGN_KEY_USAGE equ 0x04
CERT_OFFLINE_CRL_SIGN_KEY_USAGE equ 0x02

CERT_CRL_SIGN_KEY_USAGE equ 0x02

CERT_POLICY_ID		STRUC
cCertPolicyElementId	dd ?
rgpszCertPolicyElementId LPSTR ?	
CERT_POLICY_ID		ENDS
PCERT_POLICY_ID		typedef ptr CERT_POLICY_ID

CERT_KEY_USAGE_RESTRICTION_INFO	 STRUC
cCertPolicyId		dd ?
rgCertPolicyId		PCERT_POLICY_ID ?
RestrictedKeyUsage	CRYPT_BIT_BLOB <>
CERT_KEY_USAGE_RESTRICTION_INFO ENDS
PCERT_KEY_USAGE_RESTRICTION_INFO typedef ptr CERT_KEY_USAGE_RESTRICTION_INFO



CERT_ALT_NAME_ENTRY	STRUC
dwAltNameChoice		dd ?
UNION
  pwszRfc822Name	LPWSTR ?	
  pwszDNSName		LPWSTR ?	
  DirectoryName		CERT_NAME_BLOB <> 
  pwszURL		LPWSTR ?	
  IPAddress		CRYPT_DATA_BLOB <>	
  pszRegisteredID	LPSTR ? 
ENDS
CERT_ALT_NAME_ENTRY	ENDS
PCERT_ALT_NAME_ENTRY	typedef ptr CERT_ALT_NAME_ENTRY

CERT_ALT_NAME_OTHER_NAME equ 1
CERT_ALT_NAME_RFC822_NAME equ 2
CERT_ALT_NAME_DNS_NAME	equ 3
CERT_ALT_NAME_X400_ADDRESS equ 4
CERT_ALT_NAME_DIRECTORY_NAME equ 5
CERT_ALT_NAME_EDI_PARTY_NAME equ 6
CERT_ALT_NAME_URL	equ 7
CERT_ALT_NAME_IP_ADDRESS equ 8
CERT_ALT_NAME_REGISTERED_ID equ 9


CERT_ALT_NAME_INFO	STRUC
cAltEntry		dd ?
rgAltEntry		PCERT_ALT_NAME_ENTRY ?
CERT_ALT_NAME_INFO	ENDS
PCERT_ALT_NAME_INFO	typedef ptr CERT_ALT_NAME_INFO

CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK equ 0xFF
CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT equ 16
CERT_ALT_NAME_VALUE_ERR_INDEX_MASK equ 0x0000FFFF
CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT equ 0

GET_CERT_ALT_NAME_ENTRY_ERR_INDEX macro X
	exitm<((X SHR CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT) AND CERT_AT_NAME_ENTRY_ERR_INDEX_MASK)>
	endm
GET_CERT_ALT_NAME_VALUE_ERR_INDEX macro X
	exitm<(X AND CERT_ALT_NAME_VAUE_ERR_INDEX_MASK)>
	endm


CERT_BASIC_CONSTRAINTS_INFO  STRUC
SubjectType		CRYPT_BIT_BLOB <>
fPathLenConstraint	BOOL ?
dwPathLenConstraint	dd ?
cSubtreesConstraint	dd ?
rgSubtreesConstraint	PVOID ?; CERT_NAME_BLOB ?
CERT_BASIC_CONSTRAINTS_INFO ENDS
PCERT_BASIC_CONSTRAINTS_INFO typedef ptr CERT_BASIC_CONSTRAINTS_INFO

CERT_CA_SUBJECT_FLAG	equ 0x80
CERT_END_ENTITY_SUBJECT_FLAG equ 0x40

CERT_BASIC_CONSTRAINTS2_INFO  STRUC
fCA			BOOL ?
fPathLenConstraint	BOOL ?
dwPathLenConstraint	dd ?
CERT_BASIC_CONSTRAINTS2_INFO ENDS
PCERT_BASIC_CONSTRAINTS2_INFO typedef ptr CERT_BASIC_CONSTRAINTS2_INFO


CERT_POLICY_QUALIFIER_INFO  STRUC
pszPolicyQualifierId	LPSTR ? 
Qualifier		CRYPT_OBJID_BLOB <>	
CERT_POLICY_QUALIFIER_INFO ENDS
PCERT_POLICY_QUALIFIER_INFO typedef ptr CERT_POLICY_QUALIFIER_INFO

CERT_POLICY_INFO	STRUC
pszPolicyIdentifier	LPSTR ? 
cPolicyQualifier	dd ?	
rgPolicyQualifier	PVOID ?; CERT_POLICY_QUALIFIER_INFO ?
CERT_POLICY_INFO	ENDS
PCERT_POLICY_INFO	typedef ptr CERT_POLICY_INFO

CERT_POLICIES_INFO	STRUC
cPolicyInfo		dd ?
rgPolicyInfo		PVOID ?;ptr CERT_POLICY_INFO ?
CERT_POLICIES_INFO	ENDS
PCERT_POLICIES_INFO	typedef ptr CERT_POLICIES_INFO




CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY  STRUC
pszObjId		LPSTR ?
cValue			dd ?
rgValue			PCRYPT_DER_BLOB ?
CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY ENDS
PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY typedef ptr CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY

CRYPT_CONTENT_INFO	STRUC
pszObjId		LPSTR ?
Content			CRYPT_DER_BLOB <>
CRYPT_CONTENT_INFO	ENDS
PCRYPT_CONTENT_INFO	typedef ptr CRYPT_CONTENT_INFO








CRYPT_SEQUENCE_OF_ANY	STRUC
cValue			dd ?
rgValue			PCRYPT_DER_BLOB ?
CRYPT_SEQUENCE_OF_ANY	ENDS
PCRYPT_SEQUENCE_OF_ANY	typedef ptr CRYPT_SEQUENCE_OF_ANY


CERT_AUTHORITY_KEY_ID2_INFO  STRUC
KeyId			CRYPT_DATA_BLOB <>
AuthorityCertIssuer	CERT_ALT_NAME_INFO <>	
AuthorityCertSerialNumber CRYPT_INTEGER_BLOB <>
CERT_AUTHORITY_KEY_ID2_INFO ENDS
PCERT_AUTHORITY_KEY_ID2_INFO typedef ptr CERT_AUTHORITY_KEY_ID2_INFO



CRL_REASON_UNSPECIFIED	equ 0
CRL_REASON_KEY_COMPROMISE equ 1
CRL_REASON_CA_COMPROMISE equ 2
CRL_REASON_AFFILIATION_CHANGED equ 3
CRL_REASON_SUPERSEDED	equ 4
CRL_REASON_CESSATION_OF_OPERATION equ 5
CRL_REASON_CERTIFICATE_HOLD equ 6
CRL_REASON_REMOVE_FROM_CRL equ 8


CRL_DIST_POINT_NAME	STRUC
dwDistPointNameChoice	dd ?
;UNION
  FullName		CERT_ALT_NAME_INFO <>
;ENDS
CRL_DIST_POINT_NAME	ENDS
PCRL_DIST_POINT_NAME	typedef ptr CRL_DIST_POINT_NAME

CRL_DIST_POINT_NO_NAME	equ 0
CRL_DIST_POINT_FULL_NAME equ 1
CRL_DIST_POINT_ISSUER_RDN_NAME equ 2

CRL_DIST_POINT		STRUC
DistPointName		CRL_DIST_POINT_NAME <>	
ReasonFlags		CRYPT_BIT_BLOB <>	
CRLIssuer		CERT_ALT_NAME_INFO <>	
CRL_DIST_POINT		ENDS
PCRL_DIST_POINT		typedef ptr CRL_DIST_POINT

CRL_REASON_UNUSED_FLAG	equ 0x80
CRL_REASON_KEY_COMPROMISE_FLAG equ 0x40
CRL_REASON_CA_COMPROMISE_FLAG equ 0x20
CRL_REASON_AFFILIATION_CHANGED_FLAG equ 0x10
CRL_REASON_SUPERSEDED_FLAG equ 0x08
CRL_REASON_CESSATION_OF_OPERATION_FLAG equ 0x04
CRL_REASON_CERTIFICATE_HOLD_FLAG equ 0x02

CRL_DIST_POINTS_INFO	STRUC
cDistPoint		dd ?
rgDistPoint		PCRL_DIST_POINT ?
CRL_DIST_POINTS_INFO	ENDS
PCRL_DIST_POINTS_INFO	typedef ptr CRL_DIST_POINTS_INFO

CRL_DIST_POINT_ERR_INDEX_MASK equ 0x7F
CRL_DIST_POINT_ERR_INDEX_SHIFT equ 24
GET_CRL_DIST_POINT_ERR_INDEX macro X
	exitm<((X SHR CRL_DIST_POINT_ERR_INDEX_SHIFT) AND CRL_DIST_POINT_ERR_INDEX_MASK)>
	endm

CRL_DIST_POINT_ERR_CRL_ISSUER_BIT equ 0x80000000
IS_CRL_DIST_POINT_ERR_CRL_ISSUER macro X
	exitm<(0 NOT = (X AND CRL_DIST_POINT_ERR_CRL_ISSUER_BIT))>
	endm







CERT_DSS_PARAMETERS	STRUC
p			CRYPT_UINT_BLOB <>
q			CRYPT_UINT_BLOB <>
g			CRYPT_UINT_BLOB <>
CERT_DSS_PARAMETERS	ENDS
PCERT_DSS_PARAMETERS	typedef ptr CERT_DSS_PARAMETERS

CERT_DSS_R_LEN		equ 20
CERT_DSS_S_LEN		equ 20
CERT_DSS_SIGNATURE_LEN	equ (CERT_DSS_R_LEN + CERT_DSS_S_LEN)

CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN equ (2 + 2*(2 + 20 +1))


CRYPT_RC2_CBC_PARAMETERS  STRUC
dwVersion		dd ?
fIV			BOOL ?	
rgbIV			db 8 dup(?)
CRYPT_RC2_CBC_PARAMETERS ENDS
PCRYPT_RC2_CBC_PARAMETERS typedef ptr CRYPT_RC2_CBC_PARAMETERS

CRYPT_RC2_40BIT_VERSION equ 160
CRYPT_RC2_64BIT_VERSION equ 120
CRYPT_RC2_128BIT_VERSION equ 58


CRYPT_SMIME_CAPABILITY	STRUC
pszObjId		LPSTR ?
Parameters		CRYPT_OBJID_BLOB <>
CRYPT_SMIME_CAPABILITY	ENDS
PCRYPT_SMIME_CAPABILITY typedef ptr CRYPT_SMIME_CAPABILITY

CRYPT_SMIME_CAPABILITIES  STRUC
cCapability		dd ?
rgCapability		PCRYPT_SMIME_CAPABILITY ?
CRYPT_SMIME_CAPABILITIES ENDS
PCRYPT_SMIME_CAPABILITIES typedef ptr CRYPT_SMIME_CAPABILITIES




szOID_NETSCAPE			equ <"2.16.840.1.113730">
szOID_NETSCAPE_CERT_EXTENSION	equ <"2.16.840.1.113730.1">
szOID_NETSCAPE_CERT_TYPE	equ <"2.16.840.1.113730.1.1">
szOID_NETSCAPE_BASE_URL		equ <"2.16.840.1.113730.1.2">
szOID_NETSCAPE_REVOCATION_URL	equ <"2.16.840.1.113730.1.3">
szOID_NETSCAPE_CA_REVOCATION_URL equ <"2.16.840.1.113730.1.4">
szOID_NETSCAPE_CERT_RENEWAL_URL equ <"2.16.840.1.113730.1.7">
szOID_NETSCAPE_CA_POLICY_URL	equ <"2.16.840.1.113730.1.8">
szOID_NETSCAPE_SSL_SERVER_NAME	equ <"2.16.840.1.113730.1.12">
szOID_NETSCAPE_COMMENT		equ <"2.16.840.1.113730.1.13">

szOID_NETSCAPE_DATA_TYPE	equ <"2.16.840.1.113730.2">
szOID_NETSCAPE_CERT_SEQUENCE	equ <"2.16.840.1.113730.2.5">


NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE equ 0x80
NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE equ 0x40
NETSCAPE_SSL_CA_CERT_TYPE equ 0x04











HCRYPTOIDFUNCSET	typedef PVOID
HCRYPTOIDFUNCADDR	typedef PVOID

CRYPT_OID_ENCODE_OBJECT_FUNC equ <"CryptDllEncodeObject">
CRYPT_OID_DECODE_OBJECT_FUNC equ <"CryptDllDecodeObject">
CRYPT_OID_CREATE_COM_OBJECT_FUNC equ <"CryptDllCreateCOMObject">
CRYPT_OID_VERIFY_REVOCATION_FUNC equ <"CertDllVerifyRevocation">
CRYPT_OID_VERIFY_CTL_USAGE_FUNC equ <"CertDllVerifyCTLUsage">
CRYPT_OID_FORMAT_OBJECT_FUNC equ <"CryptDllFormatObject">
CRYPT_OID_FIND_OID_INFO_FUNC equ <"CryptDllFindOIDInfo">







CRYPT_OID_REGPATH	equ <"Software\\Microsoft\\Cryptography\\OID">
CRYPT_OID_REG_ENCODING_TYPE_PREFIX equ <"EncodingType ">
CRYPT_OID_REG_DLL_VALUE_NAME equ L"Dll"
CRYPT_OID_REG_FUNC_NAME_VALUE_NAME equ L"FuncName">
CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A equ <"FuncName">

CRYPT_DEFAULT_OID	equ <"DEFAULT">

CRYPT_OID_FUNC_ENTRY	STRUC
pszOID			LPCSTR ?
pvFuncAddr		PVOID ?
CRYPT_OID_FUNC_ENTRY	ENDS
PCRYPT_OID_FUNC_ENTRY	typedef ptr CRYPT_OID_FUNC_ENTRY


CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG equ 1

;BOOL
CryptInstallOIDFunctionAddress proto WINAPI \
	       hModule: HMODULE, ; hModule passed to DllMain
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
	    cFuncEntry: DWORD,
	   rgFuncEntry: CRYPT_OID_FUNC_ENTRY,
	       dwFlags: DWORD

;HCRYPTOIDFUNCSET
CryptInitOIDFunctionSet proto WINAPI \
	   pszFuncName: LPCSTR,
	       dwFlags: DWORD

;BOOL
CryptGetOIDFunctionAddress proto WINAPI \
	      hFuncSet: HCRYPTOIDFUNCSET,
	dwEncodingType: DWORD,
		pszOID: LPCSTR,
	       dwFlags: DWORD,
	   ppvFuncAddr: PVOID,
	    phFuncAddr: ptr HCRYPTOIDFUNCADDR


;BOOL
CryptGetDefaultOIDDllList proto WINAPI \
	      hFuncSet: HCRYPTOIDFUNCSET,
	dwEncodingType: DWORD,
	   pwszDllList: LPWSTR,
	   pcchDllList: LPDWORD

;BOOL
CryptGetDefaultOIDFunctionAddress proto WINAPI \
	      hFuncSet: HCRYPTOIDFUNCSET,
	dwEncodingType: DWORD,
	       pwszDll: LPCWSTR,
	       dwFlags: DWORD,
	   ppvFuncAddr: PVOID,
	    phFuncAddr: ptr HCRYPTOIDFUNCADDR

;BOOL
CryptFreeOIDFunctionAddress proto WINAPI \
	     hFuncAddr: HCRYPTOIDFUNCADDR,
	       dwFlags: DWORD

;BOOL
CryptRegisterOIDFunction proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
		pszOID: LPCSTR,
	       pwszDll: LPCWSTR,
   pszOverrideFuncName: LPCSTR

;BOOL
CryptUnregisterOIDFunction proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
		pszOID: LPCSTR


;BOOL
CryptRegisterDefaultOIDFunction proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
	       dwIndex: DWORD,
	       pwszDll: LPCWSTR

CRYPT_REGISTER_FIRST_INDEX equ 0
CRYPT_REGISTER_LAST_INDEX equ 0xFFFFFFFF

;BOOL
CryptUnregisterDefaultOIDFunction proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
	       pwszDll: LPCWSTR

;BOOL
CryptSetOIDFunctionValue proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
		pszOID: LPCSTR,
	 pwszValueName: LPCWSTR,
	   dwValueType: DWORD,
	   pbValueData: LPBYTE,
	   cbValueData: DWORD

;BOOL
CryptGetOIDFunctionValue proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
		pszOID: LPCSTR,
	 pwszValueName: LPCWSTR,
	  pdwValueType: LPDWORD,
	   pbValueData: LPBYTE,
	  pcbValueData: LPDWORD

;BOOL
PFN_CRYPT_ENUM_OID_FUNC_T typedef proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
		pszOID: LPCSTR,
		cValue: DWORD,
	 rgdwValueType: DWORD,
       rgpwszValueName: LPCWSTR,
	 rgpbValueData: LPBYTE,
	 rgcbValueData: DWORD,
		 pvArg: PVOID
PFN_CRYPT_ENUM_OID_FUNC typedef ptr PFN_CRYPT_ENUM_OID_FUNC_T

;BOOL
CryptEnumOIDFunction proto WINAPI \
	dwEncodingType: DWORD,
	   pszFuncName: LPCSTR,
		pszOID: LPCSTR,
	       dwFlags: DWORD,
		 pvArg: PVOID,
	pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC

CRYPT_MATCH_ANY_ENCODING_TYPE equ 0xFFFFFFFF



CRYPT_OID_INFO		STRUC
cbSize			dd ?
pszOID			LPCSTR ?
pwszName		LPCWSTR ?
dwGroupId		dd ?
UNION
 dwValue		dd ?
 Algid			ALG_ID ?
 dwLength		dd ?
ENDS
ExtraInfo		CRYPT_DATA_BLOB <>
CRYPT_OID_INFO		ENDS
PCRYPT_OID_INFO		typedef ptr CRYPT_OID_INFO
PCCRYPT_OID_INFO	typedef ptr CRYPT_OID_INFO
;CCRYPT_OID_INFO

CRYPT_HASH_ALG_OID_GROUP_ID equ 1
CRYPT_ENCRYPT_ALG_OID_GROUP_ID equ 2
CRYPT_PUBKEY_ALG_OID_GROUP_ID equ 3
CRYPT_SIGN_ALG_OID_GROUP_ID equ 4
CRYPT_RDN_ATTR_OID_GROUP_ID equ 5
CRYPT_EXT_OR_ATTR_OID_GROUP_ID equ 6
CRYPT_ENHKEY_USAGE_OID_GROUP_ID equ 7
CRYPT_POLICY_OID_GROUP_ID equ 8
CRYPT_LAST_OID_GROUP_ID equ 8

CRYPT_FIRST_ALG_OID_GROUP_ID equ CRYPT_HASH_AG_OID_GROUP_ID
CRYPT_LAST_ALG_OID_GROUP_ID equ CRYPT_SIGN_AG_OID_GROUP_ID




CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG equ 0x1
CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG equ 0x2



;PCCRYPT_OID_INFO
CryptFindOIDInfo proto WINAPI \
	     dwKeyType: DWORD,
		 pvKey: PVOID,
	     dwGroupId: DWORD

CRYPT_OID_INFO_OID_KEY	equ 1
CRYPT_OID_INFO_NAME_KEY equ 2
CRYPT_OID_INFO_ALGID_KEY equ 3
CRYPT_OID_INFO_SIGN_KEY equ 4

;BOOL
CryptRegisterOIDInfo proto WINAPI \
		 pInfo: PCCRYPT_OID_INFO,
	       dwFlags: DWORD

CRYPT_INSTALL_OID_INFO_BEFORE_FLAG equ 1

;BOOL
CryptUnregisterOIDInfo proto WINAPI \
		 pInfo: PCCRYPT_OID_INFO



HCRYPTMSG		typedef PVOID

szOID_PKCS_7_DATA	equ <"1.2.840.113549.1.7.1">
szOID_PKCS_7_SIGNED	equ <"1.2.840.113549.1.7.2">
szOID_PKCS_7_ENVELOPED	equ <"1.2.840.113549.1.7.3">
szOID_PKCS_7_SIGNEDANDENVELOPED equ <"1.2.840.113549.1.7.4">
szOID_PKCS_7_DIGESTED	equ <"1.2.840.113549.1.7.5">
szOID_PKCS_7_ENCRYPTED	equ <"1.2.840.113549.1.7.6">

szOID_PKCS_9_CONTENT_TYPE equ <"1.2.840.113549.1.9.3">
szOID_PKCS_9_MESSAGE_DIGEST equ <"1.2.840.113549.1.9.4">

CMSG_DATA		equ 1
CMSG_SIGNED		equ 2
CMSG_ENVELOPED		equ 3
CMSG_SIGNED_AND_ENVELOPED equ 4
CMSG_HASHED		equ 5
CMSG_ENCRYPTED		equ 6

CMSG_ALL_FLAGS		equ ( NOT 0UL)
CMSG_DATA_FLAG		equ (1 SHL CMSG_DATA)
CMSG_SIGNED_FLAG	equ (1 SHL CMSG_SIGNED)
CMSG_ENVELOPED_FLAG	equ (1 SHL CMSG_ENVEOPED)
CMSG_SIGNED_AND_ENVELOPED_FLAG equ (1 SHL CMSG_SIGNED_AND_ENVEOPED)
CMSG_HASHED_FLAG	equ (1 SHL CMSG_HASHED)
CMSG_ENCRYPTED_FLAG	equ (1 SHL CMSG_ENCRYPTED)



CMSG_SIGNER_ENCODE_INFO	 STRUC
cbSize			dd ?
pCertInfo		PCERT_INFO ?
hCryptProv		HCRYPTPROV ?
dwKeySpec		dd ?
HashAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
pvHashAuxInfo		PVOID ?
cAuthAttr		dd ?
rgAuthAttr		PCRYPT_ATTRIBUTE ?
cUnauthAttr		dd ?
rgUnauthAttr		PCRYPT_ATTRIBUTE ?
CMSG_SIGNER_ENCODE_INFO ENDS
PCMSG_SIGNER_ENCODE_INFO typedef ptr CMSG_SIGNER_ENCODE_INFO

CMSG_SIGNED_ENCODE_INFO	 STRUC
cbSize			dd ?
cSigners		dd ?
rgSigners		PCMSG_SIGNER_ENCODE_INFO ?
cCertEncoded		dd ?
rgCertEncoded		PCERT_BLOB ?
cCrlEncoded		dd ?
rgCrlEncoded		PCRL_BLOB ?
CMSG_SIGNED_ENCODE_INFO ENDS
PCMSG_SIGNED_ENCODE_INFO typedef ptr CMSG_SIGNED_ENCODE_INFO

CMSG_ENVELOPED_ENCODE_INFO  STRUC
cbSize			dd ?
hCryptProv		HCRYPTPROV ?
ContentEncryptionAlgorithm CRYPT_ALGORITHM_IDENTIFIER <>
pvEncryptionAuxInfo	PVOID ?
cRecipients		dd ?
rgpRecipients		PCERT_INFO ?
CMSG_ENVELOPED_ENCODE_INFO ENDS
PCMSG_ENVELOPED_ENCODE_INFO typedef ptr CMSG_ENVELOPED_ENCODE_INFO

CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO  STRUC
cbSize			dd ?
SignedInfo		CMSG_SIGNED_ENCODE_INFO <>
EnvelopedInfo		CMSG_ENVELOPED_ENCODE_INFO <>
CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO ENDS
PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO typedef ptr CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO

CMSG_HASHED_ENCODE_INFO	 STRUC
cbSize			dd ?
hCryptProv		HCRYPTPROV ?
HashAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
pvHashAuxInfo		PVOID ?
CMSG_HASHED_ENCODE_INFO ENDS
PCMSG_HASHED_ENCODE_INFO typedef ptr CMSG_HASHED_ENCODE_INFO

CMSG_ENCRYPTED_ENCODE_INFO  STRUC
cbSize			dd ?
ContentEncryptionAlgorithm CRYPT_ALGORITHM_IDENTIFIER <>
pvEncryptionAuxInfo	PVOID ?
CMSG_ENCRYPTED_ENCODE_INFO ENDS
PCMSG_ENCRYPTED_ENCODE_INFO typedef ptr CMSG_ENCRYPTED_ENCODE_INFO

;BOOL
PFN_CMSG_STREAM_OUTPUT_T typedef proto WINAPI \
		 pvArg: PVOID,
		pbData: LPBYTE,
		cbData: DWORD,
		fFinal: BOOL
PFN_CMSG_STREAM_OUTPUT typedef ptr PFN_CMSG_STREAM_OUTPUT_T

CMSG_INDEFINITE_LENGTH	equ (0xFFFFFFFF)

CMSG_STREAM_INFO	STRUC
cbContent		dd ?
pfnStreamOutput		PFN_CMSG_STREAM_OUTPUT ?
pvArg			PVOID ?
CMSG_STREAM_INFO	ENDS
PCMSG_STREAM_INFO	typedef ptr CMSG_STREAM_INFO

CMSG_BARE_CONTENT_FLAG	equ 0x00000001
CMSG_LENGTH_ONLY_FLAG	equ 0x00000002
CMSG_DETACHED_FLAG	equ 0x00000004
CMSG_AUTHENTICATED_ATTRIBUTES_FLAG equ 0x00000008
CMSG_CONTENTS_OCTETS_FLAG equ 0x00000010
CMSG_MAX_LENGTH_FLAG	equ 0x00000020

;HCRYPTMSG
CryptMsgOpenToEncode proto WINAPI \
     dwMsgEncodingType: DWORD,
	       dwFlags: DWORD,
	     dwMsgType: DWORD,
       pvMsgEncodeInfo: PVOID,
  pszInnerContentObjID: LPSTR,
	   pStreamInfo: PCMSG_STREAM_INFO

;DWORD
CryptMsgCalculateEncodedLength proto WINAPI \
     dwMsgEncodingType: DWORD,
	       dwFlags: DWORD,
	     dwMsgType: DWORD,
       pvMsgEncodeInfo: PVOID,
  pszInnerContentObjID: LPSTR,
		cbData: DWORD

;HCRYPTMSG
CryptMsgOpenToDecode proto WINAPI \
     dwMsgEncodingType: DWORD,
	       dwFlags: DWORD,
	     dwMsgType: DWORD,
	    hCryptProv: HCRYPTPROV,
	pRecipientInfo: PCERT_INFO,
	   pStreamInfo: PCMSG_STREAM_INFO

;BOOL
CryptMsgClose proto WINAPI \
	     hCryptMsg: HCRYPTMSG

;BOOL
CryptMsgUpdate proto WINAPI \
	     hCryptMsg: HCRYPTMSG,
		pbData: LPBYTE,
		cbData: DWORD,
		fFinal: BOOL

;BOOL
CryptMsgControl proto WINAPI \
	     hCryptMsg: HCRYPTMSG,
	       dwFlags: DWORD,
	    dwCtrlType: DWORD,
	    pvCtrlPara: PVOID

CMSG_CTRL_VERIFY_SIGNATURE equ 1
CMSG_CTRL_DECRYPT	equ 2
CMSG_CTRL_VERIFY_HASH	equ 5
CMSG_CTRL_ADD_SIGNER	equ 6
CMSG_CTRL_DEL_SIGNER	equ 7
CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR equ 8
CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR equ 9
CMSG_CTRL_ADD_CERT	equ 10
CMSG_CTRL_DEL_CERT	equ 11
CMSG_CTRL_ADD_CRL	equ 12
CMSG_CTRL_DEL_CRL	equ 13


CMSG_CTRL_DECRYPT_PARA	STRUC
cbSize			dd ?
hCryptProv		HCRYPTPROV ?
dwKeySpec		dd ?
dwRecipientIndex	dd ?
CMSG_CTRL_DECRYPT_PARA	ENDS
PCMSG_CTRL_DECRYPT_PARA typedef ptr CMSG_CTRL_DECRYPT_PARA






CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA  STRUC
cbSize			dd ?
dwSignerIndex		dd ?
blob			CRYPT_DATA_BLOB <>
CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA ENDS
PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA typedef ptr CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA


CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA  STRUC
cbSize			dd ?
dwSignerIndex		dd ?
dwUnauthAttrIndex	dd ?
CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA ENDS
PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA typedef ptr CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA






;BOOL
CryptMsgVerifyCountersignatureEncoded proto WINAPI \
	    hCryptProv: HCRYPTPROV,
	dwEncodingType: DWORD,
	  pbSignerInfo: PBYTE,
	  cbSignerInfo: DWORD,
pbSignerInfoCountersignature: PBYTE,
cbSignerInfoCountersignature: DWORD,
      pciCountersigner: PCERT_INFO

;BOOL
CryptMsgCountersign proto WINAPI \
	     hCryptMsg: HCRYPTMSG,
	       dwIndex: DWORD,
       cCountersigners: DWORD,
      rgCountersigners: PCMSG_SIGNER_ENCODE_INFO

;BOOL
CryptMsgCountersignEncoded proto WINAPI \
	dwEncodingType: DWORD,
	  pbSignerInfo: PBYTE,
	  cbSignerInfo: DWORD,
       cCountersigners: DWORD,
      rgCountersigners: PCMSG_SIGNER_ENCODE_INFO,
    pbCountersignature: PBYTE,
   pcbCountersignature: PDWORD


;BOOL
CryptMsgGetParam proto WINAPI \
	     hCryptMsg: HCRYPTMSG,
	   dwParamType: DWORD,
	       dwIndex: DWORD,
		pvData: PVOID,
	       pcbData: LPDWORD

CMSG_TYPE_PARAM		equ 1
CMSG_CONTENT_PARAM	equ 2
CMSG_BARE_CONTENT_PARAM equ 3
CMSG_INNER_CONTENT_TYPE_PARAM equ 4
CMSG_SIGNER_COUNT_PARAM equ 5
CMSG_SIGNER_INFO_PARAM	equ 6
CMSG_SIGNER_CERT_INFO_PARAM equ 7
CMSG_SIGNER_HASH_ALGORITHM_PARAM equ 8
CMSG_SIGNER_AUTH_ATTR_PARAM equ 9
CMSG_SIGNER_UNAUTH_ATTR_PARAM equ 10
CMSG_CERT_COUNT_PARAM	equ 11
CMSG_CERT_PARAM		equ 12
CMSG_CRL_COUNT_PARAM	equ 13
CMSG_CRL_PARAM		equ 14
CMSG_ENVELOPE_ALGORITHM_PARAM equ 15
CMSG_RECIPIENT_COUNT_PARAM equ 17
CMSG_RECIPIENT_INDEX_PARAM equ 18
CMSG_RECIPIENT_INFO_PARAM equ 19
CMSG_HASH_ALGORITHM_PARAM equ 20
CMSG_HASH_DATA_PARAM	equ 21
CMSG_COMPUTED_HASH_PARAM equ 22
CMSG_ENCRYPT_PARAM	equ 26
CMSG_ENCRYPTED_DIGEST	equ 27
CMSG_ENCODED_SIGNER	equ 28
CMSG_ENCODED_MESSAGE	equ 29







CMSG_SIGNER_INFO	STRUC
dwVersion		dd ?
Issuer			CERT_NAME_BLOB <>
SerialNumber		CRYPT_INTEGER_BLOB <>
HashAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
HashEncryptionAlgorithm CRYPT_ALGORITHM_IDENTIFIER <>
EncryptedHash		CRYPT_DATA_BLOB <>
AuthAttrs		CRYPT_ATTRIBUTES <>
UnauthAttrs		CRYPT_ATTRIBUTES <>
CMSG_SIGNER_INFO	ENDS
PCMSG_SIGNER_INFO	typedef ptr CMSG_SIGNER_INFO


CMSG_ATTR		typedef CRYPT_ATTRIBUTES
PCMSG_ATTR		typedef ptr CRYPT_ATTRIBUTES

















CMSG_OID_GEN_ENCRYPT_KEY_FUNC equ <"CryptMsgDllGenEncryptKey">
;typedef BOOL (WINAPI *PFN_CMSG_GEN_ENCRYPT_KEY) ( HCRYPTPROV		   *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER	paiEncrypt, PVOID			pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, HCRYPTKEY		       *phEncryptKey

CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC equ <"CryptMsgDllExportEncryptKey">
;typedef BOOL (WINAPI *PFN_CMSG_EXPORT_ENCRYPT_KEY) ( HCRYPTPROV			hCryptProv, HCRYPTKEY			hEncryptKey, PCERT_PUBLIC_KEY_INFO	pPublicKeyInfo, PBYTE		       pbData, PDWORD		   pcbData

CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC equ <"CryptMsgDllImportEncryptKey">
;typedef BOOL (WINAPI *PFN_CMSG_IMPORT_ENCRYPT_KEY) ( HCRYPTPROV			hCryptProv, DWORD			dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER	paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE			pbEncodedKey, DWORD			cbEncodedKey, HCRYPTKEY		       *phEncryptKey





HCERTSTORE		typedef PVOID

CERT_CONTEXT		STRUC
dwCertEncodingType	dd ?
pbCertEncoded		LPSTR ?
cbCertEncoded		dd ?
pCertInfo		PCERT_INFO ?
hCertStore		HCERTSTORE ?
CERT_CONTEXT		ENDS
PCERT_CONTEXT		typedef ptr CERT_CONTEXT
PCCERT_CONTEXT		typedef ptr CERT_CONTEXT

CRL_CONTEXT		STRUC
dwCertEncodingType	dd ?
pbCrlEncoded		LPSTR ?
cbCrlEncoded		dd ?
pCrlInfo		PCRL_INFO ?
hCertStore		HCERTSTORE ?
CRL_CONTEXT		ENDS
PCRL_CONTEXT		typedef ptr CRL_CONTEXT
PCCRL_CONTEXT		typedef ptr CRL_CONTEXT

CTL_CONTEXT		STRUC
dwMsgAndCertEncodingType dd ?
pbCtlEncoded		LPSTR ?
cbCtlEncoded		dd ?
pCtlInfo		PCTL_INFO ?
hCertStore		HCERTSTORE ?
hCryptMsg		HCRYPTMSG ?
pbCtlContent		LPSTR ?
cbCtlContent		dd ?
CTL_CONTEXT		ENDS
PCTL_CONTEXT		typedef ptr CTL_CONTEXT
PCCTL_CONTEXT		typedef ptr CTL_CONTEXT

CERT_KEY_PROV_HANDLE_PROP_ID	equ 1
CERT_KEY_PROV_INFO_PROP_ID	equ 2
CERT_SHA1_HASH_PROP_ID		equ 3
CERT_MD5_HASH_PROP_ID		equ 4
CERT_HASH_PROP_ID		equ CERT_SHA1_HASH_PROP_ID
CERT_KEY_CONTEXT_PROP_ID	equ 5
CERT_KEY_SPEC_PROP_ID		equ 6
CERT_IE30_RESERVED_PROP_ID	equ 7
CERT_PUBKEY_HASH_RESERVED_PROP_ID equ 8
CERT_ENHKEY_USAGE_PROP_ID	equ 9
CERT_CTL_USAGE_PROP_ID		equ CERT_ENHKEY_USAGE_PROP_ID
CERT_NEXT_UPDATE_LOCATION_PROP_ID equ 10
CERT_FRIENDLY_NAME_PROP_ID	equ 11
CERT_PVK_FILE_PROP_ID		equ 12
CERT_FIRST_RESERVED_PROP_ID	equ 13

CERT_LAST_RESERVED_PROP_ID	equ 0x00007FFF
CERT_FIRST_USER_PROP_ID		equ 0x00008000
CERT_LAST_USER_PROP_ID		equ 0x0000FFFF


IS_CERT_HASH_PROP_ID macro X
	exitm<(CERT_SHA1_HASH_PROP_ID EQ (X) OR CERT_MD5_HASH_PROP_ID EQ (X))>
	endm


CRYPT_KEY_PROV_PARAM	STRUC
dwParam			dd ?
pbData			LPSTR ?
cbData			dd ?
dwFlags			dd ?
CRYPT_KEY_PROV_PARAM	ENDS
PCRYPT_KEY_PROV_PARAM	typedef ptr CRYPT_KEY_PROV_PARAM

CRYPT_KEY_PROV_INFO	STRUC
pwszContainerName	LPWSTR ?
pwszProvName		LPWSTR ?
dwProvType		dd ?
dwFlags			dd ?
cProvParam		dd ?
rgProvParam		PCRYPT_KEY_PROV_PARAM ?
dwKeySpec		dd ?
CRYPT_KEY_PROV_INFO	ENDS
PCRYPT_KEY_PROV_INFO	typedef ptr CRYPT_KEY_PROV_INFO

CERT_SET_KEY_PROV_HANDLE_PROP_ID equ 0x00000001
CERT_SET_KEY_CONTEXT_PROP_ID equ 0x00000001

CERT_KEY_CONTEXT	STRUC
cbSize			dd ?	
hCryptProv		HCRYPTPROV ?
dwKeySpec		dd ?
CERT_KEY_CONTEXT	ENDS
PCERT_KEY_CONTEXT	typedef ptr CERT_KEY_CONTEXT

CERT_STORE_PROV_MSG	equ 1
CERT_STORE_PROV_MEMORY	equ 2
CERT_STORE_PROV_FILE	equ 3
CERT_STORE_PROV_REG	equ 4

CERT_STORE_PROV_PKCS7		equ 5
CERT_STORE_PROV_SERIALIZED	equ 6
CERT_STORE_PROV_FILENAME_A	equ 7
CERT_STORE_PROV_FILENAME_W	equ 8
CERT_STORE_PROV_FILENAME	equ CERT_STORE_PROV_FILENAME_W
CERT_STORE_PROV_SYSTEM_A	equ 9
CERT_STORE_PROV_SYSTEM_W	equ 10
CERT_STORE_PROV_SYSTEM		equ CERT_STORE_PROV_SYSTEM_W

sz_CERT_STORE_PROV_MEMORY	equ <"Memory">
sz_CERT_STORE_PROV_FILENAME_W	equ <"File">
sz_CERT_STORE_PROV_FILENAME	equ sz_CERT_STORE_PROV_FILENAME_W
sz_CERT_STORE_PROV_SYSTEM_W	equ <"System">
sz_CERT_STORE_PROV_SYSTEM	equ sz_CERT_STORE_PROV_SYSTEM_W
sz_CERT_STORE_PROV_PKCS7	equ <"PKCS7">
sz_CERT_STORE_PROV_SERIALIZED	equ <"Serialized">

CERT_STORE_SIGNATURE_FLAG equ 0x00000001
CERT_STORE_TIME_VALIDITY_FLAG equ 0x00000002
CERT_STORE_REVOCATION_FLAG equ 0x00000004
CERT_STORE_NO_CRL_FLAG	equ 0x00010000
CERT_STORE_NO_ISSUER_FLAG equ 0x00020000


CERT_STORE_NO_CRYPT_RELEASE_FLAG equ 0x00000001
CERT_STORE_READONLY_FLAG equ 0x00008000


CERT_SYSTEM_STORE_LOCATION_MASK equ 0x00030000
CERT_SYSTEM_STORE_CURRENT_USER equ 0x00010000
CERT_SYSTEM_STORE_LOCAL_MACHINE equ 0x00020000


;HCERTSTORE
CertOpenStore proto WINAPI \
     lpszStoreProvider: LPCSTR,
	dwEncodingType: DWORD,
	    hCryptProv: HCRYPTPROV,
	       dwFlags: DWORD,
		pvPara: PVOID



HCERTSTOREPROV		typedef PVOID

CRYPT_OID_OPEN_STORE_PROV_FUNC equ <"CertDllOpenStoreProv">


CERT_STORE_PROV_INFO	STRUC
cbSize			dd ?
cStoreProvFunc		dd ?
rgpvStoreProvFunc	PVOID ?
hStoreProv		HCERTSTOREPROV ?
dwStoreProvFlags	dd ?
CERT_STORE_PROV_INFO	ENDS
PCERT_STORE_PROV_INFO	typedef ptr CERT_STORE_PROV_INFO

;typedef BOOL (WINAPI *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)( LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags, PVOID pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo

CERT_STORE_PROV_CLOSE_FUNC equ 0
CERT_STORE_PROV_READ_CERT_FUNC equ 1
CERT_STORE_PROV_WRITE_CERT_FUNC equ 2
CERT_STORE_PROV_DELETE_CERT_FUNC equ 3
CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC equ 4
CERT_STORE_PROV_READ_CRL_FUNC equ 5
CERT_STORE_PROV_WRITE_CRL_FUNC equ 6
CERT_STORE_PROV_DELETE_CRL_FUNC equ 7
CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC equ 8
CERT_STORE_PROV_READ_CTL_FUNC equ 9
CERT_STORE_PROV_WRITE_CTL_FUNC equ 10
CERT_STORE_PROV_DELETE_CTL_FUNC equ 11
CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC equ 12

;typedef void (WINAPI *PFN_CERT_STORE_PROV_CLOSE)( HCERTSTOREPROV hStoreProv, DWORD dwFlags

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_READ_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext

CERT_STORE_PROV_WRITE_ADD_FLAG equ 0x1

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_WRITE_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_DELETE_CERT)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, PVOID pvData

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_READ_CRL)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_WRITE_CRL)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_DELETE_CRL)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)( HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, PVOID pvData

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_READ_CTL)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_WRITE_CTL)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags

;typedef BOOL (WINAPI *PFN_CERT_STORE_PROV_DELETE_CTL)( HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags

;BOOL
PFN_CERT_STORE_PROV_SET_CTL_PROPERTY_T typedef proto WINAPI \
	  hStoreProv: HCERTSTOREPROV,
	 pCtlContext: PCCTL_CONTEXT,
	    dwPropId: DWORD,
	     dwFlags: DWORD,
	      pvData: PVOID
PFN_CERT_STORE_PROV_SET_CTL_PROPERTY typedef ptr PFN_CERT_STORE_PROV_SET_CTL_PROPERTY_T

;HCERTSTORE
CertDuplicateStore proto WINAPI \
	    hCertStore: HCERTSTORE

CERT_STORE_SAVE_AS_STORE	equ 1
CERT_STORE_SAVE_AS_PKCS7	equ 2

CERT_STORE_SAVE_TO_FILE		equ 1
CERT_STORE_SAVE_TO_MEMORY	equ 2
CERT_STORE_SAVE_TO_FILENAME_A	equ 3
CERT_STORE_SAVE_TO_FILENAME_W	equ 4
CERT_STORE_SAVE_TO_FILENAME	equ CERT_STORE_SAVE_TO_FILENAME_W

;BOOL
CertSaveStore proto WINAPI \
	    hCertStore: HCERTSTORE,
	dwEncodingType: DWORD,
	      dwSaveAs: DWORD,
	      dwSaveTo: DWORD,
	  pvSaveToPara: PVOID,
	       dwFlags: DWORD

CERT_CLOSE_STORE_FORCE_FLAG equ 0x00000001
CERT_CLOSE_STORE_CHECK_FLAG equ 0x00000002

;BOOL
CertCloseStore proto WINAPI \
	    hCertStore: HCERTSTORE,
	       dwFlags: DWORD

;PCCERT_CONTEXT
CertGetSubjectCertificateFromStore proto WINAPI \
	    hCertStore: HCERTSTORE,
    dwCertEncodingType: DWORD,
	       pCertId: PCERT_INFO

;PCCERT_CONTEXT
CertEnumCertificatesInStore proto WINAPI \
	    hCertStore: HCERTSTORE,
      pPrevCertContext: PCCERT_CONTEXT

;PCCERT_CONTEXT
CertFindCertificateInStore proto WINAPI \
	    hCertStore: HCERTSTORE,
    dwCertEncodingType: DWORD,
	   dwFindFlags: DWORD,
	    dwFindType: DWORD,
	    pvFindPara: PVOID,
      pPrevCertContext: PCCERT_CONTEXT


CERT_COMPARE_MASK	equ 0xFFFF
CERT_COMPARE_SHIFT	equ 16
CERT_COMPARE_ANY	equ 0
CERT_COMPARE_SHA1_HASH	equ 1
CERT_COMPARE_NAME	equ 2
CERT_COMPARE_ATTR	equ 3
CERT_COMPARE_MD5_HASH	equ 4
CERT_COMPARE_PROPERTY	equ 5
CERT_COMPARE_PUBLIC_KEY equ 6
CERT_COMPARE_HASH	equ CERT_COMPARE_SHA1_HASH
CERT_COMPARE_NAME_STR_A equ 7
CERT_COMPARE_NAME_STR_W equ 8
CERT_COMPARE_KEY_SPEC	equ 9
CERT_COMPARE_ENHKEY_USAGE equ 10
CERT_COMPARE_CTL_USAGE	equ CERT_COMPARE_ENHKEY_USAGE

CERT_FIND_ANY		equ (CERT_COMPARE_ANY SHL CERT_COMPARE_SHIFT)
CERT_FIND_SHA1_HASH	equ (CERT_COMPARE_SHA1_HASH SHL CERT_COMPARE_SHIFT)
CERT_FIND_MD5_HASH	equ (CERT_COMPARE_MD5_HASH SHL CERT_COMPARE_SHIFT)
CERT_FIND_HASH		equ CERT_FIND_SHA1_HASH
CERT_FIND_PROPERTY	equ (CERT_COMPARE_PROPERTY SHL CERT_COMPARE_SHIFT)
CERT_FIND_PUBLIC_KEY	equ (CERT_COMPARE_PUBLIC_KEY SHL CERT_COMPARE_SHIFT)
CERT_FIND_SUBJECT_NAME	equ (CERT_COMPARE_NAME SHL CERT_COMPARE_SHIFT OR CERT_INFO_SUBJECT_FAG)
CERT_FIND_SUBJECT_ATTR	equ (CERT_COMPARE_ATTR SHL CERT_COMPARE_SHIFT OR CERT_INFO_SUBJECT_FAG)
CERT_FIND_ISSUER_NAME	equ (CERT_COMPARE_NAME SHL CERT_COMPARE_SHIFT OR CERT_INFO_ISSUER_FAG)
CERT_FIND_ISSUER_ATTR	equ (CERT_COMPARE_ATTR SHL CERT_COMPARE_SHIFT OR CERT_INFO_ISSUER_FAG)
CERT_FIND_SUBJECT_STR_A equ (CERT_COMPARE_NAME_STR_A SHL CERT_COMPARE_SHIFT OR CERT_INFO_SUBJECT_FAG)
CERT_FIND_SUBJECT_STR_W equ (CERT_COMPARE_NAME_STR_W SHL CERT_COMPARE_SHIFT OR CERT_INFO_SUBJECT_FAG)
CERT_FIND_SUBJECT_STR	equ CERT_FIND_SUBJECT_STR_W
CERT_FIND_ISSUER_STR_A	equ (CERT_COMPARE_NAME_STR_A SHL CERT_COMPARE_SHIFT OR CERT_INFO_ISSUER_FAG)
CERT_FIND_ISSUER_STR_W	equ (CERT_COMPARE_NAME_STR_W SHL CERT_COMPARE_SHIFT OR CERT_INFO_ISSUER_FAG)
CERT_FIND_ISSUER_STR	equ CERT_FIND_ISSUER_STR_W
CERT_FIND_KEY_SPEC	equ (CERT_COMPARE_KEY_SPEC SHL CERT_COMPARE_SHIFT)
CERT_FIND_ENHKEY_USAGE	equ (CERT_COMPARE_ENHKEY_USAGE SHL CERT_COMPARE_SHIFT)
CERT_FIND_CTL_USAGE	equ CERT_FIND_ENHKEY_USAGE












CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG	equ 0x1
CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG	equ 0x2
CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG	equ 0x4
CERT_FIND_NO_ENHKEY_USAGE_FLAG		equ 0x8

CERT_FIND_OPTIONAL_CTL_USAGE_FLAG	equ CERT_FIND_OPTIONAL_ENHKEY_USAGE_FAG
CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG	equ CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FAG
CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG	equ CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FAG
CERT_FIND_NO_CTL_USAGE_FLAG		equ CERT_FIND_NO_ENHKEY_USAGE_FAG

;PCCERT_CONTEXT
CertGetIssuerCertificateFromStore proto WINAPI \
	    hCertStore: HCERTSTORE,
       pSubjectContext: PCCERT_CONTEXT,
    pPrevIssuerContext: PCCERT_CONTEXT,
	      pdwFlags: LPDWORD

;BOOL
CertVerifySubjectCertificateContext proto WINAPI \
	      pSubject: PCCERT_CONTEXT,
	       pIssuer: PCCERT_CONTEXT,
	      pdwFlags: LPDWORD

;PCCERT_CONTEXT
CertDuplicateCertificateContext proto WINAPI \
	  pCertContext: PCCERT_CONTEXT

;PCCERT_CONTEXT
CertCreateCertificateContext proto WINAPI \
    dwCertEncodingType: DWORD,
	 pbCertEncoded: LPBYTE,
	 cbCertEncoded: DWORD

;BOOL
CertFreeCertificateContext proto WINAPI \
	  pCertContext: PCCERT_CONTEXT

;BOOL
CertSetCertificateContextProperty proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
	      dwPropId: DWORD,
	       dwFlags: DWORD,
		pvData: PVOID

;BOOL
CertGetCertificateContextProperty proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
	      dwPropId: DWORD,
		pvData: PVOID,
	       pcbData: LPDWORD

;DWORD
CertEnumCertificateContextProperties proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
	      dwPropId: DWORD

;PCCRL_CONTEXT
CertGetCRLFromStore proto WINAPI \
	    hCertStore: HCERTSTORE,
	pIssuerContext: PCCERT_CONTEXT,
       pPrevCrlContext: PCCRL_CONTEXT,
	      pdwFlags: LPDWORD


;PCCRL_CONTEXT
CertDuplicateCRLContext proto WINAPI \
	   pCrlContext: PCCRL_CONTEXT

;PCCRL_CONTEXT
CertCreateCRLContext proto WINAPI \
    dwCertEncodingType: DWORD,
	  pbCrlEncoded: LPBYTE,
	  cbCrlEncoded: DWORD

;BOOL
CertFreeCRLContext proto WINAPI \
	   pCrlContext: PCCRL_CONTEXT

;BOOL
CertSetCRLContextProperty proto WINAPI \
	   pCrlContext: PCCRL_CONTEXT,
	      dwPropId: DWORD,
	       dwFlags: DWORD,
		pvData: PVOID

;BOOL
CertGetCRLContextProperty proto WINAPI \
	   pCrlContext: PCCRL_CONTEXT,
	      dwPropId: DWORD,
		pvData: PVOID,
	       pcbData: LPDWORD

;DWORD
CertEnumCRLContextProperties proto WINAPI \
	   pCrlContext: PCCRL_CONTEXT,
	      dwPropId: DWORD

CERT_STORE_ADD_NEW		equ 1
CERT_STORE_ADD_USE_EXISTING	equ 2
CERT_STORE_ADD_REPLACE_EXISTING equ 3
CERT_STORE_ADD_ALWAYS		equ 4

;BOOL
CertAddEncodedCertificateToStore proto WINAPI \
	    hCertStore: HCERTSTORE,
    dwCertEncodingType: DWORD,
	 pbCertEncoded: LPBYTE,
	 cbCertEncoded: DWORD,
      dwAddDisposition: DWORD,
	 ppCertContext: ptr PCCERT_CONTEXT

;BOOL
CertAddCertificateContextToStore proto WINAPI \
	    hCertStore: HCERTSTORE,
	  pCertContext: PCCERT_CONTEXT,
      dwAddDisposition: DWORD,
	ppStoreContext: ptr PCCERT_CONTEXT


CERT_STORE_CERTIFICATE_CONTEXT equ 1
CERT_STORE_CRL_CONTEXT	equ 2
CERT_STORE_CTL_CONTEXT	equ 3

CERT_STORE_ALL_CONTEXT_FLAG equ ( NOT 0UL)
CERT_STORE_CERTIFICATE_CONTEXT_FLAG equ (1 SHL CERT_STORE_CERTIFICATE_CONTEXT)
CERT_STORE_CRL_CONTEXT_FLAG equ (1 SHL CERT_STORE_CRL_CONTEXT)
CERT_STORE_CTL_CONTEXT_FLAG equ (1 SHL CERT_STORE_CTL_CONTEXT)

;BOOL
CertAddSerializedElementToStore proto WINAPI \
	    hCertStore: HCERTSTORE,
	     pbElement: LPBYTE,
	     cbElement: DWORD,
      dwAddDisposition: DWORD,
	       dwFlags: DWORD,
    dwContextTypeFlags: DWORD,
	pdwContextType: LPDWORD,
	    ppvContext: PVOID

;BOOL
CertDeleteCertificateFromStore proto WINAPI \
	  pCertContext: PCCERT_CONTEXT

;BOOL
CertAddEncodedCRLToStore proto WINAPI \
	    hCertStore: HCERTSTORE,
    dwCertEncodingType: DWORD,
	  pbCrlEncoded: LPBYTE,
	  cbCrlEncoded: DWORD,
      dwAddDisposition: DWORD,
	  ppCrlContext: PCCRL_CONTEXT

;BOOL
CertAddCRLContextToStore proto WINAPI \
	    hCertStore: HCERTSTORE,
	   pCrlContext: PCCRL_CONTEXT,
      dwAddDisposition: DWORD,
	ppStoreContext: PCCRL_CONTEXT

;BOOL
CertDeleteCRLFromStore proto WINAPI \
	   pCrlContext: PCCRL_CONTEXT

;BOOL
CertSerializeCertificateStoreElement proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
	       dwFlags: DWORD,
	     pbElement: LPBYTE,
	    pcbElement: LPDWORD


;BOOL
CertSerializeCRLStoreElement proto WINAPI \
	   pCrlContext: PCCRL_CONTEXT,
	       dwFlags: DWORD,
	     pbElement: LPBYTE,
	    pcbElement: LPDWORD



;PCCTL_CONTEXT
CertDuplicateCTLContext proto WINAPI \
	   pCtlContext: PCCTL_CONTEXT

;PCCTL_CONTEXT
CertCreateCTLContext proto WINAPI \
dwMsgAndCertEncodingType: DWORD,
	  pbCtlEncoded: LPBYTE,
	  cbCtlEncoded: DWORD

;BOOL
CertFreeCTLContext proto WINAPI \
	   pCtlContext: PCCTL_CONTEXT

;BOOL
CertSetCTLContextProperty proto WINAPI \
	   pCtlContext: PCCTL_CONTEXT,
	      dwPropId: DWORD,
	       dwFlags: DWORD,
		pvData: PVOID

;BOOL
CertGetCTLContextProperty proto WINAPI \
	   pCtlContext: PCCTL_CONTEXT,
	      dwPropId: DWORD,
		pvData: PVOID,
	       pcbData: LPDWORD

;DWORD
CertEnumCTLContextProperties proto WINAPI \
	   pCtlContext: PCCTL_CONTEXT,
	      dwPropId: DWORD

;PCCTL_CONTEXT
CertEnumCTLsInStore proto WINAPI \
	    hCertStore: HCERTSTORE,
       pPrevCtlContext: PCCTL_CONTEXT

;PCTL_ENTRY
CertFindSubjectInCTL proto WINAPI \
	dwEncodingType: DWORD,
	 dwSubjectType: DWORD,
	     pvSubject: PVOID,
	   pCtlContext: PCCTL_CONTEXT,
	       dwFlags: DWORD

CTL_ANY_SUBJECT_TYPE	equ 1
CTL_CERT_SUBJECT_TYPE	equ 2

CTL_ANY_SUBJECT_INFO	STRUC
SubjectAlgorithm	CRYPT_ALGORITHM_IDENTIFIER <>
SubjectIdentifier	CRYPT_DATA_BLOB <>
CTL_ANY_SUBJECT_INFO	ENDS
PCTL_ANY_SUBJECT_INFO	typedef ptr CTL_ANY_SUBJECT_INFO

;PCCTL_CONTEXT
CertFindCTLInStore proto WINAPI \
	    hCertStore: HCERTSTORE,
dwMsgAndCertEncodingType: DWORD,
	   dwFindFlags: DWORD,
	    dwFindType: DWORD,
	    pvFindPara: PVOID,
       pPrevCtlContext: PCCTL_CONTEXT

CTL_FIND_ANY		equ 0
CTL_FIND_SHA1_HASH	equ 1
CTL_FIND_MD5_HASH	equ 2
CTL_FIND_USAGE		equ 3
CTL_FIND_SUBJECT	equ 4

CTL_FIND_USAGE_PARA	STRUC
cbSize			dd ?
SubjectUsage		CTL_USAGE <>	
ListIdentifier		CRYPT_DATA_BLOB <>	
pSigner			PCERT_INFO ?	
CTL_FIND_USAGE_PARA	ENDS
PCTL_FIND_USAGE_PARA	typedef ptr CTL_FIND_USAGE_PARA

CTL_FIND_NO_LIST_ID_CBDATA	equ 0xFFFFFFFF
CTL_FIND_NO_SIGNER_PTR		equ 0xFFFFFFFF

CTL_FIND_SAME_USAGE_FLAG equ 0x1


CTL_FIND_SUBJECT_PARA	STRUC
cbSize			dd ?
pUsagePara		PCTL_FIND_USAGE_PARA ?	
dwSubjectType		dd ?
pvSubject		PVOID ?
CTL_FIND_SUBJECT_PARA	ENDS
PCTL_FIND_SUBJECT_PARA	typedef ptr CTL_FIND_SUBJECT_PARA






;BOOL
CertAddEncodedCTLToStore proto WINAPI \
	    hCertStore: HCERTSTORE,
dwMsgAndCertEncodingType: DWORD,
	  pbCtlEncoded: LPBYTE,
	  cbCtlEncoded: DWORD,
      dwAddDisposition: DWORD,
	  ppCtlContext: PCCTL_CONTEXT

;BOOL
CertAddCTLContextToStore proto WINAPI \
	    hCertStore: HCERTSTORE,
	   pCtlContext: PCCTL_CONTEXT,
      dwAddDisposition: DWORD,
	ppStoreContext: PCCTL_CONTEXT

;BOOL
CertSerializeCTLStoreElement proto WINAPI \
	   pCtlContext: PCCTL_CONTEXT,
	       dwFlags: DWORD,
	     pbElement: LPBYTE,
	    pcbElement: LPDWORD

;BOOL
CertDeleteCTLFromStore proto WINAPI \
	   pCtlContext: PCCTL_CONTEXT



;BOOL
CertGetEnhancedKeyUsage proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
	       dwFlags: DWORD,
		pUsage: PCERT_ENHKEY_USAGE,
	      pcbUsage: LPDWORD

;BOOL
CertSetEnhancedKeyUsage proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
		pUsage: PCERT_ENHKEY_USAGE

;BOOL
CertAddEnhancedKeyUsageIdentifier proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
    pszUsageIdentifier: LPCSTR


;BOOL
CertRemoveEnhancedKeyUsageIdentifier proto WINAPI \
	  pCertContext: PCCERT_CONTEXT,
    pszUsageIdentifier: LPCSTR



;BOOL
CryptMsgGetAndVerifySigner proto WINAPI \
	     hCryptMsg: HCRYPTMSG,
	  cSignerStore: DWORD,
	rghSignerStore: ptr HCERTSTORE,
	       dwFlags: DWORD,
	      ppSigner: PCCERT_CONTEXT,
	pdwSignerIndex: LPDWORD

CMSG_TRUSTED_SIGNER_FLAG	equ 0x1
CMSG_SIGNER_ONLY_FLAG		equ 0x2
CMSG_USE_SIGNER_INDEX_FLAG	equ 0x4

;BOOL
CryptMsgSignCTL proto WINAPI \
     dwMsgEncodingType: DWORD,
	  pbCtlContent: LPBYTE,
	  cbCtlContent: DWORD,
	     pSignInfo: PCMSG_SIGNED_ENCODE_INFO,
	       dwFlags: DWORD,
	     pbEncoded: LPBYTE,
	    pcbEncoded: LPDWORD

;BOOL
CryptMsgEncodeAndSignCTL proto WINAPI \
     dwMsgEncodingType: DWORD,
	      pCtlInfo: PCTL_INFO,
	     pSignInfo: PCMSG_SIGNED_ENCODE_INFO,
	       dwFlags: DWORD,
	     pbEncoded: LPBYTE,
	    pcbEncoded: LPDWORD



CTL_VERIFY_USAGE_PARA	STRUC
cbSize			dd ?
ListIdentifier		CRYPT_DATA_BLOB <>	
cCtlStore		dd ?
rghCtlStore		PVOID ?;HCERTSTORE ? 
cSignerStore		dd ?
rghSignerStore		PVOID ?;HCERTSTORE ?	
CTL_VERIFY_USAGE_PARA	ENDS
PCTL_VERIFY_USAGE_PARA	typedef ptr CTL_VERIFY_USAGE_PARA

CTL_VERIFY_USAGE_STATUS	 STRUC
cbSize			dd ?
dwError			dd ?
dwFlags			dd ?
ppCtl			PCCTL_CONTEXT ? 
dwCtlEntryIndex		dd ?
ppSigner		PCCERT_CONTEXT ?	
dwSignerIndex		dd ?
CTL_VERIFY_USAGE_STATUS ENDS
PCTL_VERIFY_USAGE_STATUS typedef ptr CTL_VERIFY_USAGE_STATUS

CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG	equ 0x1
CERT_VERIFY_TRUSTED_SIGNERS_FLAG	equ 0x2
CERT_VERIFY_NO_TIME_CHECK_FLAG		equ 0x4
CERT_VERIFY_ALLOW_MORE_USAGE_FLAG	equ 0x8

CERT_VERIFY_UPDATED_CTL_FLAG		equ 0x1

;BOOL
CertVerifyCTLUsage proto WINAPI \
	dwEncodingType: DWORD,
	 dwSubjectType: DWORD,
	     pvSubject: PVOID,
	 pSubjectUsage: PCTL_USAGE,
	       dwFlags: DWORD,
      pVerifyUsagePara: PCTL_VERIFY_USAGE_PARA,
    pVerifyUsageStatus: PCTL_VERIFY_USAGE_STATUS



CERT_REVOCATION_PARA	STRUC
cbSize			dd ?
pIssuerCert		PCCERT_CONTEXT ?
cCertStore		dd ?
rgCertStore		PVOID ?;HCERTSTORE ?
CERT_REVOCATION_PARA	ENDS
PCERT_REVOCATION_PARA	typedef ptr CERT_REVOCATION_PARA


CERT_REVOCATION_STATUS	STRUC
cbSize			dd ?
dwIndex			dd ?
dwError			dd ?
dwReason		dd ?
CERT_REVOCATION_STATUS	ENDS
PCERT_REVOCATION_STATUS typedef ptr CERT_REVOCATION_STATUS


;BOOL
CertVerifyRevocation proto WINAPI \
	dwEncodingType: DWORD,
	     dwRevType: DWORD,
	      cContext: DWORD,
	   rgpvContext: PVOID,
	       dwFlags: DWORD,
	      pRevPara: PCERT_REVOCATION_PARA,
	    pRevStatus: PCERT_REVOCATION_STATUS

CERT_CONTEXT_REVOCATION_TYPE equ 1

CERT_VERIFY_REV_CHAIN_FLAG equ 0x1




;BOOL
CertCompareIntegerBlob proto WINAPI \
		 pInt1: PCRYPT_INTEGER_BLOB,
		 pInt2: PCRYPT_INTEGER_BLOB

;BOOL
CertCompareCertificate proto WINAPI \
    dwCertEncodingType: DWORD,
	      pCertId1: PCERT_INFO,
	      pCertId2: PCERT_INFO

;BOOL
CertCompareCertificateName proto WINAPI \
    dwCertEncodingType: DWORD,
	    pCertName1: PCERT_NAME_BLOB,
	    pCertName2: PCERT_NAME_BLOB

;BOOL
CertIsRDNAttrsInCertificateName proto WINAPI \
    dwCertEncodingType: DWORD,
	       dwFlags: DWORD,
	     pCertName: PCERT_NAME_BLOB,
		  pRDN: PCERT_RDN

CERT_UNICODE_IS_RDN_ATTRS_FLAG equ 0x1

;BOOL
CertComparePublicKeyInfo proto WINAPI \
    dwCertEncodingType: DWORD,
	   pPublicKey1: PCERT_PUBLIC_KEY_INFO,
	   pPublicKey2: PCERT_PUBLIC_KEY_INFO

;DWORD
CertGetPublicKeyLength proto WINAPI \
    dwCertEncodingType: DWORD,
	    pPublicKey: PCERT_PUBLIC_KEY_INFO

;BOOL
CryptVerifyCertificateSignature proto WINAPI \
	    hCryptProv: HCRYPTPROV,
    dwCertEncodingType: DWORD,
	     pbEncoded: LPBYTE,
	     cbEncoded: DWORD,
	    pPublicKey: PCERT_PUBLIC_KEY_INFO

;BOOL
CryptHashToBeSigned proto WINAPI \
	    hCryptProv: HCRYPTPROV,
    dwCertEncodingType: DWORD,
	     pbEncoded: LPBYTE,
	     cbEncoded: DWORD,
	pbComputedHash: LPBYTE,
       pcbComputedHash: LPDWORD

;BOOL
CryptHashCertificate proto WINAPI \
	    hCryptProv: HCRYPTPROV,
		 Algid: ALG_ID,
	       dwFlags: DWORD,
	     pbEncoded: LPBYTE,
	     cbEncoded: DWORD,
	pbComputedHash: LPBYTE,
       pcbComputedHash: LPDWORD

;BOOL
CryptSignCertificate proto WINAPI \
	    hCryptProv: HCRYPTPROV,
	     dwKeySpec: DWORD,
    dwCertEncodingType: DWORD,
   pbEncodedToBeSigned: LPBYTE,
   cbEncodedToBeSigned: DWORD,
   pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER,
	 pvHashAuxInfo: PVOID,
	   pbSignature: LPBYTE,
	  pcbSignature: LPDWORD

;BOOL
CryptSignAndEncodeCertificate proto WINAPI \
	    hCryptProv: HCRYPTPROV,
	     dwKeySpec: DWORD,
    dwCertEncodingType: DWORD,
	lpszStructType: LPCSTR,
	  pvStructInfo: PVOID,	 
   pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER,
	 pvHashAuxInfo: PVOID,
	     pbEncoded: PBYTE,
	    pcbEncoded: LPDWORD


;LONG
CertVerifyTimeValidity proto WINAPI \
	 pTimeToVerify: LPFILETIME,
	     pCertInfo: PCERT_INFO


;LONG
CertVerifyCRLTimeValidity proto WINAPI \
	 pTimeToVerify: LPFILETIME,
	      pCrlInfo: PCRL_INFO

;BOOL
CertVerifyValidityNesting proto WINAPI \
	  pSubjectInfo: PCERT_INFO,
	   pIssuerInfo: PCERT_INFO

;BOOL
CertVerifyCRLRevocation proto WINAPI \
    dwCertEncodingType: DWORD,
	       pCertId: PCERT_INFO,
	      cCrlInfo: DWORD,
	    rgpCrlInfo: PCRL_INFO

;LPCSTR
CertAlgIdToOID proto WINAPI \
	       dwAlgId: DWORD

;DWORD
CertOIDToAlgId proto WINAPI \
	      pszObjId: LPCSTR

;PCERT_EXTENSION
CertFindExtension proto WINAPI \
	      pszObjId: LPCSTR,
	   cExtensions: DWORD,
	  rgExtensions: CERT_EXTENSION

;PCRYPT_ATTRIBUTE
CertFindAttribute proto WINAPI \
	      pszObjId: LPCSTR,
		 cAttr: DWORD,
		rgAttr: CRYPT_ATTRIBUTE

;PCERT_RDN_ATTR
CertFindRDNAttr proto WINAPI \
	      pszObjId: LPCSTR,
		 pName: PCERT_NAME_INFO

;BOOL
CertGetIntendedKeyUsage proto WINAPI \
    dwCertEncodingType: DWORD,
	     pCertInfo: PCERT_INFO,
	    pbKeyUsage: LPBYTE,
	    cbKeyUsage: DWORD


;BOOL
CryptExportPublicKeyInfo proto WINAPI \
	    hCryptProv: HCRYPTPROV,
	     dwKeySpec: DWORD,
    dwCertEncodingType: DWORD,
		 pInfo: PCERT_PUBLIC_KEY_INFO,
	       pcbInfo: LPDWORD


CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC equ <"CryptDllExportPublicKeyInfoEx">

;BOOL
CryptExportPublicKeyInfoEx proto WINAPI \
	    hCryptProv: HCRYPTPROV,
	     dwKeySpec: DWORD,
    dwCertEncodingType: DWORD,
     pszPublicKeyObjId: LPSTR,
	       dwFlags: DWORD,
	     pvAuxInfo: PVOID,
		 pInfo: PCERT_PUBLIC_KEY_INFO,
	       pcbInfo: LPDWORD


;BOOL
CryptImportPublicKeyInfo proto WINAPI \
	    hCryptProv: HCRYPTPROV,
    dwCertEncodingType: DWORD,
		 pInfo: PCERT_PUBLIC_KEY_INFO,
		 phKey: ptr HCRYPTKEY

CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC equ <"CryptDllImportPublicKeyInfoEx">

;BOOL
CryptImportPublicKeyInfoEx proto WINAPI \
	    hCryptProv: HCRYPTPROV,
    dwCertEncodingType: DWORD,
		 pInfo: PCERT_PUBLIC_KEY_INFO,
	      aiKeyAlg: ALG_ID,
	       dwFlags: DWORD,
	     pvAuxInfo: PVOID,
		 phKey: ptr HCRYPTKEY

;BOOL
CryptHashPublicKeyInfo proto WINAPI \
	    hCryptProv: HCRYPTPROV,
		 Algid: ALG_ID,
	       dwFlags: DWORD,
    dwCertEncodingType: DWORD,
		 pInfo: PCERT_PUBLIC_KEY_INFO,
	pbComputedHash: LPBYTE,
       pcbComputedHash: LPDWORD

;DWORD
CertRDNValueToStrA proto WINAPI \
	   dwValueType: DWORD,
		pValue: PCERT_RDN_VALUE_BLOB,
		   psz: LPSTR,
		   csz: DWORD
;DWORD
CertRDNValueToStrW proto WINAPI \
	   dwValueType: DWORD,
		pValue: PCERT_RDN_VALUE_BLOB,
		   psz: LPWSTR,
		   csz: DWORD
ifdef _UNICODE
CertRDNValueToStr	equ <CertRDNValueToStrW>
else
CertRDNValueToStr	equ <CertRDNValueToStrA>
endif 


;DWORD
CertNameToStrA proto WINAPI \
    dwCertEncodingType: DWORD,
		 pName: PCERT_NAME_BLOB,
	     dwStrType: DWORD,
		   psz: LPSTR,
		   csz: DWORD
;DWORD
CertNameToStrW proto WINAPI \
    dwCertEncodingType: DWORD,
		 pName: PCERT_NAME_BLOB,
	     dwStrType: DWORD,
		   psz: LPWSTR,
		   csz: DWORD
ifdef _UNICODE
CertNameToStr		equ <CertNameToStrW>
else
CertNameToStr		equ <CertNameToStrA>
endif 

CERT_SIMPLE_NAME_STR	equ 1
CERT_OID_NAME_STR	equ 2
CERT_X500_NAME_STR	equ 3

CERT_NAME_STR_SEMICOLON_FLAG	equ 0x40000000
CERT_NAME_STR_NO_PLUS_FLAG	equ 0x20000000
CERT_NAME_STR_NO_QUOTING_FLAG	equ 0x10000000
CERT_NAME_STR_CRLF_FLAG		equ 0x08000000
CERT_NAME_STR_COMMA_FLAG	equ 0x04000000



;BOOL
CertStrToNameA proto WINAPI \
    dwCertEncodingType: DWORD,
	       pszX500: LPCSTR,
	     dwStrType: DWORD,
	    pvReserved: PVOID,
	     pbEncoded: LPBYTE,
	    pcbEncoded: LPDWORD,
	     ppszError: LPCSTR
;BOOL
CertStrToNameW proto WINAPI \
    dwCertEncodingType: DWORD,
	       pszX500: LPCWSTR,
	     dwStrType: DWORD,
	    pvReserved: PVOID,
	     pbEncoded: LPBYTE,
	    pcbEncoded: LPDWORD,
	     ppszError: LPCWSTR
ifdef _UNICODE
CertStrToName		equ <CertStrToNameW>
else
CertStrToName		equ <CertStrToNameA>
endif 







;PCCERT_CONTEXT
PFN_CRYPT_GET_SIGNER_CERTIFICATE_T typedef proto WINAPI \
	      pvGetArg: PVOID,
    dwCertEncodingType: DWORD,
	     pSignerId: PCERT_INFO,	
	 hMsgCertStore: HCERTSTORE
PFN_CRYPT_GET_SIGNER_CERTIFICATE typedef ptr PFN_CRYPT_GET_SIGNER_CERTIFICATE_T
CRYPT_SIGN_MESSAGE_PARA	 STRUC
cbSize			dd ?
dwMsgEncodingType	dd ?
pSigningCert		PCCERT_CONTEXT ?
HashAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
pvHashAuxInfo		PVOID ?
cMsgCert		dd ?
rgpMsgCert		PCCERT_CONTEXT ?
cMsgCrl			dd ?
rgpMsgCrl		PCCRL_CONTEXT ?
cAuthAttr		dd ?
rgAuthAttr		PCRYPT_ATTRIBUTE ?
cUnauthAttr		dd ?
rgUnauthAttr		PCRYPT_ATTRIBUTE ?
dwFlags			dd ?
dwInnerContentType	dd ?
CRYPT_SIGN_MESSAGE_PARA ENDS
PCRYPT_SIGN_MESSAGE_PARA typedef ptr CRYPT_SIGN_MESSAGE_PARA

CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG equ 0x1

CRYPT_VERIFY_MESSAGE_PARA  STRUC
cbSize			dd ?
dwMsgAndCertEncodingType dd ?
hCryptProv		HCRYPTPROV ?
pfnGetSignerCertificate PFN_CRYPT_GET_SIGNER_CERTIFICATE ?
pvGetArg		PVOID ?
CRYPT_VERIFY_MESSAGE_PARA ENDS
PCRYPT_VERIFY_MESSAGE_PARA typedef ptr CRYPT_VERIFY_MESSAGE_PARA

CRYPT_ENCRYPT_MESSAGE_PARA  STRUC
cbSize			dd ?
dwMsgEncodingType	dd ?
hCryptProv		HCRYPTPROV ?
ContentEncryptionAlgorithm CRYPT_ALGORITHM_IDENTIFIER <>
pvEncryptionAuxInfo	PVOID ?
dwFlags			dd ?
dwInnerContentType	dd ?
CRYPT_ENCRYPT_MESSAGE_PARA ENDS
PCRYPT_ENCRYPT_MESSAGE_PARA typedef ptr CRYPT_ENCRYPT_MESSAGE_PARA

CRYPT_DECRYPT_MESSAGE_PARA  STRUC
cbSize			dd ?
dwMsgAndCertEncodingType dd ?
cCertStore		dd ?
rghCertStore		PVOID ?;HCERTSTORE ?
CRYPT_DECRYPT_MESSAGE_PARA ENDS
PCRYPT_DECRYPT_MESSAGE_PARA typedef ptr CRYPT_DECRYPT_MESSAGE_PARA

CRYPT_HASH_MESSAGE_PARA	 STRUC
cbSize			dd ?
dwMsgEncodingType	dd ?
hCryptProv		HCRYPTPROV ?
HashAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
pvHashAuxInfo		PVOID ?
CRYPT_HASH_MESSAGE_PARA ENDS
PCRYPT_HASH_MESSAGE_PARA typedef ptr CRYPT_HASH_MESSAGE_PARA



CRYPT_KEY_SIGN_MESSAGE_PARA  STRUC
cbSize			dd ?
dwMsgAndCertEncodingType dd ?
hCryptProv		HCRYPTPROV ?
dwKeySpec		dd ?
HashAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
pvHashAuxInfo		PVOID ?
PubKeyAlgorithm		CRYPT_ALGORITHM_IDENTIFIER <>
CRYPT_KEY_SIGN_MESSAGE_PARA ENDS
PCRYPT_KEY_SIGN_MESSAGE_PARA typedef ptr CRYPT_KEY_SIGN_MESSAGE_PARA

CRYPT_KEY_VERIFY_MESSAGE_PARA  STRUC
cbSize			dd ?
dwMsgEncodingType	dd ?
hCryptProv		HCRYPTPROV ?
CRYPT_KEY_VERIFY_MESSAGE_PARA ENDS
PCRYPT_KEY_VERIFY_MESSAGE_PARA typedef ptr CRYPT_KEY_VERIFY_MESSAGE_PARA


;BOOL
CryptSignMessage proto WINAPI \
	     pSignPara: PCRYPT_SIGN_MESSAGE_PARA,
    fDetachedSignature: BOOL,
	   cToBeSigned: DWORD,
	rgpbToBeSigned: LPBYTE,
	rgcbToBeSigned: DWORD,
	  pbSignedBlob: LPBYTE,
	 pcbSignedBlob: LPDWORD

;BOOL
CryptVerifyMessageSignature proto WINAPI \
	   pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA,
	 dwSignerIndex: DWORD,
	  pbSignedBlob: LPBYTE,
	  cbSignedBlob: DWORD,
	     pbDecoded: LPBYTE,
	    pcbDecoded: LPDWORD,
	  ppSignerCert: PCCERT_CONTEXT

;LONG
CryptGetMessageSignerCount proto WINAPI \
     dwMsgEncodingType: DWORD,
	  pbSignedBlob: LPBYTE,
	  cbSignedBlob: DWORD

;HCERTSTORE
CryptGetMessageCertificates proto WINAPI \
dwMsgAndCertEncodingType: DWORD,
	    hCryptProv: HCRYPTPROV,
	       dwFlags: DWORD,
	  pbSignedBlob: LPBYTE,
	  cbSignedBlob: DWORD

;BOOL
CryptVerifyDetachedMessageSignature proto WINAPI \
	   pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA,
	 dwSignerIndex: DWORD,
    pbDetachedSignBlob: LPBYTE,
    cbDetachedSignBlob: DWORD,
	   cToBeSigned: DWORD,
	rgpbToBeSigned: LPBYTE,
	rgcbToBeSigned: DWORD,
	  ppSignerCert: ptr PCCERT_CONTEXT

;BOOL
CryptEncryptMessage proto WINAPI \
	  pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA,
	cRecipientCert: DWORD,
      rgpRecipientCert: PCCERT_CONTEXT,
       pbToBeEncrypted: LPBYTE,
       cbToBeEncrypted: DWORD,
       pbEncryptedBlob: LPBYTE,
      pcbEncryptedBlob: LPDWORD

;BOOL
CryptDecryptMessage proto WINAPI \
	  pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA,
       pbEncryptedBlob: LPBYTE,
       cbEncryptedBlob: DWORD,
	   pbDecrypted: LPBYTE,
	  pcbDecrypted: LPDWORD,
	    ppXchgCert: PCCERT_CONTEXT

;BOOL
CryptSignAndEncryptMessage proto WINAPI \
	     pSignPara: PCRYPT_SIGN_MESSAGE_PARA,
	  pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA,
	cRecipientCert: DWORD,
      rgpRecipientCert: PCCERT_CONTEXT,
pbToBeSignedAndEncrypted: LPBYTE,
cbToBeSignedAndEncrypted: DWORD,
pbSignedAndEncryptedBlob: LPBYTE,
pcbSignedAndEncryptedBlob: LPDWORD

;BOOL
CryptDecryptAndVerifyMessageSignature proto WINAPI \
	  pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA,
	   pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA,
	 dwSignerIndex: DWORD,
       pbEncryptedBlob: LPBYTE,
       cbEncryptedBlob: DWORD,
	   pbDecrypted: LPBYTE,
	  pcbDecrypted: LPDWORD,
	    ppXchgCert: PCCERT_CONTEXT,
	  ppSignerCert: PCCERT_CONTEXT

;BOOL
CryptDecodeMessage proto WINAPI \
	dwMsgTypeFlags: DWORD,
	  pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA,
	   pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA,
	 dwSignerIndex: DWORD,
	 pbEncodedBlob: LPBYTE,
	 cbEncodedBlob: DWORD,
dwPrevInnerContentType: DWORD,
	    pdwMsgType: LPDWORD,
   pdwInnerContentType: LPDWORD,
	     pbDecoded: LPBYTE,
	    pcbDecoded: LPDWORD,
	    ppXchgCert: PCCERT_CONTEXT,
	  ppSignerCert: PCCERT_CONTEXT

;BOOL
CryptHashMessage proto WINAPI \
	     pHashPara: PCRYPT_HASH_MESSAGE_PARA,
	 fDetachedHash: BOOL,
	   cToBeHashed: DWORD,
	rgpbToBeHashed: LPBYTE,
	rgcbToBeHashed: DWORD,
	  pbHashedBlob: LPBYTE,
	 pcbHashedBlob: LPDWORD,
	pbComputedHash: LPBYTE,
       pcbComputedHash: LPDWORD

;BOOL
CryptVerifyMessageHash proto WINAPI \
	     pHashPara: PCRYPT_HASH_MESSAGE_PARA,
	  pbHashedBlob: LPBYTE,
	  cbHashedBlob: DWORD,
	  pbToBeHashed: LPBYTE,
	 pcbToBeHashed: LPDWORD,
	pbComputedHash: LPBYTE,
       pcbComputedHash: LPDWORD

;BOOL
CryptVerifyDetachedMessageHash proto WINAPI \
	     pHashPara: PCRYPT_HASH_MESSAGE_PARA,
    pbDetachedHashBlob: LPBYTE,
    cbDetachedHashBlob: DWORD,
	   cToBeHashed: DWORD,
	rgpbToBeHashed: LPBYTE,
	rgcbToBeHashed: DWORD,
	pbComputedHash: LPBYTE,
       pcbComputedHash: LPDWORD

;BOOL
CryptSignMessageWithKey proto WINAPI \
	     pSignPara: PCRYPT_KEY_SIGN_MESSAGE_PARA,
	  pbToBeSigned: LPBYTE,
	  cbToBeSigned: DWORD,
	  pbSignedBlob: LPBYTE,
	 pcbSignedBlob: LPDWORD

;BOOL
CryptVerifyMessageSignatureWithKey proto WINAPI \
	   pVerifyPara: PCRYPT_KEY_VERIFY_MESSAGE_PARA,
	pPublicKeyInfo: PCERT_PUBLIC_KEY_INFO,
	  pbSignedBlob: LPBYTE,
	  cbSignedBlob: DWORD,
	     pbDecoded: LPBYTE,
	    pcbDecoded: LPDWORD






;HCERTSTORE
CertOpenSystemStoreA proto WINAPI \
		 hProv: HCRYPTPROV,
   szSubsystemProtocol: LPCSTR
;HCERTSTORE
CertOpenSystemStoreW proto WINAPI \
		 hProv: HCRYPTPROV,
   szSubsystemProtocol: LPCWSTR
ifdef _UNICODE
CertOpenSystemStore	equ <CertOpenSystemStoreW>
else
CertOpenSystemStore	equ <CertOpenSystemStoreA>
endif 

;BOOL
CertAddEncodedCertificateToSystemStoreA proto WINAPI \
       szCertStoreName: LPCSTR,
	 pbCertEncoded: LPBYTE,
	 cbCertEncoded: DWORD
;BOOL
CertAddEncodedCertificateToSystemStoreW proto WINAPI \
       szCertStoreName: LPCWSTR,
	 pbCertEncoded: LPBYTE,
	 cbCertEncoded: DWORD
ifdef _UNICODE
CertAddEncodedCertificateToSystemStore equ <CertAddEncodedCertificateToSystemStoreW>
else
CertAddEncodedCertificateToSystemStore equ <CertAddEncodedCertificateToSystemStoreA>
endif 


CERT_CHAIN		STRUC
cCerts			dd ?	
certs			PCERT_BLOB ?	
keyLocatorInfo		CRYPT_KEY_PROV_INFO <>	
CERT_CHAIN		ENDS
PCERT_CHAIN		typedef ptr CERT_CHAIN


;HRESULT

FindCertsByIssuer proto WINAPI \
	   pCertChains: PCERT_CHAIN,
	 pcbCertChains: LPDWORD,
	  pcCertChains: LPDWORD,	; count of certificates chains returned
   pbEncodedIssuerName: LPBYTE,		; DER encoded issuer name
   cbEncodedIssuerName: DWORD,		; count in bytes of encoded issuer name
	   pwszPurpose: LPCWSTR,	; "ClientAuth" or "CodeSigning"
	     dwKeySpec: DWORD		; only return signers supporting this keyspec

endif 

endif 

.list
