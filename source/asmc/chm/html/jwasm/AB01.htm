<HTML>
<HEAD><TITLE>Win64_3 - SEH Support in Win64</TITLE></HEAD>
<BODY>
<H1>Win64_3 - SEH Support in Win64</H1>

<TABLE BORDER=0 CELLSPACING=4 CELLPADDING=4 WIDTH="100%">
<TR BGCOLOR="#E0E0E0"><TD>
<pre>

;<font color="#808080">--- This sample shows how to use SEH primitives. It doesn't use hll</font>
;<font color="#808080">--- directives. Thus this source can be assembled by both JWasm </font>
;<font color="#808080">--- and Masm64.</font>
;<font color="#808080">---</font>
;<font color="#808080">--- to assemble enter:</font>
;<font color="#808080">---   JWasm -win64 Win64_3.asm</font>
;<font color="#808080">--- or:</font>
;<font color="#808080">---   ml64 -c Win64_3.asm</font>
;<font color="#808080">---</font>
;<font color="#808080">--- to link the binary enter:</font>
;<font color="#808080">---   Link Win64_3.obj</font>

    <b>option</b> casemap:none

    <b>includelib</b> kernel32.lib
    <b>includelib</b> user32.lib

HINSTANCE <b>typedef</b> QWORD
HWND      <b>typedef</b> QWORD
HMENU     <b>typedef</b> QWORD
HICON     <b>typedef</b> QWORD
HBRUSH    <b>typedef</b> QWORD
HCURSOR   <b>typedef</b> QWORD
WPARAM    <b>typedef</b> QWORD
LPARAM    <b>typedef</b> QWORD
LPSTR     <b>typedef</b> QWORD
LPVOID    <b>typedef</b> QWORD
UINT      <b>typedef</b> DWORD

NULL           <b>equ</b> 0
WS_OVERLAPPEDWINDOW <b>equ</b> 0CF0000h
CW_USEDEFAULT  <b>equ</b> 80000000h
SW_SHOWDEFAULT <b>equ</b> 10
SW_SHOWNORMAL  <b>equ</b> 1
IDC_ARROW      <b>equ</b> 32512
IDI_APPLICATION <b>equ</b> 32512
WM_DESTROY     <b>equ</b> 2
CS_VREDRAW     <b>equ</b> 1
CS_HREDRAW     <b>equ</b> 2
COLOR_WINDOW   <b>equ</b> 5

proto_WNDPROC <b>typedef</b> proto :HWND,:QWORD,:WPARAM,:LPARAM
WNDPROC <b>typedef</b> ptr proto_WNDPROC

WNDCLASSEXA <b>struct</b> 8
cbSize          DWORD   ?
style           DWORD   ?
lpfnWndProc     WNDPROC ?
cbClsExtra      DWORD   ?
cbWndExtra      DWORD   ?
hInstance       HINSTANCE ?
hIcon           HICON   ?
hCursor         HCURSOR ?
hbrBackground   HBRUSH  ?
lpszMenuName    LPSTR   ?
lpszClassName   LPSTR   ?
hIconSm         HICON   ?
WNDCLASSEXA <b>ends</b>

POINT   <b>struct</b>
x   SDWORD  ?
y   SDWORD  ?
POINT   <b>ends</b>

MSG <b>struct</b> 8
hwnd    HWND    ?
message DWORD   ?
wParam  WPARAM  ?
lParam  LPARAM  ?
time    DWORD   ?
pt      POINT   &lt;&gt;
MSG <b>ends</b>

GetModuleHandleA <b>proto</b> :LPSTR
GetCommandLineA  <b>proto</b>
ExitProcess      <b>proto</b> :UINT
LoadIconA        <b>proto</b> :HINSTANCE, :LPSTR
LoadCursorA      <b>proto</b> :HINSTANCE, :LPSTR
RegisterClassExA <b>proto</b> :ptr WNDCLASSEXA
CreateWindowExA  <b>proto</b> :DWORD, :LPSTR, :LPSTR, :DWORD, :SDWORD, :SDWORD, :SDWORD, :SDWORD, :HWND, :HMENU, :HINSTANCE, :LPVOID
ShowWindow       <b>proto</b> :HWND, :SDWORD
UpdateWindow     <b>proto</b> :HWND
GetMessageA      <b>proto</b> :ptr MSG, :HWND, :SDWORD, :SDWORD
TranslateMessage <b>proto</b> :ptr MSG
DispatchMessageA <b>proto</b> :ptr MSG
PostQuitMessage  <b>proto</b> :SDWORD
DefWindowProcA   <b>proto</b> :HWND, :UINT, :WPARAM, :LPARAM

;<font color="#808080">WinMain proto :HINSTANCE, :HINSTANCE, :LPSTR, :UINT</font>

    <b>.data</b>

ClassName <b>db</b> "SimpleWinClass",0
AppName  <b>db</b> "Our First Window",0

    <b>.data?</b>

hInstance HINSTANCE ?
CommandLine LPSTR ?

    <b>.code</b>

WinMainCRTStartup <b>proc</b> FRAME
    <font color="#0000E0">push</font>   rbp
    <b>.pushreg</b> rbp
    <font color="#0000E0">mov</font>    rbp,rsp
    <b>.setframe</b> rbp, 0
    <b>.endprolog</b>

    <font color="#0000E0">sub</font>    rsp,32
    <font color="#0000E0">mov</font>    ecx,NULL
    <font color="#0000E0">call</font>   GetModuleHandleA
    <font color="#0000E0">mov</font>    hInstance, rax
    <font color="#0000E0">call</font>   GetCommandLineA
    <font color="#0000E0">mov</font>    CommandLine, rax
    <font color="#0000E0">mov</font>    rcx, hInstance
    <font color="#0000E0">mov</font>    rdx, NULL
    <font color="#0000E0">mov</font>    r8, CommandLine
    <font color="#0000E0">mov</font>    r9d, SW_SHOWDEFAULT
    <font color="#0000E0">call</font>   WinMain
    <font color="#0000E0">mov</font>    ecx, eax
    <font color="#0000E0">call</font>   ExitProcess
    <b>align</b> 4
WinMainCRTStartup <b>endp</b>

WinMain <b>proc</b> FRAME

    <font color="#0000E0">push</font>  rbp
    <b>.pushreg</b> rbp
    <font color="#0000E0">mov</font>   rbp,rsp
    <b>.setframe</b> rbp, 0
    <b>.endprolog</b>
    <font color="#0000E0">sub</font>   rsp, sizeof WNDCLASSEXA + sizeof MSG + sizeof HWND + 12*8

hInst     <b>equ</b> &lt;[rbp+10h]&gt;
hPrevInst <b>equ</b> &lt;[rbp+18h]&gt;
CmdLine   <b>equ</b> &lt;[rbp+20h]&gt;
CmdShow   <b>equ</b> &lt;[rbp+28h]&gt;

wc   <b>equ</b> &lt;[rbp - sizeof WNDCLASSEXA].WNDCLASSEXA&gt;
msg  <b>equ</b> &lt;[rbp - sizeof WNDCLASSEXA - sizeof MSG].MSG&gt;
hwnd <b>equ</b> &lt;[rbp - sizeof WNDCLASSEXA - sizeof MSG - sizeof HWND]&gt;

    <font color="#0000E0">mov</font>   hInst, rcx  ;<font color="#808080">store param1 in shadow space</font>

    <font color="#0000E0">mov</font>   wc.cbSize, SIZEOF WNDCLASSEXA
    <font color="#0000E0">mov</font>   wc.style, CS_HREDRAW <font color="#0000E0">or</font> CS_VREDRAW
;<font color="#808080">   mov   rax, OFFSET WndProc  ;using LEA is preferable</font>
    <font color="#0000E0">lea</font>   rax, [WndProc]
    <font color="#0000E0">mov</font>   wc.lpfnWndProc, rax
    <font color="#0000E0">mov</font>   wc.cbClsExtra, NULL
    <font color="#0000E0">mov</font>   wc.cbWndExtra, NULL
    <font color="#0000E0">mov</font>   wc.hInstance, rcx
    <font color="#0000E0">mov</font>   wc.hbrBackground, COLOR_WINDOW+1
    <font color="#0000E0">mov</font>   wc.lpszMenuName, NULL
;<font color="#808080">    mov   rax, OFFSET ClassName  ;using LEA is preferable</font>
    <font color="#0000E0">lea</font>   rax, [ClassName]
    <font color="#0000E0">mov</font>   wc.lpszClassName, rax
    <font color="#0000E0">mov</font>   ecx, NULL
    <font color="#0000E0">mov</font>   edx, IDI_APPLICATION
    <font color="#0000E0">call</font>  LoadIconA
    <font color="#0000E0">mov</font>   wc.hIcon, rax
    <font color="#0000E0">mov</font>   wc.hIconSm, rax
    <font color="#0000E0">mov</font>   ecx, NULL
    <font color="#0000E0">mov</font>   edx, IDC_ARROW
    <font color="#0000E0">call</font>  LoadCursorA
    <font color="#0000E0">mov</font>   wc.hCursor,rax
    <font color="#0000E0">lea</font>   rcx, wc
    <font color="#0000E0">call</font>  RegisterClassExA
    <font color="#0000E0">mov</font>   ecx, NULL
    <font color="#0000E0">lea</font>   rdx, [ClassName]
    <font color="#0000E0">lea</font>   r8, [AppName]
    <font color="#0000E0">mov</font>   r9d, WS_OVERLAPPEDWINDOW
    <font color="#0000E0">mov</font>   dword ptr [rsp+4*8], CW_USEDEFAULT
    <font color="#0000E0">mov</font>   dword ptr [rsp+5*8], CW_USEDEFAULT
    <font color="#0000E0">mov</font>   dword ptr [rsp+6*8], CW_USEDEFAULT
    <font color="#0000E0">mov</font>   dword ptr [rsp+7*8], CW_USEDEFAULT
    <font color="#0000E0">mov</font>   qword ptr [rsp+8*8], NULL
    <font color="#0000E0">mov</font>   qword ptr [rsp+9*8], NULL
    <font color="#0000E0">mov</font>   rax, hInst
    <font color="#0000E0">mov</font>   [rsp+10*8], rax
    <font color="#0000E0">mov</font>   qword ptr [rsp+11*8], NULL
    <font color="#0000E0">call</font>  CreateWindowExA
    <font color="#0000E0">mov</font>   hwnd,rax
    <font color="#0000E0">mov</font>   rcx, hwnd
    <font color="#0000E0">mov</font>   edx, SW_SHOWNORMAL
    <font color="#0000E0">call</font>  ShowWindow
    <font color="#0000E0">mov</font>   rcx, hwnd
    <font color="#0000E0">call</font>  UpdateWindow
;<font color="#808080">--- message loop</font>
@@:
        <font color="#0000E0">lea</font> rcx, msg
        <font color="#0000E0">mov</font> rdx, NULL
        <font color="#0000E0">mov</font> r8, 0
        <font color="#0000E0">mov</font> r9, 0
        <font color="#0000E0">call</font> GetMessageA
        <font color="#0000E0">and</font> rax, rax
        <font color="#0000E0">jz</font> @F
        <font color="#0000E0">lea</font> rcx, msg
        <font color="#0000E0">call</font> TranslateMessage
        <font color="#0000E0">lea</font> rcx, msg
        <font color="#0000E0">call</font> DispatchMessageA
        jmp @B
@@:
    <font color="#0000E0">mov</font>   rax, msg.wParam
    <font color="#0000E0">add</font>   rsp, sizeof WNDCLASSEXA + sizeof MSG + sizeof HWND + 12*8
    <font color="#0000E0">pop</font>   rbp
    <font color="#0000E0">ret</font>
    <b>align</b> 4
WinMain <b>endp</b>

WndProc <b>proc</b> FRAME

    <font color="#0000E0">sub</font>   rsp, 4*8
    <b>.allocstack</b> 4*8
    <b>.endprolog</b>

    <font color="#0000E0">cmp</font> edx, WM_DESTROY
    <font color="#0000E0">jnz</font> @F
    <font color="#0000E0">mov</font> ecx, NULL
    <font color="#0000E0">call</font> PostQuitMessage
    <font color="#0000E0">xor</font> rax,rax
    jmp exit
@@:
    <font color="#0000E0">call</font> DefWindowProcA
exit:
    <font color="#0000E0">add</font> rsp, 4*8
    <font color="#0000E0">ret</font>
    <b>align</b> 4
WndProc <b>endp</b>

<b>end</b>
</pre>
</TD></TR>
</TABLE>

</BODY>
</HTML>
