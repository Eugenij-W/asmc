<HTML>
<HEAD><TITLE>   Option -Zg: Masm-compatible Code Generation</TITLE></HEAD>
<BODY>
<H1>   Option -Zg: Masm-compatible Code Generation</H1>

    Option -Zg makes JWasm try an exact copy of Masm's code
     generation, which results in the following changes:
<UL> 
<LI>    the default prologue for procedures will use<br>
        &nbsp;&nbsp;<font color="#008040"><TT>add [e]sp, - localsize</TT></font><br>
        instead of<br>
        &nbsp;&nbsp;<font color="#008040"><TT>sub [e]sp, localsize</TT></font>.
</LI>
<LI>    the default epilogue for procedures will almost always prefer to 
        generate opcode <TT><b>LEAVE</b></TT> if possible.
</LI>
<LI>    expressions<br>
        &nbsp;&nbsp;<font color="#008040"><TT>&lt;reg&gt; == 0</TT></font> and <font color="#008040"><TT>&lt;reg&gt; != 0</TT></font><br>
        will generate code<br>
        &nbsp;&nbsp;<font color="#008040"><TT>or &lt;reg&gt;,&lt;reg&gt;</TT></font><br>
        instead of<br>
        &nbsp;&nbsp;<font color="#008040"><TT>cmp &lt;reg&gt;,0</TT></font>.
</LI>
<LI>    if invoke must extend an argument's size from word to dword,
        register eax remains unchanged.
</LI>
<LI>    the segment value of FAR externals will always be assumed unknown,
        no matter whether the external is defined inside or outside of a 
        segment block. Thus those labels are excluded from "far call
        optimization". 
</LI>
<LI>    <s>if indirect addressing uses 2 (32- or 64-bit) registers <b>and</b> no
        scaling factor is used <b>and</b> the second register isn't ESP/RSP, then
        the registers are swapped: the second becomes base and the first becomes index
        ( the registers in an expression are counted from left to right ).</s>
        [ since v2.10, this is standard behavior ].
</LI>
</UL> 

</BODY>
</HTML>
