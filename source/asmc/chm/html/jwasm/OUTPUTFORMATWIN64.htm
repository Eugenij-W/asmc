<HTML>
<HEAD><TITLE>   6.3 Win64 Output Format</TITLE></HEAD>
<BODY>
<H1>   6.3 Win64 Output Format</H1>

<H3>    6.3.1 Win64 Basics </H3>

    This output format, that is selected with the <A HREF="CMDOPTWIN64.htm">-win64</A> commandline option, is a variant of the
    <A HREF="OUTPUTFORMATCOFF.htm">COFF output format</A>. It's commonly used to create object modules for 64-bit Windows.
    The default calling convention is the Win64 <A HREF="CALLCONVFASTCALL.htm">FASTCALL</A> implementation.
<P>

<A NAME="INVOKEW64"></A>
<H3>    6.3.2 Directive INVOKE in Win64 </H3>

    Unlike the 64-bit version of Masm, which doesn't support INVOKE anymore, JWasm still
    does; however, please be aware of some peculiarities:
<UL>
<LI>  in theory, using INVOKE requires the FRAME attribute for PROC. It will
      work without FRAME, but Win64 SEH won't be happy with it then.
</LI>
<LI>  the default implementation in 64-bit is very simple: for each INVOKE register
      RSP is reduced by the space required for the arguments, then the call 
      is issued and finally register RSP is restored. To enable a more efficient code
      generation see <A HREF="OPTWIN64.htm">OPTION WIN64</A>, <i>INVOKE Stack Space Reservation</i> - this
      option is not active as default because it virtually requires a certain programming style.
</LI>
<LI>  there is no additional check that the stack is aligned to 16 byte. The
      PROC's FRAME attribute ensures that the stack is correctly aligned after
      the prologue is done. However, it's the programmers responsibility that
      the stack is still aligned when the code generated by INVOKE starts.
</LI>
<LI>  parameter names listed behind the PROC directive will always refer to
      the parameter's shadow space on the stack. However, on a procedure's entry
      the actual values of the first four parameters are hold in registers, and
      the value of the associated shadow spaces are undefined. See <A HREF="OPTWIN64.htm">OPTION WIN64</A>,
      <i>Store Register Arguments</i>, how to make JWasm automatically save the register arguments and thus
      initialize the shadow space on a procedure's entry.
</LI>
</UL>

<A NAME="WIN64SEH"></A>
<H3>    6.3.3 Win64 Structured Exception Handling (SEH) </H3>

    SEH in Win64 differs significantly from the implementation in Win32.
    It's very well possible to ignore Win64 SEH for assembly. However,
    if an assembly routine wants to comply to these rules, a thorough
    understanding of the Win64 ABI is necessary. Masm ( the 64-bit
    version ) supplies some "primitives" for SEH support (.ALLOCSTACK,
    .PUSHREG, .SAVEREG, ...), along with a new FRAME attribute for the
    PROC directive. These features are also supported by JWasm. See sample
    <A HREF="AB01.htm">Win64_3</A> how the "primitives" are to be used for SEH support.
<P>
    The big disadvantage is that using the FRAME keyword in Masm "disables"
    most of the other high level features combined with PROC (function 
    parameters, locals and registers saved with USES) because no function
    prologues and epilogues are generated anymore. Additionally, the 
    implementation at least in Masm v8 seems to be a bit buggy, at least in Masm v8.
    Because of this and to ease the usage of SEH in Win64 there is a new 
    directive implemented in JWasm:
<PRE><font color="#008040"> 
        <A HREF="OPTFRAME.htm">OPTION FRAME:AUTO</A>
</font></PRE><P> 
    If this option is set, JWasm will create Win64 SEH-compatible prologues
    and epilogues. If the option is off, JWasm will behave Masm-compatible,
    that is, FRAME found in a PROC directive will disable automatic 
    prologue/epilogue generation. See sample <A HREF="AB02.htm">Win64_3e</A> how this option
    is supposed to be used.
<P> 
    As for the PROC syntax: The Masm documentation states that FRAME can be
    used in combination with USES and procedure parameters and must be
    located behind all parameters. However, this syntax isn't accepted by
    any Masm version. The only syntax which Masm will accept without being
    confused is FRAME as the one and only parameter for PROC. Therefore
    JWasm doesn't follow the Masm documentation in this point: the optional
    FRAME keyword is expected *before* the procedure parameters. The syntax
    in JWasm is:
<P><pre><font color="#008040"> 
    procname PROC [public] FRAME[:exc_handler] [USES &lt;reglist&gt;] [parameters]
</font></pre><P> 
    The SEH "primitives" will generate some additional data in segments
    .pdata and .xdata. This data is somewhat hidden, but JWasm will display
    the corresponding data definitions in the listing if option -Sg is set.
<P>
    Finally, JWasm's default behavior of INVOKE isn't fully SEH-compatible, because the
    stack pointer is temporarily changed to make room for arguments. To make
    INVOKE comply to SEH, <A HREF="OPTWIN64.htm">OPTION WIN64</A>
    <i>INVOKE Stack Space Reservation</i> has to be used.
<P> 

</BODY>
</HTML>
