;
; Memory is dynamically allocated on the stack by using the
; alloca() function and deleted by the epilogue code LEAVE.
;
MAXALTCMD	equ 6
MAXSHIFTCMD	equ 9
MAXEXTCMD	equ (MAXALTCMD + MAXSHIFTCMD)

	OPTION CSTACK:ON

titransfer PROC USES esi edi ebx

	local	ll:S_LOBJ,
		cmd[MAXEXTCMD]:DWORD,
		ext[_MAX_PATH]:SBYTE

	memzero( addr ll,  SIZE S_LOBJ )
	mov	ll.ll_proc,history_event_list
	mov	ll.ll_dcount,MAXEXTCMD
	lea	edi,cmd
	mov	ll.ll_list,edi

	mov	ebx,tinfo
	mov	eax,[ebx].S_TINFO.ti_file
	lea	ebx,ext
	.if	strrchr( strcpy( ebx, strfn( eax ) ), '.' )
		mov	BYTE PTR [eax],0
		inc	eax
		.if	BYTE PTR [eax]
			strcpy( ebx, eax )
		.endif
	.endif

	mov	esi,2
	.while	esi < 10
		lea	eax,[esi+'0']
		mov	cp_AltX,al
		.if	inientry( addr cp_AltFX, ebx )
			mov	edx,eax
			strlen( eax )
			add	eax,12
			alloca( eax )
			stosd
			sprintf( eax, "[%s]   %s", addr cp_AltFX, edx )
			inc	ll.ll_count
		.endif
		inc	esi
		.if	esi == 7
			mov	esi,9
		.endif
	.endw

	mov	esi,1
	.while	esi < 10
		lea	eax,[esi+'0']
		mov	cp_ShiftX,al
		.if	inientry( addr cp_ShiftFX, ebx )
			mov	edx,eax
			strlen( eax )
			add	eax,12
			alloca( eax )
			stosd
			sprintf( eax, "[%s] %s", addr cp_ShiftFX, edx )
			inc	ll.ll_count
		.endif
		inc	esi
	.endw

	.if	!ll.ll_count
		ermsg( 0, "No Transfer command for this type: %s", ebx )
		xor	eax,eax
		jmp	toend
	.endif

	.if	rsopen( IDD_DZTransfer )
		mov	ebx,eax
		mov	edi,ll.ll_count
		mov	ll.ll_numcel,edi
		mov	[ebx].S_DOBJ.dl_index,0
		lea	edx,ll
		mov	tdllist,edx
		mov	eax,ebx
		history_event_list()
		dlshow( ebx )
		rsevent( IDD_DZTransfer, ebx )
		dlclose( ebx )
		mov	eax,edx
		.if	eax
			dec	edx
			mov	eax,cmd[edx*4]
			inc	eax
			mov	BYTE PTR [eax+7],0
			.if	BYTE PTR [eax+5] == ']'
				mov	BYTE PTR [eax+5],0
			.endif
			call	tiexecuteini
		.endif
	.endif

toend:
	ret

titransfer ENDP
