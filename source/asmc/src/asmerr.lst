Asmc Macro Assembler Version 2.23
Portions Copyright (c) 1992-2002 Sybase, Inc. All Rights Reserved.


C:\Asmc\source\asmc\src\asmerr.asm
                                include io.inc
                              C ifndef __LIBC_INC
                              C  include libc.inc
                              C .list
                              C endif
                              C 
                              C .list
                                include stdio.inc
                              C ifndef __LIBC_INC
                              C endif
                              C .list
                                include stdlib.inc
                              C ifndef __LIBC_INC
                              C endif
                              C .list
                                include string.inc
                              C ifndef __LIBC_INC
                              C endif
                              C 
                              C .list
                                include setjmp.inc
                              C ifndef __LIBC_INC
                              C endif
                              C 
                              C .list
                                include limits.inc
                              C .list

                                include asmc.inc
                              C ; ASMC.INC--
                              C ; Doszip Macro Assembler
                              C 
                              C include version.inc
 = DF                         C ASMC_VERSION equ 223
 = "2.23"                     C ASMC_VERSSTR equ <"2.23">
                              C 
                              C include ltype.inc
                              C ifndef __LIBC_INC
                              C endif
                              C 
                              C .list
                              C 
                              C .list

                                extern	jmpenv:S_JMPBUF

                                print_source_nesting_structure PROTO
                                GetCurrOffset PROTO

                                	.data
00000000                    *   _DATA segment
                            *   assume cs:ERROR
                                ;
                                ; Internal error
                                ;
00000000  496E7465726E616C20    INTER db "Internal Assembler Error",0
                                ;
                                ; Fatal Errors
                                ;
00000019  63616E6E6F74206F70    A1000	db "cannot open file : %s",0
0000002F  492F4F206572726F72    A1001	db "I/O error closing file : %s",0
0000004B  492F4F206572726F72    A1002	db "I/O error writing file : %s",0
                                ;A1003	db "I/O error reading file",0
00000067  617373656D626C6572    A1005	db "assembler limit : macro parameter name table full",0
00000099  696E76616C69642063    A1006	db "invalid command-line option: %s",0
000000B9  6E657374696E67206C    A1007	db "nesting level too deep",0
000000D0  756E6D617463686564    A1008	db "unmatched macro nesting",0
000000E8  6C696E6520746F6F20    A1009	db "line too long",0
000000F6  756E6D617463686564    A1010	db "unmatched block nesting : %s",0
00000113  646972656374697665    A1011	db "directive must be in control block",0
00000136  6572726F7220636F75    A1012	db "error count exceeds 100; stopping assembly",0
                                ;A1013	db "invalid numerical command-line argument : %d",0
                                ;A1014	db "too many arguments",0
                                ;A1015	db "statement too complex",0
00000161  6D697373696E672073    A1017	db "missing source filename",0
 = INTER                        A1901	equ <INTER>
                                ;
                                ; Nonfatal Errors
                                ;
                                ;A2000	db "memory operand not allowed in context",0
                                ;A2001	db "immediate operand not allowed",0
00000179  63616E6E6F74206861    A2002	db "cannot have more than one .ELSE clause per .IF block",0
                                ;A2003	db "extra characters after statement",0
000001AE  73796D626F6C207479    A2004	db "symbol type conflict : %s",0
000001C8  73796D626F6C207265    A2005	db "symbol redefinition : %s",0
000001E1  756E646566696E6564    A2006	db "undefined symbol : %s",0
000001F7  6E6F6E2D62656E6967    A2007	db "non-benign record redefinition %s : %s",0
0000021E  73796E746178206572    A2008	db "syntax error : %s",0
00000230  73796E746178206572    A2009	db "syntax error in expression",0
0000024B  696E76616C69642074    A2010	db "invalid type expression",0
00000263  64697374616E636520    A2011	db "distance invalid for word size of current segment",0
00000295  50524F432C204D4143    A2012	db "PROC, MACRO, or macro repeat directive must precede LOCAL",0
000002CF  2E4D4F44454C206D75    A2013	db ".MODEL must precede this directive",0
000002F2  63616E6E6F74206465    A2014	db "cannot define as public or external : %s",0
0000031B  7365676D656E742061    A2015	db "segment attributes cannot change : %s",0
00000341  65787072657373696F    A2016	db "expression expected",0
                                ;A2017	db "operator expected",0
00000355  696E76616C69642075    A2018	db "invalid use of external symbol : %s",0
00000379  6F706572616E64206D    A2019	db "operand must be RECORD type or field",0
                                ;A2020	db "identifier not a record : identifier",0
                                ;A2021	db "record constants cannot span line breaks",0
0000039E  696E73747275637469    A2022	db "instruction operands must be the same size : %d - %d",0
000003D3  696E73747275637469    A2023	db "instruction operand must have size",0
000003F6  696E76616C6964206F    A2024	db "invalid operand size for instruction",0
0000041B  6F706572616E647320    A2025	db "operands must be in same segment",0
0000043C  636F6E7374616E7420    A2026	db "constant expected",0
                                ;A2027	db "operand must be a memory expression",0
0000044E  65787072657373696F    A2028	db "expression must be a code address",0
00000470  6D756C7469706C6520    A2029	db "multiple base registers not allowed",0
00000494  6D756C7469706C6520    A2030	db "multiple index registers not allowed",0
000004B9  6D7573742062652069    A2031	db "must be index or base register",0
000004D8  696E76616C69642075    A2032	db "invalid use of register",0
000004F0  696E76616C69642049    A2033	db "invalid INVOKE argument : %d",0
0000050D  6D7573742062652069    A2034	db "must be in segment block",0
                                ;A2035	db "DUP too complex",0
00000526  746F6F206D616E7920    A2036	db "too many initial values for structure: %s",0
00000550  73746174656D656E74    A2037	db "statement not allowed inside structure definition",0
                                ;A2038	db "missing operand for macro operator",0
 = A1009                        A2039	equ <A1009>
                                ;A2040	db "segment register not allowed in context",0
00000582  737472696E67206F72    A2041	db "string or text literal too long",0
                                ;A2042	db "statement too complex",0
000005A2  6964656E7469666965    A2043	db "identifier too long",0
                                ;A2044	db "invalid character in file",0
000005B6  6D697373696E672061    A2045	db "missing angle bracket or brace in literal",0
000005E0  6D697373696E672073    A2046	db "missing single or double quotation mark in string",0
00000612  656D70747920286E75    A2047	db "empty (null) string",0
00000626  6E6F6E646967697420    A2048	db "nondigit in number : %s",0
                                ;A2049	db "syntax error in floating-point constant",0
0000063E  7265616C206F722042    A2050	db "real or BCD number not allowed",0
0000065D  74657874206974656D    A2051	db "text item required",0
00000670  666F72636564206572    A2052	db "forced error : %s",0
00000682  666F72636564206572    A2053	db "forced error : value equal to 0 : %d: %s",0
000006AB  666F72636564206572    A2054	db "forced error : value not equal to 0 : %d: %s",0
000006D8  666F72636564206572    A2055	db "forced error : symbol not defined : %s",0
000006FF  666F72636564206572    A2056	db "forced error : symbol defined : %s",0
00000722  666F72636564206572    A2057	db "forced error : string blank : %s: %s",0
00000747  666F72636564206572    A2058	db "forced error : string not blank : <%s>: %s",0
00000772  666F72636564206572    A2059	db "forced error : strings equal : <%s>: <%s>: %s",0
000007A0  666F72636564206572    A2060	db "forced error : strings not equal : <%s>: <%s>: %s",0
000007D2  5B5B5B454C53455D5D    A2061	db "[[[ELSE]]]IF2/.ERR2 not allowed : single-pass assembler",0
0000080A  65787072657373696F    A2062	db "expression too complex for .UNTILCXZ",0
0000082F  63616E20414C49474E    A2063	db "can ALIGN only to power of 2 : %u",0
00000851  73747275637420616C    A2064	db "struct alignment must be 1, 2, 4, 8, 16 or 32",0
0000087F  657870656374656420    A2065	db "expected : %s",0
0000088D  696E636F6D70617469    A2066	db "incompatible CPU mode and segment size",0
                                ;A2067	db "LOCK must be followed by a memory operation",0
000008B4  696E73747275637469    A2068	db "instruction prefix not allowed",0
                                ;A2069	db "no operands allowed for this instruction",0
000008D3  696E76616C69642069    A2070	db "invalid instruction operands",0
000008F0  696E697469616C697A    A2071	db "initializer too large for specified size",0
00000919  63616E6E6F74206163    A2072	db "cannot access symbol in given segment or group: %s",0
                                ;A2073	db "operands have different frames",0
0000094C  63616E6E6F74206163    A2074	db "cannot access label through segment registers : %s",0
0000097F  6A756D702064657374    A2075	db "jump destination too far : by %d bytes",0
000009A6  6A756D702064657374    A2076	db "jump destination must specify a label",0
000009CC  696E73747275637469    A2077	db "instruction does not allow NEAR indirect addressing",0
                                ;A2078	db "instruction does not allow FAR indirect addressing",0
00000A00  696E73747275637469    A2079	db "instruction does not allow FAR direct addressing",0
00000A31  6A756D702064697374    A2080	db "jump distance not possible in current CPU mode",0
00000A60  6D697373696E67206F    A2081	db "missing operand after unary operator",0
00000A85  63616E6E6F74206D69    A2082	db "cannot mix 16- and 32-bit registers",0
00000AA9  696E76616C69642073    A2083	db "invalid scale value",0
00000ABD  636F6E7374616E7420    A2084	db "constant value too large",0
00000AD6  696E73747275637469    A2085	db "instruction or register not accepted in current CPU mode",0
00000B0F  726573657276656420    A2086	db "reserved word expected",0
00000B26  696E73747275637469    A2087	db "instruction form requires 80386/486",0
00000B4A  454E44206469726563    A2088	db "END directive required at end of file",0
00000B70  746F6F206D616E7920    A2089	db "too many bits in RECORD : %s",0
00000B8D  706F73697469766520    A2090	db "positive value expected",0
00000BA5  696E6465782076616C    A2091	db "index value past end of string",0
00000BC4  636F756E74206D7573    A2092	db "count must be positive or zero",0
00000BE3  636F756E742076616C    A2093	db "count value too large",0
00000BF9  6F706572616E64206D    A2094	db "operand must be relocatable",0
00000C15  636F6E7374616E7420    A2095	db "constant or relocatable label expected",0
00000C3C  7365676D656E742C20    A2096	db "segment, group, or segment register expected",0
00000C69  7365676D656E742065    A2097	db "segment expected : %s",0
00000C7F  696E76616C6964206F    A2098	db "invalid operand for OFFSET",0
                                ;A2099	db "invalid use of external absolute",0
00000C9A  7365676D656E74206F    A2100	db "segment or group not allowed",0
00000CB7  63616E6E6F74206164    A2101	db "cannot add two relocatable labels",0
                                ;A2102	db "cannot add memory expression and code label",0
00000CD9  7365676D656E742065    A2103	db "segment exceeds 64K limit: %s",0
00000CF7  696E76616C69642074    A2104	db "invalid type for data declaration : %s",0
00000D1E  4849474820616E6420    A2105	db "HIGH and LOW require immediate operands",0
00000D46  63616E6E6F74206861    A2107	db "cannot have implicit far jump or call to near label",0
00000D7A  757365206F66207265    A2108	db "use of register assumed to ERROR",0
                                ;A2109	db "only white space or comment can follow backslash",0
00000D9B  434F4D4D454E542064    A2110	db "COMMENT delimiter expected",0
00000DB6  636F6E666C69637469    A2111	db "conflicting parameter definition : %s",0
00000DDC  50524F4320616E6420    A2112	db "PROC and prototype calling conventions conflict",0
00000E0C  696E76616C69642072    A2113	db "invalid radix tag",0
00000E1E  494E564F4B45206172    A2114	db "INVOKE argument type mismatch : %d",0
                                ;A2115	db "invalid coprocessor register",0
                                ;A2116	db "instructions and initialized data not allowed in AT segments",0
                                ;A2117	db "/AT option requires TINY memory model",0
                                ;A2118	db "cannot have segment address references with TINY model",0
00000E41  6C616E677561676520    A2119	db "language type must be specified",0
00000E61  50524F4C4F47554520    A2120	db "PROLOGUE must be macro function",0
00000E81  4550494C4F47554520    A2121	db "EPILOGUE must be macro procedure : %s",0
                                ;A2122	db "alternate identifier not allowed with EXTERNDEF",0
00000EA7  74657874206D616372    A2123	db "text macro nesting level too deep",0
00000EC9  6D697373696E67206D    A2125	db "missing macro argument",0
                                ;A2126	db "EXITM used inconsistently",0
                                ;A2127	db "macro function argument list too long",0
00000EE0  564152415247207061    A2129	db "VARARG parameter must be last parameter",0
                                ;A2130	db "VARARG parameter not allowed with LOCAL",0
00000F08  564152415247207061    A2131	db "VARARG parameter requires C calling convention",0
00000F37  4F5247206E65656473    A2132	db "ORG needs a constant or local offset",0
00000F5C  726567697374657220    A2133	db "register value overwritten by INVOKE",0
                                ;A2134	db "structure too large to pass with INVOKE : argument number",0
00000F81  746F6F206D616E7920    A2136	db "too many arguments to INVOKE",0
                                ;A2137	db "too few arguments to INVOKE",0
                                ;A2138	db "invalid data initializer",0
                                ;A2140	db "RET operand too large",0
00000F9E  746F6F206D616E7920    A2141	db "too many operands to instruction",0
 = A2002                        A2142	equ <A2002>
00000FBF  657870656374656420    A2143	db "expected data label",0
00000FD3  63616E6E6F74206E65    A2144	db "cannot nest procedures : %s",0
00000FEF  4558504F5254206D75    A2145	db "EXPORT must be FAR : %s",0
                                ;A2146	db "procedure declared with two visibility attributes : %s",0
00001007  6D6163726F206C6162    A2147	db "macro label not defined : %s",0
00001024  696E76616C69642073    A2148	db "invalid symbol type in expression : %s",0
                                ;A2149	db "byte register cannot be first operand",0
                                ;A2150	db "word register cannot be first operand",0
0000104B  7370656369616C2072    A2151	db "special register cannot be first operand",0
                                ;A2152	db "coprocessor register cannot be first operand",0
                                ;A2153	db "cannot change size of expression computations",0
00001074  73796E746178206572    A2154	db "syntax error in control-flow directive",0
                                ;A2155	db "cannot use 16-bit register with a 32-bit address",0
0000109B  636F6E7374616E7420    A2156	db "constant value out of range",0
000010B7  6D697373696E672072    A2157	db "missing right parenthesis",0
                                ;A2158	db "type is wrong size for register",0
000010D1  737472756374757265    A2159	db "structure cannot be instanced",0
                                ;A2160	db "non-benign structure redefinition : label incorrect",0
                                ;A2161	db "non-benign structure redefinition : too few labels",0
                                ;A2162	db "OLDSTRUCT/NOOLDSTRUCT state cannot be changed",0
                                ;A2163	db "non-benign structure redefinition : incorrect initializers",0
                                ;A2164	db "non-benign structure redefinition : too few initializers",0
                                ;A2165	db "non-benign structure redefinition : label has incorrect offset",0
000010EF  737472756374757265    A2166	db "structure field expected",0
00001108  756E65787065637465    A2167	db "unexpected literal found in expression : %s",0
00001134  646976696465206279    A2169	db "divide by zero in expression",0
00001151  646972656374697665    A2170	db "directive must appear inside a macro",0
                                ;A2171	db "cannot expand macro function",0
00001176  746F6F206665772062    A2172	db "too few bits in RECORD : %s",0
                                ;A2173	db "macro function cannot redefine itself",0
00001192  696E76616C69642071    A2175	db "invalid qualified type",0
                                ;A2176	db "floating point initializer on an integer variable",0
                                ;A2177	db "nested structure improperly initialized",0
000011A9  696E76616C69642075    A2178	db "invalid use of FLAT",0
000011BD  737472756374757265    A2179	db "structure improperly initialized",0
                                ;A2180	db "improper list initialization",0
000011DE  696E697469616C697A    A2181	db "initializer must be a string or single item",0
                                ;A2182	db "initializer must be a single item",0
                                ;A2183	db "initializer must be a single byte",0
                                ;A2184	db "improper use of list initializer",0
                                ;A2185	db "improper literal initialization",0
                                ;A2186	db "extra characters in literal initialization",0
0000120A  6D7573742075736520    A2187	db "must use floating point initializer",0
                                ;A2188	db "cannot use .EXIT for OS_OS2 with .8086",0
0000122E  696E76616C69642063    A2189	db "invalid combination with segment alignment : %d",0
0000125E  494E564F4B45207265    A2190	db "INVOKE requires prototype for procedure",0
                                ;A2191	db "cannot include structure in self",0
00001286  73796D626F6C206C61    A2192	db "symbol language attribute conflict : %s",0
                                ;A2193	db "non-benign COMM redefinition",0
                                ;A2194	db "COMM variable exceeds 64K",0
                                ;A2195	db "parameter or local cannot have void type",0
                                ;A2196	db "cannot use TINY model with OS_OS2",0
                                ;A2197	db "expression size must be 32-bits",0
                                ;A2198	db ".EXIT does not work with 32-bit segments",0
000012AE  2E5354415254555020    A2199	db ".STARTUP does not work with 32-bit segments",0
000012DA  4F5247206469726563    A2200	db "ORG directive not allowed in unions",0
                                ;A2201	db "scope state cannot be changed",0
000012FE  696C6C6567616C2075    A2202	db "illegal use of segment register",0
                                ;A2203	db "cannot declare scoped code label as PUBLIC",0
                                ;A2204	db ".MSFLOAT directive is obsolete : ignored",0
                                ;A2205	db "ESC instruction is obsolete : ignored",0
0000131E  6D697373696E67206F    A2206	db "missing operator in expression",0
                                ;A2207	db "missing right parenthesis in expression",0
                                ;A2208	db "missing left parenthesis in expression",0
                                ;A2209	db "reference to forward macro redefinition",0
0000133D  47524F555020646972    A2214	db "GROUP directive not allowed with /coff option",0
0000136B  6D7573742062652070    A2217	db "must be public or external : %s",0
                                ;A2219	db "bad alignment for offset in unwind code",0
                                ;
                                ; Nonfatal Errors -- ASMC
                                ;
0000138B  617373656D626C7920    A3000	db "assembly passes reached: %u",0
000013A7  696E76616C69642066    A3001	db "invalid fixup type for %s : %s",0
000013C6  2F5045206F7074696F    A3002	db "/PE option requires FLAT memory model",0
000013EC  2F62696E3A20696E76    A3003	db "/bin: invalid start label",0
00001406  63616E6E6F74207573    A3004	db "cannot use TR%u-TR%u with current CPU setting",0
00001434  6E6F207365676D656E    A3005	db "no segment information to create fixup: %s",0
0000145F  6E6F7420737570706F    A3006	db "not supported with current output format: %s",0
0000148C  6D697373696E67202E    A3007	db "missing .ENDPROLOG: %s",0
000014A3  2E454E4450524F4C4F    A3008	db ".ENDPROLOG found before EH directives",0
000014C9  6D697373696E672046    A3009	db "missing FRAME in PROC, no unwind code will be generated",0
00001501  73697A65206F662070    A3010	db "size of prolog too big, must be < 256 bytes",0
0000152D  746F6F206D616E7920    A3011	db "too many unwind codes in FRAME procedure",0
00001556  726567697374657273    A3012	db "registers AH-DH may not be used with SPL-DIL or R8-R15",0
0000158D  6D756C7469706C6520    A3013	db "multiple overrides",0
000015A0  756E6B6E6F776E2066    A3014	db "unknown fixup type: %u at %s.%lX",0
000015C1  66696C656E616D6520    A3015	db "filename parameter must be enclosed in <> or quotes",0
000015F5  6C69746572616C2065    A3016	db "literal expected after '='",0
00001610  2E5341464553454820    A3017	db ".SAFESEH argument must be a PROC",0
00001631  696E76616C6964206F    A3018	db "invalid operand for %s : %s",0
0000164D  696E76616C69642066    A3019	db "invalid fixup type for %s : %u at location %s:%lX",0
 = A1000                        A3020	equ <A1000>
 = A1001                        A3021	equ <A1001>
0000167F  2E4341534520726564    A3022	db ".CASE redefinition : %s(%d) : %s(%d)",0

                                ;
                                ; Warnings -- MASM
                                ;
                                ;A4000	db "cannot modify READONLY segment",0
                                ;A4002	db "non-unique STRUCT/UNION field used without qualification",0
000016A4  737461727420616464    A4003	db "start address on END directive ignored with .STARTUP",0
                                ;A4004	db "cannot ASSUME CS",0
000016D9  756E6B6E6F776E2064    A4005	db "unknown default prologue argument",0
000016FB  746F6F206D616E7920    A4006	db "too many arguments in macro call : %s",0
00001721  6F7074696F6E20756E    A4007	db "option untranslated, directive required : %s",0
0000174E  696E76616C69642063    A4008	db "invalid command-line option value, default is used : %s",0
                                ;A4009	db "insufficient memory for /EP : /EP ignored",0
                                ;A4010	db "expected '>' on text literal",0
00001786  6D756C7469706C6520    A4011	db "multiple .MODEL directives found : .MODEL ignored",0
000017B8  6C696E65206E756D62    A4012	db "line number information for segment without class 'CODE' : %s",0
                                ;A4013	db "instructions and initialized data not supported in AT segments",0
                                ;A4015	db "directive ignored with /coff switch",0
 = A1000                        A4910	equ <A1000> ; cannot open file
                                ;
                                ; Warnings -- ASMC
                                ;
 = A1006                        A8000	equ <A1006>
 = A2167                        A8001	equ <A2167>
 = A2189                        A8002	equ <A2189>
 = A2103                        A8003	equ <A2103>
 = A2004                        A8004	equ <A2004>
000017F6  49465B6E5D44454620    A8005	db "IF[n]DEF expects a plain symbol as argument : %s",0
00001827  696E73747275637469    A8006	db "instructions and initialized data not supported in %s segments",0
00001866  313662697420666978    A8007	db "16bit fixup for 32bit label : %s",0
00001887  646973706C6163656D    A8008	db "displacement out of range: 0x%I64X",0
000018AA  6E6F20737461727420    A8009	db "no start label defined",0
000018C1  6E6F20737461636B20    A8010	db "no stack defined",0
000018D2  666F72202D636F6666    A8011	db "for -coff leading underscore required for start label: %s",0
0000190C  6C696272617279206E    A8012	db "library name is missing",0
00001924  454C4620474E552065    A8013	db "ELF GNU extensions (8/16-bit relocations) used",0
00001953  4C4F41444453206967    A8014	db "LOADDS ignored in flat model",0
00001970  646972656374697665    A8015	db "directive ignored without -%s switch",0
                                ;A8016	db "text macro used prior to definition: %s",0
00001995  69676E6F7265643A20    A8017	db "ignored: %s",0
000019A1  67726F757020646566    A8018	db "group definition too large, truncated : %s",0
000019CC  73697A65206E6F7420    A8019	db "size not specified, assuming: %s",0
000019ED  636F6E7374616E7420    A8020	db "constant expected",0
                                ;
                                ; warning level 3 -- MASM
                                ;
                                ;A5000	db "@@: label defined but not referenced",0
                                ;A5001	db "expression expected, assume value 0",0
                                ;A5002	db "externdef previously assumed to be external",0
                                ;A5003	db "length of symbol previously assumed to be different",0
                                ;A5004	db "symbol previously assumed to not be in a group",0
                                ;A5005	db "types are different",0
                                ;A6001	db "no return from procedure",0
000019FF  636F6E646974696F6E    A6003	db "conditional jump lengthened",0
00001A1B  70726F636564757265    A6004	db "procedure argument or local not referenced : %s",0
00001A4B  65787072657373696F    A6005	db "expression condition may be pass-dependent: %s",0
                                ;
                                ; warning level 3 -- ASMC
                                ;
 = A2192                        A7000	equ <A2192>
 = A2090                        A7001	equ <A2090>
 = A2133                        A7002	equ <A2133>
00001A7A  6661722063616C6C20    A7003	db "far call is converted to near call.",0
00001A9E  666C6F6174696E672D    A7004	db "floating-point initializer ignored",0
00001AC1  646972656374697665    A7005	db "directive ignored: %s",0
00001AD7  706172616D65746572    A7006	db "parameter/local name is reserved word: %s",0
00001B01  2E4341534520776974    A7007	db ".CASE without .ENDC: assumed fall through",0
00001B2B  63616E6E6F74206465    A7008	db "cannot delay macro function: %s",0

00001B4B  00                    	ALIGN	4

00001B4C  000000000000000000    E0	dd A1000,A1001,A1002,INTER,INTER,A1005,A1006,A1007,A1008,A1009
00001B74  000000000000000000    	dd A1010,A1011,A1012,INTER,INTER,INTER,INTER,A1017
 = 12                           MAX_E0 equ ($ - E0) / 4
00001B94  000000000000000000    E1	dd INTER,INTER,INTER,INTER,A2004,A2005,A2006,A2007,A2008,A2009
00001BBC  000000000000000000    	dd A2010,A2011,A2012,A2013,A2014,A2015,A2016,INTER,A2018,A2019
00001BE4  000000000000000000    	dd INTER,INTER,A2022,A2023,A2024,A2025,A2026,INTER,A2028,A2029
00001C0C  000000000000000000    	dd A2030,A2031,A2032,A2033,A2034,INTER,A2036,A2037,INTER,A1009
00001C34  000000000000000000    	dd INTER,A2041,INTER,A2043,INTER,A2045,A2046,A2047,A2048,INTER
00001C5C  000000000000000000    	dd A2050,A2051,A2052,A2053,A2054,A2055,A2056,A2057,A2058,A2059
00001C84  000000000000000000    	dd A2060,A2061,A2062,A2063,A2064,A2065,A2066,INTER,A2068,INTER
00001CAC  000000000000000000    	dd A2070,A2071,A2072,INTER,A2074,A2075,A2076,A2077,INTER,A2079
00001CD4  000000000000000000    	dd A2080,A2081,A2082,A2083,A2084,A2085,A2086,A2087,A2088,A2089
00001CFC  000000000000000000    	dd A2090,A2091,A2092,A2093,A2094,A2095,A2096,A2097,A2098,INTER
00001D24  000000000000000000    	dd A2100,A2101,INTER,A2103,A2104,A2105,INTER,A2107,A2108,INTER
00001D4C  000000000000000000    	dd A2110,A2111,A2112,A2113,A2114,INTER,INTER,INTER,INTER,A2119
00001D74  000000000000000000    	dd A2120,A2121,INTER,A2123,INTER,A2125,INTER,INTER,INTER,A2129
00001D9C  000000000000000000    	dd INTER,A2131,A2132,A2133,INTER,INTER,A2136,INTER,INTER,INTER
00001DC4  000000000000000000    	dd INTER,A2141,A2002,A2143,A2144,A2145,INTER,A2147,A2148,INTER
00001DEC  000000000000000000    	dd INTER,A2151,INTER,INTER,A2154,INTER,A2156,A2157,INTER,A2159
00001E14  000000000000000000    	dd INTER,INTER,INTER,INTER,INTER,INTER,A2166,A2167,INTER,A2169
00001E3C  000000000000000000    	dd A2170,INTER,A2172,INTER,INTER,A2175,INTER,INTER,A2178,A2179
00001E64  000000000000000000    	dd INTER,A2181,INTER,INTER,INTER,INTER,INTER,A2187,INTER,A2189
00001E8C  000000000000000000    	dd A2190,INTER,INTER,INTER,INTER,INTER,INTER,INTER,INTER,A2199
00001EB4  000000000000000000    	dd A2200,INTER,A2202,INTER,INTER,INTER,A2206,INTER,INTER,INTER
00001EDC  000000000000000000    	dd INTER,INTER,INTER,INTER,A2214,INTER,INTER,A2217,INTER,INTER
 = DC                           MAX_E1 equ ($ - E1) / 4
00001F04  000000000000000000    E2	dd A3000,A3001,A3002,A3003,A3004,A3005,A3006,A3007,A3008,A3009
00001F2C  000000000000000000    	dd A3010,A3011,A3012,A3013,A3014,A3015,A3016,A3017,A3018,A3019
00001F54  000000000000000000    	dd A1000,A1001,A3022
 = 17                           MAX_E2 equ ($ - E2) / 4
00001F60  000000000000000000    W1	dd INTER,INTER,INTER,A4003,INTER,A4005,A4006,A4007,A4008,INTER
00001F88  000000000000000000    	dd INTER,A4011,A4012,INTER,A1000
 = F                            MAX_W1	equ ($ - W1) / 4
00001F9C  00000000              W2	dd INTER
 = 1                            MAX_W2	equ ($ - W2) / 4
00001FA0  000000000000000000    W3	dd INTER,INTER,INTER,A6003,A6004,A6005
 = 6                            MAX_W3	equ ($ - W3) / 4
00001FB8  000000000000000000    W4	dd A2192,A2090,A2133,A7003,A7004,A7005,A7006,A7007,A7008
 = 9                            MAX_W4	equ ($ - W4) / 4
00001FDC  000000000000000000    W5	dd A1006,A2167,A2189,A2103,A2004,A8005,A8006,A8007,A8008,A8009
00002004  000000000000000000    	dd A8010,A8011,A8012,A8013,A8014,A8015,INTER,A8017,A8018,A8019
0000202C  00000000              	dd A8020
 = 15                           MAX_W5 equ ($ - W5) / 4

00002030  000000000000000000    table	dd E0,E1,E2,W1,W2,W3,W4,W5
00002050  12000000DC00000017    maxid	dd MAX_E0,MAX_E1,MAX_E2,MAX_W1,MAX_W2,MAX_W3,MAX_W4,MAX_W5

 = 3E8                          MIN_ID	equ 1000
 = 1F54                         MAX_ID	equ 8020

                                ;
                                ; Notes
                                ;
00002070  252A73257328257529    N0000	db "%*s%s(%u): Included by",0
00002087  252A73257328257529    N0001	db "%*s%s(%u)[%s]: Macro called from",0
000020A8  252A73257328257529    N0002	db "%*s%s(%u): iteration %u: Macro called from",0
000020D3  252A73257328257529    N0003	db "%*s%s(%u): Main line code",0
000020ED  000000000000000000    NOTE	dd N0000,N0001,N0002,N0003

00000000                        	.code
000020FD                    *   _DATA ends
00000000                    *   _TEXT segment
                            *   assume cs:FLAT

00000000                        print_err PROC PRIVATE USES esi edi ebx erbuf, format, args
                                  local iob:_iobuf
00000000  55                *   push ebp
00000001  8BEC              *   mov ebp, esp
00000003  83EC20            *   sub esp, 32
00000006  56                *   push esi
00000007  57                *   push edi
00000008  53                *   push ebx
00000009  E800000000            	call	write_logo
0000000E  8B7508                	mov	esi,erbuf
00000011  C745EC42000000        	mov	iob._flag,_IOWRT or _IOSTRG
00000018  C745E4FFFFFF7F        	mov	iob._cnt,INT_MAX
0000001F  8975E0                	mov	iob._ptr,esi
00000022  8975E8                	mov	iob._base,esi
00000025                    *   invoke _output, addr iob, format, args
00000025  FF7510            *    push args
00000028  FF750C            *    push format
0000002B  8D45E0            *    lea eax, iob
0000002E  50                *    push eax
0000002F  E800000000        *    call _output
                                invoke _output( addr iob, format, args )
00000034  8B45E0                	mov	eax,iob._ptr
00000037  C60000                	mov	byte ptr [eax],0
                                	;
                                	; v2.05: new option -eq
                                	;
0000003A                        	.if	!Options.no_error_disp
0000003A  803D0C00000000    *   cmp Options.no_error_disp, 0
00000041  750E              *   jnz @C0001
00000000                        .data
00000043                    *   _TEXT ends
000020FD                    *   _DATA segment
                            *   assume cs:ERROR
000020FD  250073000A000000       DS0000 dw "%s",10,0
00002105                        _DATA ends
00000043                        _TEXT segment
00000043                    *   invoke _print, addr DS0000, esi
00000043  56                *    push esi
00000044  6800000000        *    push offset DS0000
00000049  E800000000        *    call _print
0000004E  83C408            *    add esp, 8
                                invoke _print( addr DS0000 , esi )
00000051                        	.endif
00000051                    *   @C0001:
                                	;
                                	; open .err file if not already open and a name is given
                                	;
00000051  8B1D50000000          	mov	ebx,ModuleInfo.curr_fname[ERR*4]
00000057  8B3D40000000          	mov	edi,ModuleInfo.curr_file[ERR*4]
0000005D                        	.if	!edi && ebx
0000005D  85FF              *   test edi , edi 
0000005F  7532              *   jnz @C0002
00000061  85DB              *   test ebx, ebx
00000063  742E              *   jz  @C0002
00000000                        .data
00000065                    *   _TEXT ends
00002105                    *   _DATA segment
                            *   assume cs:ERROR
00002105  77000000               DS0001 dw "w",0
00002109                        _DATA ends
00000065                        _TEXT segment
00000065                        .if	fopen( ebx, addr DS0001 )
000000065                       invoke fopen, ebx, addr DS0001
000000065  6800000000            push offset DS0001
00000006A  53                    push ebx
00000006B  E800000000            call fopen
000000070  85C0                 test eax, eax
000000072  7407                 jz  @C0003
00000074  A340000000            			mov ModuleInfo.curr_file[ERR*4],eax
00000079                        		.else
00000079  EB18              *   jmp @C0004
0000007B                    *   @C0003:
                                			;
                                			; v2.06: no fatal error anymore if error file cannot be written
                                			; set to NULL before asmerr()!
                                			;
0000007B  A350000000            			mov ModuleInfo.curr_fname[ERR*4],eax
                                			;
                                			; disable -eq!
                                			;
00000080  A20C000000            			mov Options.no_error_disp,al
00000085                    *   invoke asmerr, 4910, ebx
00000085  53                *    push ebx
00000086  682E130000        *    push 4910
0000008B  E869000000        *    call asmerr
00000090  83C408            *    add esp, 8
                                invoke asmerr( 4910, ebx )
00000093                        		.endif
00000093                    *   @C0004:
00000093                        	.endif
00000093                    *   @C0002:
00000093  8B3D40000000          	mov	edi,ModuleInfo.curr_file[ERR*4]
00000099                        	.if	edi
00000099  85FF              *   test edi, edi
0000009B  7453              *   jz  @C0005
0000009D                    *   invoke strlen, esi
0000009D  56                *    push esi
0000009E  E800000000        *    call strlen
000000A3                    *   invoke fwrite, esi, 1, eax, edi
000000A3  57                *    push edi
000000A4  50                *    push eax
000000A5  6A01              *    push 1
000000A7  56                *    push esi
000000A8  E800000000        *    call fwrite
000000AD                        invoke fwrite( esi, 1, strlen( esi ), edi 000000AD  57                   *   invoke f000000AE  6A01               edi
000000A000000B0  6A01              sh edi
00000000000B2  6804000000        push 1
000000B0            000000B7  E800000000        2                    *    push offset DS0000[4]
000000B7                    *    call fwrite
                                invoke fwrite( addr DS0000[4] , 1, 1, edi )
000000BC                        		.if	Parse_Pass == PASS_1 && ModuleInfo.curr_file[LST*4]
000000BC  833D0000000000    *   cmp Parse_Pass , PASS_1 
000000C3  752B              *   jnz @C0006
000000C5  833D3C00000000    *   cmp ModuleInfo.curr_file[LST*4], 0
000000CC  7422              *   jz  @C0006
000000CE  E800000000        *   call GetCurrOffset
000000D3                        invoke GetCurrOffset()
000000D3            000000D3  6A00               LSTTYPE_DIRE000000D5  50                               000000D6  6A04                           *    push eax
0000000D8  E800000000            push LSTTYPE_DIRECTIVE
000000D8                    *    call LstWrite
                                invoke LstWrite( LSTTYPE_DIRECTIVE, eax, 0 )
00000000                        .data
000000DD                    *   _TEXT ends
00002109                    *   _DATA segment
                            *   assume cs:ERROR
00002109  200020002000200020     DS0002 dw "                           %s",0
00002145                        _DATA ends
000000DD                        _TEXT segment
000000DD                    *   invoke LstPrintf, addr DS0002, esi
000000DD  56                *    push esi
000000DE  6800000000        *    push offset DS0002
000000E3  E800000000        *    call LstPrintf
000000E8  83C408            *    add esp, 8
000000EB  E800000000            invoke LstPrintf( addr DS0002 , esi )
000000EB                    *   call LstNL
                                invoke LstNL()
000000F0                        		.endif
000000F0                    *   @C0006:
000000F0                        	.endif
000000F0                    *   @C0005:
000000F0                        	ret
000000F0  5B                *   pop ebx
000000F1  5F                *   pop edi
000000F2  5E                *   pop esi
000000F3  8BE5              *   mov esp, ebp
000000F5  5D                *   pop ebp
000000F6  C20C00            *   retn 12
000000F9                        print_err ENDP


000000F9                        asmerr	PROC C USES esi edi ebx edx ecx value, args:VARARG
                                  local format[512]:BYTE,erbuf[512]:BYTE

000000F9  55                *   push ebp
000000FA  8BEC              *   mov ebp, esp
000000FC  81EC00040000      *   sub esp, 1024
00000102  56                *   push esi
00000103  57                *   push edi
00000104  53                *   push ebx
00000105  52                *   push edx
00000106  51                *   push ecx
00000107  8DBD00FEFFFF          	lea	edi,format
0000010D  8B5D08                	mov	ebx,value
00000110  81FBE8030000          	cmp	ebx,MIN_ID
00000116  0F82CF010000          	jb	error
0000011C  81FB541F0000          	cmp	ebx,MAX_ID
00000122  0F87C3010000          	ja	error

00000128                        	.if	ebx >= 4000 && !Options.warning_error && !Options.warning_level
00000128  81FBA00F0000      *   cmp ebx , 4000 
0000012E  7217              *   jb  @C0007
00000130  803D0E00000000    *   cmp Options.warning_error , 0
00000137  750E              *   jnz @C0007
00000139  803D0D00000000    *   cmp Options.warning_level, 0
00000140  7505              *   jnz @C0007
00000142  E996010000            		jmp toend
00000147                        	.endif
00000147                    *   @C0007:
00000147                        	.if	ebx >= 5000 && ebx < 8000 && Options.warning_level < 3
00000147  81FB88130000      *   cmp ebx , 5000 
0000014D  7216              *   jb  @C0008
0000014F  81FB401F0000      *   cmp ebx , 8000 
00000155  730E              *   jnb @C0008
00000157  803D0D00000003    *   cmp Options.warning_level , 3
0000015E  7305              *   jnb @C0008
00000160  E978010000            		jmp toend
00000165                        	.endif
00000165                    *   @C0008:

00000000                        .data
00000165                    *   _TEXT ends
00002145                    *   _DATA segment
                            *   assume cs:ERROR
00002145  410053004D00430020     DS0003 dw "ASMC : ",0
00002155                        _DATA ends
00000165                        _TEXT segment
00000165                    *   invoke strcpy, edi, addr DS0003
00000165  6800000000        *    push offset DS0003
0000016A  57                *    push edi
0000016B  E800000000        *    call strcpy
                                invoke strcpy( edi, addr DS0003 )
00000170  8B1568000000          	mov	edx,ModuleInfo.src_stack
00000176                        	.while	edx
00000176  EB45              *   jmp @C000A
00000178                    *   ALIGN 4
00000178                    *   @C0009:
00000178  0FB74206              		movzx	eax,[edx].src_item.srcfile
0000017C  8B0D54000000          		mov	ecx,ModuleInfo.FNames
00000182  8B0C81                		mov	ecx,[ecx+eax*4]
00000185  8B420C                		mov	eax,[edx].src_item.line_num
00000188  66837A0400            		cmp	[edx].src_item._type,SIT_FILE
0000018D  8B12                  		mov	edx,[edx].src_item.next
0000018F                        		.if	ZERO?
0000018F  752C              *   jnz @C000B
00000191                        			.if	ModuleInfo.EndDirFound
00000191  803DEC00000000    *   cmp ModuleInfo.EndDirFound, 0
00000198  7411              *   jz  @C000C
00000000                        .data
0000019A                    *   _TEXT ends
00002155                    *   _DATA segment
                            *   assume cs:ERROR
00002155  2500730020003A0020     DS0004 dw "%s : ",0
00002161                        _DATA ends
0000019A                        _TEXT segment
0000019A                    *   invoke sprintf, edi, addr DS0004, ecx
0000019A  51                *    push ecx
0000019B  6800000000        *    push offset DS0004
000001A0  57                *    push edi
000001A1  E800000000        *    call sprintf
000001A6  83C40C            *    add esp, 12
                                invoke sprintf( edi, addr DS0004 , ecx )
000001A9                        			.else
000001A9  EB10              *   jmp @C000D
000001AB                    *   @C000C:
00000000                        .data
000001AB                    *   _TEXT ends
00002161                    *   _DATA segment
                            *   assume cs:ERROR
00002161  250073002800250075     DS0005 dw "%s(%u) : ",0
00002175                        _DATA ends
000001AB                        _TEXT segment
000001AB                    *   invoke sprintf, edi, addr DS0005, ecx, eax
000001AB  50                *    push eax
000001AC  51                *    push ecx
000001AD  6800000000        *    push offset DS0005
000001B2  57                *    push edi
000001B3  E800000000        *    call sprintf
000001B8  83C410            *    add esp, 16
                                invoke sprintf( edi, addr DS0005 , ecx, eax )
000001BB                        			.endif
000001BB                    *   @C000D:
000001BB                        			.break
000001BB  EB04              *   jmp @C000E
000001BD                        		.endif
000001BD                    *   @C000B:
000001BD                        	.endw
000001BD                    *   @C000A:
000001BD  85D2              *   test edx, edx
000001BF  75B7              *   jnz @C0009
000001C1                    *   @C000E:

000001C1                        	.if	ebx < 2000
000001C1  81FBD0070000      *   cmp ebx , 2000
000001C7  730D              *   jnb @C000F
00000000                        .data
000001C9                    *   _TEXT ends
00002175                    *   _DATA segment
                            *   assume cs:ERROR
00002175  66006100740061006C     DS0006 dw "fatal error",0
0000218D                        _DATA ends
000001C9                        _TEXT segment
000001C9                    *   invoke strcat, edi, addr DS0006
000001C9  6800000000        *    push offset DS0006
000001CE  57                *    push edi
000001CF  E800000000        *    call strcat
                                invoke strcat( edi, addr DS0006 )
000001D4                        	.elseif ebx < 4000
000001D4  EB20              *   jmp @C0010
000001D6                    *   @C000F:
000001D6  81FBA00F0000      *   cmp ebx , 4000
000001DC  730D              *   jnb @C0011
000001DE                    *   invoke strcat, edi, addr DS0006[12]
000001DE  680C000000        *    push offset DS0006[12]
000001E3  57                *    push edi
000001E4  E800000000        *    call strcat
                                invoke strcat( edi,addr DS0006[12] )
000001E9                        	.else
000001E9  EB0B              *   jmp @C0010
000001EB                    *   @C0011:
00000000                        .data
000001EB                    *   _TEXT ends
0000218D                    *   _DATA segment
                            *   assume cs:ERROR
0000218D  7700610072006E0069     DS0007 dw "warning",0
0000219D                        _DATA ends
000001EB                        _TEXT segment
000001EB                    *   invoke strcat, edi, addr DS0007
000001EB  6800000000        *    push offset DS0007
000001F0  57                *    push edi
000001F1  E800000000        *    call strcat
                                invoke strcat( edi, addr DS0007 )
000001F6                        	.endif
000001F6                    *   @C0010:
000001F6                      *   invoke strlen, edi000001F6  57                  *    push edi000001F7  E800000000          *    call strlen
                                invoke strlen( edi )
000001FC  03F8                  	add	edi,eax
00000000                        .data
000001FE                    *   _TEXT ends
0000219D                    *   _DATA segment
                            *   assume cs:ERROR
0000219D  200041002500300034     DS0008 dw " A%04u: ",0
000021AF                        _DATA ends
000001FE                        _TEXT segment
000001FE                    *   invoke sprintf, edi, addr DS0008, ebx
000001FE  53                *    push ebx
000001FF  6800000000        *    push offset DS0008
00000204  57                *    push edi
00000205  E800000000        *    call sprintf
0000020A  83C40C            *    add esp, 12
                                invoke sprintf( edi, addr DS0008 , ebx )
0000020D  33C9                  	xor	ecx,ecx
0000020F  8D8318FCFFFF          	lea	eax,[ebx-1000]
00000215                        	.while	eax > 1000
00000215  EB09              *   jmp @C0013
00000217  90                *   ALIGN 4
00000218                    *   @C0012:
00000218  83C101                		add	ecx,1
0000021B  2DE8030000            		sub	eax,1000
00000220                        	.endw
00000220                    *   @C0013:
00000220  3DE8030000        *   cmp eax , 1000
00000225  77F1              *   ja  @C0012
00000227                        	.if	eax == 910
00000227  3D8E030000        *   cmp eax , 910
0000022C  7505              *   jnz @C0014
0000022E  B80E000000            		mov	eax,14
00000233                        	.endif
00000233                    *   @C0014:
00000233  3B048D00000000        	cmp	eax,maxid[ecx*4]
0000023A  0F83AB000000          	jnb	error
00000240  8B348D00000000        	mov	esi,table[ecx*4]
00000247  8B3486                	mov	esi,[esi+eax*4]
0000024A  81FE00000000          	cmp	esi,offset INTER
00000250  0F8495000000          	je	error

00000256  8DBD00FEFFFF          	lea	edi,format
0000025C                    *   invoke strcat, edi, esi
0000025C  56                *    push esi
0000025D  57                *    push edi
0000025E  E800000000        *    call strcat
00000263                        invoke strcat( edi, esi )
0000024F           00000263  8D450C            r, addr erbuf, edi, 00000266  50                           *   00000267  57                               00000268  8D8500FCFFFF                      *    0000026E  50                          *    0000026F  E88CFDFFFF                        *    push eax
0000025B                    *    call print_err
                                invoke print_err( addr erbuf, edi, addr args )
00000274  8DB500FCFFFF          	lea	esi,erbuf

0000027A  8B5D08                	mov	ebx,value
0000027D  81FBF4030000          	cmp	ebx,1012
00000283  7478                  	je	quit

00000285                        	.if	ebx >= 4000
00000285  81FBA00F0000      *   cmp ebx , 4000
0000028B  7219              *   jb  @C0015
0000028D                        		.if	!Options.warning_error
0000028D  803D0E00000000    *   cmp Options.warning_error, 0
00000294  7508              *   jnz @C0016
00000296  FF0504000000          			inc ModuleInfo.warning_count
0000029C                        		.else
0000029C  EB06              *   jmp @C0017
0000029E                    *   @C0016:
0000029E  FF0500000000          			inc ModuleInfo.error_count
000002A4                        		.endif
000002A4                    *   @C0017:
000002A4                        	.else
000002A4  EB06              *   jmp @C0018
000002A6                    *   @C0015:
000002A6  FF0500000000          		inc	ModuleInfo.error_count
000002AC                        	.endif
000002AC                    *   @C0018:
000002AC  A108000000            	mov	eax,Options.error_limit
000002B1                        	.if	eax != -1
000002B1  83F8FF            *   cmp eax , -1
000002B4  7416              *   jz  @C0019
000002B6  40                    		inc	eax
000002B7                        		.if	ModuleInfo.error_count >= eax
000002B7  390500000000      *   cmp ModuleInfo.error_count , eax
000002BD  720D              *   jb  @C001A
000002BF                    *   invoke asmerr, 1012
000002BF  68F4030000        *    push 1012
000002C4  E830FEFFFF        *    call asmerr
000002C9  83C404            *    add esp, 4
                                invoke asmerr( 1012 )
000002CC                        		.endif
000002CC                    *   @C001A:
000002CC                        	.endif
000002CC                    *   @C0019:
000002CC                        	.if	ebx >= 2000
000002CC  81FBD0070000      *   cmp ebx , 2000
000002D2  7207              *   jb  @C001B
000002D4  E800000000        *   call print_source_nesting_structure
                                invoke print_source_nesting_structure()
000002D9                        	.else
000002D9  EB02              *   jmp @C001C
000002DB                    *   @C001B:
000002DB  EB20                  		jmp	quit
000002DD                        	.endif
000002DD                    *   @C001C:
000002DD                        toend:
000002DD  B8FFFFFFFF            	mov	eax,-1
000002E2                        	ret
000002E2  59                *   pop ecx
000002E3  5A                *   pop edx
000002E4  5B                *   pop ebx
000002E5  5F                *   pop edi
000002E6  5E                *   pop esi
000002E7  8BE5              *   mov esp, ebp
000002E9  5D                *   pop ebp
000002EA  C3                *   retn 
000002EB                        error:
00000000                        .data
000002EB                    *   _TEXT ends
000021AF                    *   _DATA segment
                            *   assume cs:ERROR
000021AF  410053004D00430020     DS0009 dw "ASMC : fatal error A1901: %s",10,0
000021EB                        _DATA ends
000002EB                        _TEXT segment
000002EB                    *   invoke _print, addr DS0009, addr INTER
000002EB  6800000000        *    push offset INTER
000002F0  6800000000        *    push offset DS0009
000002F5  E800000000        *    call _print
000002FA  83C408            *    add esp, 8
                                invoke _print( addr DS0009 , addr INTER )
000002FD                        quit:
000002FD                        	.if	ModuleInfo.curr_fname[ASM*4]
000002FD  833D4400000000    *   cmp ModuleInfo.curr_fname[ASM*4], 0
00000304  740F              *   jz  @C001D
00000306                    *   invoke longjmp, addr jmpenv, 3
00000306  6A03              *    push 3
00000308  6800000000        *    push offset jmpenv
0000030D  E800000000        *    call longjmp
00000312  83C408            *    add esp, 8
                                invoke longjmp( addr jmpenv, 3 )
00000315                        	.endif
00000315                    *   @C001D:
00000315  A138000000            	mov	eax,ModuleInfo.curr_file[OBJ*4]
0000031A                        	.if	eax
0000031A  85C0              *   test eax, eax
0000031C  7411              *   jz  @C001E
0000031E                    *   invoke fclose, eax
0000031E  50                *    push eax
0000031F  E800000000        *    call fclose
00000324                        invoke fclose( eax )
00000326                 00000324  FF3548000000      Info.curr_fname[OBJ * 4]
00000326        0000032A  E800000000        Info.curr_fname[OBJ * 4]
0000032C                    *    call remove
                                invoke remove( ModuleInfo.curr_fname[OBJ*4] )
0000032F                        	.endif
0000032F                    *   @C001E:
0000032F                      *   invoke exit, 10000032F  6A01                *    push 100000331  E800000000          *    call exit
                                invoke exit( 1 )

00000336                        asmerr	ENDP

00000336                        WriteError PROC
00000336                    *   invoke asmerr, 1002, ModuleInfo.curr_fname[OBJ * 4]
00000336  FF3548000000      *    push ModuleInfo.curr_fname[OBJ * 4]
0000033C  68EA030000        *    push 1002
00000341  E8B3FDFFFF        *    call asmerr
00000346  83C408            *    add esp, 8
                                invoke asmerr( 1002, ModuleInfo.curr_fname[OBJ*4] )
00000349                        	ret
00000349  C3                *   retn
0000034A                        WriteError ENDP

0000034A                        PrintNote PROC C value, args:VARARG
                                  local erbuf[512]:BYTE
0000034A  55                *   push ebp
0000034B  8BEC              *   mov ebp, esp
0000034D  81EC00020000      *   sub esp, 512
00000353  8B4508                	mov	eax,value
00000356  8B148500000000        	mov	edx,NOTE[eax*4]
0000035D                    *   invoke print_err, addr erbuf, edx, addr args
0000035D  8D450C            *    lea eax, args
00000360  50                *    push eax
00000361  52                *    push edx
00000362  8D8500FEFFFF      *    lea eax, erbuf
00000368  50                *    push eax
00000369  E892FCFFFF        *    call print_err
                                invoke print_err( addr erbuf, edx, addr args )
0000036E                        	ret
0000036E  8BE5              *   mov esp, ebp
00000370  5D                *   pop ebp
00000371  C3                *   retn 
00000372                        PrintNote ENDP

                                	END
00000372                    *   _TEXT ends


Macros:

                N a m e                 Type

@CStr  . . . . . . . . . . . . .        Func
@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func
M_EAT_SPACE  . . . . . . . . . .        Func
M_EAT_SPACE_R  . . . . . . . . .        Func
M_MODULEVARS . . . . . . . . . .        Proc
M_SKIP_SPACE . . . . . . . . . .        Proc
M_SKIP_SPACE_R . . . . . . . . .        Proc
defined  . . . . . . . . . . . .        Func


Structures and Unions:

                N a m e                 Size/Ofs   Type

FILETIME . . . . . . . . . . . .               8
  dwLowDateTime  . . . . . . . .               0   DWord
  dwHighDateTime . . . . . . . .               4   DWord
S_JMPBUF . . . . . . . . . . . .              20
  J_EBP  . . . . . . . . . . . .               0   DWord
  J_EBX  . . . . . . . . . . . .               4   DWord
  J_EDI  . . . . . . . . . . . .               8   DWord
  J_ESI  . . . . . . . . . . . .               C   DWord
  J_ESP  . . . . . . . . . . . .              10   DWord
  J_EIP  . . . . . . . . . . . .              14   DWord
  J_EDX  . . . . . . . . . . . .              18   DWord
  J_ECX  . . . . . . . . . . . .              1C   DWord
_finddata_t  . . . . . . . . . .             11C
  ff_attrib  . . . . . . . . . .               0   DWord
  ff_time_create . . . . . . . .               4   DWord
  ff_time_access . . . . . . . .               8   DWord
  ff_time_write  . . . . . . . .               C   DWord
  ff_size  . . . . . . . . . . .              10   QWord
  ff_name  . . . . . . . . . . .              18   Byte[260]
_iobuf . . . . . . . . . . . . .              20 (4)
  _ptr . . . . . . . . . . . . .               0   LPSTR
  _cnt . . . . . . . . . . . . .               4   SINT
  _base  . . . . . . . . . . . .               8   LPSTR
  _flag  . . . . . . . . . . . .               C   SINT
  _file  . . . . . . . . . . . .              10   SINT
  _charbuf . . . . . . . . . . .              14   SINT
  _bufsiz  . . . . . . . . . . .              18   SINT
  _tmpfname  . . . . . . . . . .              1C   LPSTR
_wfinddata_t . . . . . . . . . .             220
  ff_attrib  . . . . . . . . . .               0   DWord
  ff_time_create . . . . . . . .               4   DWord
  ff_time_access . . . . . . . .               8   DWord
  ff_time_write  . . . . . . . .               C   DWord
  ff_size  . . . . . . . . . . .              10   QWord
  ff_name  . . . . . . . . . . .              18   Word[260]
asm_tok  . . . . . . . . . . . .              10 (4)
  token  . . . . . . . . . . . .               0   Byte
   . . . . . . . . . . . . . . .               1
    dirtype  . . . . . . . . . .               1   Byte
    bytval . . . . . . . . . . .               1   Byte
    precedence . . . . . . . . .               1   Byte
    string_delim . . . . . . . .               1   Byte
    floattype  . . . . . . . . .               1   Byte
    numbase  . . . . . . . . . .               1   Byte
    specval  . . . . . . . . . .               1   Byte
  hll_flags  . . . . . . . . . .               2   Byte
  hll_index  . . . . . . . . . .               3   Byte
   . . . . . . . . . . . . . . .               4
    tokval . . . . . . . . . . .               4   DWord
    stringlen  . . . . . . . . .               4   DWord
    idarg  . . . . . . . . . . .               4   DWord
    itemlen  . . . . . . . . . .               4   DWord
    lastidx  . . . . . . . . . .               4   DWord
  string_ptr . . . . . . . . . .               8   LPSTR
  tokpos . . . . . . . . . . . .               C   LPSTR
asym . . . . . . . . . . . . . .              30 (4)
  nextitem . . . . . . . . . . .               0   DWord
  _name  . . . . . . . . . . . .               4   LPSTR
   . . . . . . . . . . . . . . .               8
    _offset  . . . . . . . . . .               8   DWord
    value  . . . . . . . . . . .               8   DWord
    uvalue . . . . . . . . . . .               8   DWord
    string_ptr . . . . . . . . .               8   LPSTR
    substitute . . . . . . . . .               8   DWord
    func_ptr . . . . . . . . . .               8   DWord
    class_lname_idx  . . . . . .               8   DWord
  _segment . . . . . . . . . . .               C   LPASYM
  state  . . . . . . . . . . . .              10   Byte
  mem_type . . . . . . . . . . .              11   Byte
  flag . . . . . . . . . . . . .              12   Word
   . . . . . . . . . . . . . . .              14
    first_size . . . . . . . . .              14   DWord
     . . . . . . . . . . . . . .              14
      Ofssize  . . . . . . . . .              14   Byte
      is_ptr . . . . . . . . . .              15   Byte
       . . . . . . . . . . . . .              16
        ptr_memtype  . . . . . .              16   Byte
        asmpass  . . . . . . . .              16   Byte
      sint_flag  . . . . . . . .              17   Byte
    mac_flag . . . . . . . . . .              14   DWord
   . . . . . . . . . . . . . . .              18
    first_length . . . . . . . .              18   DWord
    max_mbr_size . . . . . . . .              18   DWord
    target_type  . . . . . . . .              18   DWord
    regist . . . . . . . . . . .              18   Word[2]
   . . . . . . . . . . . . . . .              1C
    total_size . . . . . . . . .              1C   DWord
    value3264  . . . . . . . . .              1C   DWord
    dll  . . . . . . . . . . . .              1C   DWord
    max_offset . . . . . . . . .              1C   DWord
   . . . . . . . . . . . . . . .              20
    total_length . . . . . . . .              20   DWord
    altname  . . . . . . . . . .              20   DWord
    debuginfo  . . . . . . . . .              20   DWord
    sfunc_ptr  . . . . . . . . .              20   DWord
     . . . . . . . . . . . . . .              20
      cvtyperef  . . . . . . . .              20   Word
      typekind . . . . . . . . .              22   Word
  name_size  . . . . . . . . . .              24   Word
  langtype . . . . . . . . . . .              26   Word
  _type  . . . . . . . . . . . .              28   DWord
   . . . . . . . . . . . . . . .              2C
    bp_fixup . . . . . . . . . .              2C   DWord
    ext_idx  . . . . . . . . . .              2C   DWord
     . . . . . . . . . . . . . .              2C
      ext_idx1 . . . . . . . . .              2C   Word
      ext_idx2 . . . . . . . . .              2E   Word
debug_info . . . . . . . . . . .              18 (4)
  start_line . . . . . . . . . .               0   DWord
  end_line . . . . . . . . . . .               4   DWord
  ln_fileofs . . . . . . . . . .               8   DWord
  line_numbers . . . . . . . . .               C   Word
  file . . . . . . . . . . . . .               E   Word
  next_proc  . . . . . . . . . .              10   DWord
  next_file  . . . . . . . . . .              14   DWord
dll_desc . . . . . . . . . . . .               C (4)
  next . . . . . . . . . . . . .               0   DWord
  cnt  . . . . . . . . . . . . .               4   DWord
  dname  . . . . . . . . . . . .               8   Byte
dsym . . . . . . . . . . . . . .              3C (4)
  sym  . . . . . . . . . . . . .               0   asym
   . . . . . . . . . . . . . . .              30
    seginfo  . . . . . . . . . .              30   DWord
    grpinfo  . . . . . . . . . .              30   DWord
    procinfo . . . . . . . . . .              30   DWord
    structinfo . . . . . . . . .              30   DWord
    macroinfo  . . . . . . . . .              30   DWord
    nextll . . . . . . . . . . .              30   DWord
  next . . . . . . . . . . . . .              34   DWord
   . . . . . . . . . . . . . . .              38
    prev . . . . . . . . . . . .              38   DWord
    nextproc . . . . . . . . . .              38   DWord
    nextlocal  . . . . . . . . .              38   DWord
    nextparam  . . . . . . . . .              38   DWord
equ_item . . . . . . . . . . . .              14 (4)
  next . . . . . . . . . . . . .               0   DWord
  sym  . . . . . . . . . . . . .               4   DWord
  lvalue . . . . . . . . . . . .               8   DWord
  hvalue . . . . . . . . . . . .               C   DWord
  mem_type . . . . . . . . . . .              10   Byte
  isdefined  . . . . . . . . . .              11   Byte
expr . . . . . . . . . . . . . .              3C (4)
   . . . . . . . . . . . . . . .               0
     . . . . . . . . . . . . . .               0
      value  . . . . . . . . . .               0   DWord
      hvalue . . . . . . . . . .               4   DWord
     . . . . . . . . . . . . . .               0
      llvalue  . . . . . . . . .               0   QWord
      hlvalue  . . . . . . . . .               8   QWord
    uvalue . . . . . . . . . . .               0   DWord
    value64  . . . . . . . . . .               0   QWord
    fvalue . . . . . . . . . . .               0   DWord
    st_idx . . . . . . . . . . .               0   DWord
    chararray  . . . . . . . . .               0   Byte[16]
   . . . . . . . . . . . . . . .              10
    quoted_string  . . . . . . .              10   LPTOKEN
    float_tok  . . . . . . . . .              10   LPTOKEN
  base_reg . . . . . . . . . . .              14   LPTOKEN
  idx_reg  . . . . . . . . . . .              18   LPTOKEN
   . . . . . . . . . . . . . . .              1C
    label_tok  . . . . . . . . .              1C   LPTOKEN
    type_tok . . . . . . . . . .              1C   LPTOKEN
  override . . . . . . . . . . .              20   LPTOKEN
  _instr . . . . . . . . . . . .              24   DWord
  kind . . . . . . . . . . . . .              28   DWord
  mem_type . . . . . . . . . . .              2C   Byte
  scale  . . . . . . . . . . . .              2D   Byte
  Ofssize  . . . . . . . . . . .              2E   Byte
  flags  . . . . . . . . . . . .              2F   Byte
  sym  . . . . . . . . . . . . .              30   LPASYM
  mbr  . . . . . . . . . . . . .              34   LPASYM
  _type  . . . . . . . . . . . .              38   LPASYM
format_options . . . . . . . . .               C (4)
  init . . . . . . . . . . . . .               0   DWord
  invalid_fixup_type . . . . . .               4   Word
  formatname . . . . . . . . . .               6   Byte[6]
global_options . . . . . . . . .              84 (4)
  quiet  . . . . . . . . . . . .               0   Byte
  line_numbers . . . . . . . . .               1   Byte
  debug_symbols  . . . . . . . .               2   Byte
  debug_ext  . . . . . . . . . .               3   Byte
  floating_point . . . . . . . .               4   DWord
  error_limit  . . . . . . . . .               8   DWord
  no_error_disp  . . . . . . . .               C   Byte
  warning_level  . . . . . . . .               D   Byte
  warning_error  . . . . . . . .               E   Byte
  process_subdir . . . . . . . .               F   Byte
  names  . . . . . . . . . . . .              10   DWord[9]
  queues . . . . . . . . . . . .              34   DWord[3]
  no_comment_in_code_rec . . . .              40   Byte
  no_opt_farcall . . . . . . . .              41   Byte
  no_file_entry  . . . . . . . .              42   Byte
  no_static_procs  . . . . . . .              43   Byte
  no_section_aux_entry . . . . .              44   Byte
  no_cdecl_decoration  . . . . .              45   Byte
  stdcall_decoration . . . . . .              46   Byte
  no_export_decoration . . . . .              47   Byte
  entry_decorated  . . . . . . .              48   Byte
  write_listing  . . . . . . . .              49   Byte
  write_impdef . . . . . . . . .              4A   Byte
  case_sensitive . . . . . . . .              4B   Byte
  convert_uppercase  . . . . . .              4C   Byte
  preprocessor_stdout  . . . . .              4D   Byte
  masm51_compat  . . . . . . . .              4E   Byte
  strict_masm_compat . . . . . .              4F   Byte
  masm_compat_gencode  . . . . .              50   Byte
  masm8_proc_visibility  . . . .              51   Byte
  listif . . . . . . . . . . . .              52   Byte
  list_generated_code  . . . . .              53   Byte
  list_macro . . . . . . . . . .              54   DWord
  no_symbol_listing  . . . . . .              58   Byte
  first_pass_listing . . . . . .              59   Byte
  all_symbols_public . . . . . .              5A   Byte
  safeseh  . . . . . . . . . . .              5B   Byte
  ignore_include . . . . . . . .              5C   Byte
  output_format  . . . . . . . .              60   DWord
  sub_format . . . . . . . . . .              64   DWord
  fieldalign . . . . . . . . . .              68   Byte
  langtype . . . . . . . . . . .              6C   DWord
  _model . . . . . . . . . . . .              70   DWord
  cpu  . . . . . . . . . . . . .              74   DWord
  fctype . . . . . . . . . . . .              78   DWord
  syntax_check_only  . . . . . .              7C   Byte
  asmc_syntax  . . . . . . . . .              7D   Byte
  c_stack_frame  . . . . . . . .              7E   Byte
  hll_switch . . . . . . . . . .              7F   Byte
  loopalign  . . . . . . . . . .              80   Byte
  casealign  . . . . . . . . . .              81   Byte
  wstring  . . . . . . . . . . .              82   Byte
grp_info . . . . . . . . . . . .              10 (4)
  seglist  . . . . . . . . . . .               0   DWord
  grp_idx  . . . . . . . . . . .               4   DWord
  lname_idx  . . . . . . . . . .               8   DWord
  numseg . . . . . . . . . . . .               C   DWord
input_status . . . . . . . . . .              14 (4)
  token_stringbuf  . . . . . . .               0   LPSTR
  currsource . . . . . . . . . .               4   LPSTR
  CurrComment  . . . . . . . . .               8   LPSTR
  token_count  . . . . . . . . .               C   DWord
  line_flags . . . . . . . . . .              10   Byte
line_item  . . . . . . . . . . .              18 (4)
  next . . . . . . . . . . . . .               0   LPLINE
  prev . . . . . . . . . . . . .               4   LPLINE
  lineno . . . . . . . . . . . .               8   DWord
  srcfile  . . . . . . . . . . .               C   DWord
  list_pos . . . . . . . . . . .              10   DWord
  line . . . . . . . . . . . . .              14   Byte[1]
line_num_info  . . . . . . . . .              10 (4)
  next . . . . . . . . . . . . .               0   DWord
  number . . . . . . . . . . . .               4   DWord
   . . . . . . . . . . . . . . .               8
    _offset  . . . . . . . . . .               8   DWord
    line_number  . . . . . . . .               8   DWord
   . . . . . . . . . . . . . . .               C
    srcfile  . . . . . . . . . .               C   DWord
    sym  . . . . . . . . . . . .               C   DWord
macro_info . . . . . . . . . . .              10 (4)
  parmcnt  . . . . . . . . . . .               0   Word
   . . . . . . . . . . . . . . .               2
    localcnt . . . . . . . . . .               2   Word
    autoexp  . . . . . . . . . .               2   Word
  parmlist . . . . . . . . . . .               4   DWord
  datap  . . . . . . . . . . . .               8   DWord
  srcfile  . . . . . . . . . . .               C   DWord
mod_state  . . . . . . . . . . .             1A4 (4)
  init . . . . . . . . . . . . .               0   DWord
  head . . . . . . . . . . . . .               4   DWord
  tail . . . . . . . . . . . . .               8   DWord
  modinfo  . . . . . . . . . . .               C   Byte[408]
module_info  . . . . . . . . . .             244 (4)
  error_count  . . . . . . . . .               0   DWord
  warning_count  . . . . . . . .               4   DWord
  num_segs . . . . . . . . . . .               8   DWord
  PubQueue . . . . . . . . . . .               C   qdesc
  Lnam . . . . . . . . . . . . .              14   qdesc
  SafeSEHQueue . . . . . . . . .              1C   qdesc
  LibQueue . . . . . . . . . . .              24   qdesc
  DllQueue . . . . . . . . . . .              2C   DWord
  imp_prefix . . . . . . . . . .              30   DWord
  curr_file  . . . . . . . . . .              34   DWord[4]
  curr_fname . . . . . . . . . .              44   DWord[4]
  FNames . . . . . . . . . . . .              54   DWord
  cnt_fnames . . . . . . . . . .              58   DWord
  IncludePath  . . . . . . . . .              5C   DWord
  line_queue . . . . . . . . . .              60   qdesc
  src_stack  . . . . . . . . . .              68   DWord
   . . . . . . . . . . . . . . .              6C
    start_fixup  . . . . . . . .              6C   DWord
    start_label  . . . . . . . .              6C   DWord
  start_displ  . . . . . . . . .              70   DWord
  StrStack . . . . . . . . . . .              74   DWord
  HllStack . . . . . . . . . . .              78   DWord
  HllFree  . . . . . . . . . . .              7C   DWord
  ContextStack . . . . . . . . .              80   DWord
  ContextFree  . . . . . . . . .              84   DWord
  SavedContexts  . . . . . . . .              88   DWord
  cntSavedContexts . . . . . . .              8C   DWord
  anonymous_label  . . . . . . .              90   DWord
  StackBase  . . . . . . . . . .              94   DWord
  ProcStatus . . . . . . . . . .              98   DWord
  WriteModule  . . . . . . . . .              9C   DWord
  EndDirHook . . . . . . . . . .              A0   DWord
  Pass1Checks  . . . . . . . . .              A4   DWord
  pe_flags . . . . . . . . . . .              A8   DWord
  proc_prologue  . . . . . . . .              AC   DWord
  proc_epilogue  . . . . . . . .              B0   DWord
  CurrDll  . . . . . . . . . . .              B4   DWord
  fmtopt . . . . . . . . . . . .              B8   DWord
  hll_label  . . . . . . . . . .              BC   DWord
  distance . . . . . . . . . . .              C0   Byte
  _model . . . . . . . . . . . .              C1   Byte
  langtype . . . . . . . . . . .              C2   Byte
  ostype . . . . . . . . . . . .              C3   Byte
  sub_format . . . . . . . . . .              C4   Byte
  fctype . . . . . . . . . . . .              C5   Byte
  segorder . . . . . . . . . . .              C6   Byte
  offsettype . . . . . . . . . .              C7   Byte
  cpu  . . . . . . . . . . . . .              C8   DWord
  curr_cpu . . . . . . . . . . .              CC   DWord
  radix  . . . . . . . . . . . .              D0   Byte
  fieldalign . . . . . . . . . .              D1   Byte
  line_flags . . . . . . . . . .              D2   Byte
  procalign  . . . . . . . . . .              D3   Byte
  list_macro . . . . . . . . . .              D4   DWord
  Ofssize  . . . . . . . . . . .              D8   Byte
  defOfssize . . . . . . . . . .              D9   Byte
  wordsize . . . . . . . . . . .              DA   Byte
  inside_comment . . . . . . . .              DB   Byte
  case_sensitive . . . . . . . .              DC   Byte
  convert_uppercase  . . . . . .              DD   Byte
  procs_private  . . . . . . . .              DE   Byte
  procs_export . . . . . . . . .              DF   Byte
  dotname  . . . . . . . . . . .              E0   Byte
  ljmp . . . . . . . . . . . . .              E1   Byte
  m510 . . . . . . . . . . . . .              E2   Byte
  scoped . . . . . . . . . . . .              E3   Byte
  oldstructs . . . . . . . . . .              E4   Byte
  emulator . . . . . . . . . . .              E5   Byte
  setif2 . . . . . . . . . . . .              E6   Byte
  list . . . . . . . . . . . . .              E7   Byte
  cref . . . . . . . . . . . . .              E8   Byte
  listif . . . . . . . . . . . .              E9   Byte
  list_generated_code  . . . . .              EA   Byte
  StartupDirectiveFound  . . . .              EB   Byte
  EndDirFound  . . . . . . . . .              EC   Byte
  frame_auto . . . . . . . . . .              ED   Byte
  NoSignExtend . . . . . . . . .              EE   Byte
  asmc_syntax  . . . . . . . . .              EF   Byte
   . . . . . . . . . . . . . . .              F0
     . . . . . . . . . . . . . .              F0
      elf_osabi  . . . . . . . .              F0   Byte
      win64_flags  . . . . . . .              F1   Byte
     . . . . . . . . . . . . . .              F0
      mz_ofs_fixups  . . . . . .              F0   Word
      mz_alignment . . . . . . .              F2   Word
      mz_heapmin . . . . . . . .              F4   Word
      mz_heapmax . . . . . . . .              F6   Word
  simseg_init  . . . . . . . . .              F8   Byte
  simseg_defd  . . . . . . . . .              F9   Byte
  PhaseError . . . . . . . . . .              FA   Byte
  CommentDataInCode  . . . . . .              FB   Byte
  prologuemode . . . . . . . . .              FC   Byte
  epiloguemode . . . . . . . . .              FD   Byte
  invoke_exprparm  . . . . . . .              FE   Byte
  cv_opt . . . . . . . . . . . .              FF   Byte
  srcfile  . . . . . . . . . . .             100   DWord
  currseg  . . . . . . . . . . .             104   DWord
  flat_grp . . . . . . . . . . .             108   DWord
  pCodeBuff  . . . . . . . . . .             10C   DWord
  GeneratedCode  . . . . . . . .             110   DWord
  currsource . . . . . . . . . .             114   DWord
  CurrComment  . . . . . . . . .             118   DWord
  tokenarray . . . . . . . . . .             11C   DWord
  stringbufferend  . . . . . . .             120   DWord
  token_count  . . . . . . . . .             124   DWord
  basereg  . . . . . . . . . . .             128   DWord[3]
  _name  . . . . . . . . . . . .             134   Byte[260]
  c_stack_frame  . . . . . . . .             238   Byte
  hll_switch . . . . . . . . . .             239   Byte
  loopalign  . . . . . . . . . .             23A   Byte
  casealign  . . . . . . . . . .             23B   Byte
  assert_proc  . . . . . . . . .             23C   DWord
  wstring  . . . . . . . . . . .             240   Byte
module_vars  . . . . . . . . . .              AC (4)
  error_count  . . . . . . . . .               0   DWord
  warning_count  . . . . . . . .               4   DWord
  num_segs . . . . . . . . . . .               8   DWord
  PubQueue . . . . . . . . . . .               C   qdesc
  Lnam . . . . . . . . . . . . .              14   qdesc
  SafeSEHQueue . . . . . . . . .              1C   qdesc
  LibQueue . . . . . . . . . . .              24   qdesc
  DllQueue . . . . . . . . . . .              2C   DWord
  imp_prefix . . . . . . . . . .              30   DWord
  curr_file  . . . . . . . . . .              34   DWord[4]
  curr_fname . . . . . . . . . .              44   DWord[4]
  FNames . . . . . . . . . . . .              54   DWord
  cnt_fnames . . . . . . . . . .              58   DWord
  IncludePath  . . . . . . . . .              5C   DWord
  line_queue . . . . . . . . . .              60   qdesc
  src_stack  . . . . . . . . . .              68   DWord
   . . . . . . . . . . . . . . .              6C
    start_fixup  . . . . . . . .              6C   DWord
    start_label  . . . . . . . .              6C   DWord
  start_displ  . . . . . . . . .              70   DWord
  StrStack . . . . . . . . . . .              74   DWord
  HllStack . . . . . . . . . . .              78   DWord
  HllFree  . . . . . . . . . . .              7C   DWord
  ContextStack . . . . . . . . .              80   DWord
  ContextFree  . . . . . . . . .              84   DWord
  SavedContexts  . . . . . . . .              88   DWord
  cntSavedContexts . . . . . . .              8C   DWord
  anonymous_label  . . . . . . .              90   DWord
  StackBase  . . . . . . . . . .              94   DWord
  ProcStatus . . . . . . . . . .              98   DWord
  WriteModule  . . . . . . . . .              9C   DWord
  EndDirHook . . . . . . . . . .              A0   DWord
  Pass1Checks  . . . . . . . . .              A4   DWord
  pe_flags . . . . . . . . . . .              A8   DWord
mparm_list . . . . . . . . . . .               8 (4)
  deflt  . . . . . . . . . . . .               0   DWord
  required . . . . . . . . . . .               4   Byte
proc_info  . . . . . . . . . . .              2C (4)
  regslist . . . . . . . . . . .               0   Byte
  paralist . . . . . . . . . . .               4   DWord
  locallist  . . . . . . . . . .               8   DWord
  labellist  . . . . . . . . . .               C   DWord
  parasize . . . . . . . . . . .              10   DWord
  localsize  . . . . . . . . . .              14   DWord
  rologuearg . . . . . . . . . .              18   DWord
  exc_handler  . . . . . . . . .              1C   DWord
  ReservedStack  . . . . . . . .              20   DWord
  prolog_list_pos  . . . . . . .              24   DWord
  flags  . . . . . . . . . . . .              28   Byte
  size_prolog  . . . . . . . . .              29   Byte
  basereg  . . . . . . . . . . .              2A   Word
qdesc  . . . . . . . . . . . . .               8 (4)
  head . . . . . . . . . . . . .               0   DWord
  tail . . . . . . . . . . . . .               4   DWord
qditem . . . . . . . . . . . . .               8 (4)
  next . . . . . . . . . . . . .               0   DWord
  _size  . . . . . . . . . . . .               4   DWord
qitem  . . . . . . . . . . . . .               8 (4)
  next . . . . . . . . . . . . .               0   DWord
  value  . . . . . . . . . . . .               4   Byte
qnode  . . . . . . . . . . . . .               8 (4)
  next . . . . . . . . . . . . .               0   DWord
   . . . . . . . . . . . . . . .               4
    elmt . . . . . . . . . . . .               4   DWord
    sym  . . . . . . . . . . . .               4   DWord
seg_info . . . . . . . . . . . .              4C (4)
  sgroup . . . . . . . . . . . .               0   DWord
  start_loc  . . . . . . . . . .               4   DWord
   . . . . . . . . . . . . . . .               8
    current_loc  . . . . . . . .               8   DWord
    reloc_offset . . . . . . . .               8   DWord
    start_offset . . . . . . . .               8   DWord
  CodeBuffer . . . . . . . . . .               C   DWord
  bytes_written  . . . . . . . .              10   DWord
   . . . . . . . . . . . . . . .              14
    label_list . . . . . . . . .              14   DWord
    flushfunc  . . . . . . . . .              14   DWord
   . . . . . . . . . . . . . . .              18
    head . . . . . . . . . . . .              18   DWord
    tail . . . . . . . . . . . .              1C   DWord
   . . . . . . . . . . . . . . .              20
    LinnumQueue  . . . . . . . .              20   DWord
    fileoffset . . . . . . . . .              20   DWord
    num_linnums  . . . . . . . .              20   DWord
  num_relocs . . . . . . . . . .              24   DWord
  seg_idx  . . . . . . . . . . .              28   DWord
  segtype  . . . . . . . . . . .              2C   DWord
  lname_idx  . . . . . . . . . .              30   DWord
  clsym  . . . . . . . . . . . .              34   DWord
   . . . . . . . . . . . . . . .              38
    abs_frame  . . . . . . . . .              38   DWord
    comdat_number  . . . . . . .              38   DWord
    comdat_idx . . . . . . . . .              38   DWord
   . . . . . . . . . . . . . . .              3C
    abs_offset . . . . . . . . .              3C   DWord
    aliasname  . . . . . . . . .              3C   DWord
  Ofssize  . . . . . . . . . . .              40   Byte
  characteristics  . . . . . . .              41   Byte
  alignment  . . . . . . . . . .              42   Byte
  readonly . . . . . . . . . . .              43   Byte
  info . . . . . . . . . . . . .              44   Byte
  force32  . . . . . . . . . . .              45   Byte
  data_in_code . . . . . . . . .              46   Byte
  internal . . . . . . . . . . .              47   Byte
  written  . . . . . . . . . . .              48   Byte
  linnum_init  . . . . . . . . .              49   Byte
  combine  . . . . . . . . . . .              4A   Byte
  comdat_selection . . . . . . .              4B   Byte
seg_item . . . . . . . . . . . .               8 (4)
  next . . . . . . . . . . . . .               0   DWord
  iseg . . . . . . . . . . . . .               4   DWord
sfield . . . . . . . . . . . . .              38 (4)
  sym  . . . . . . . . . . . . .               0   asym
  next . . . . . . . . . . . . .              30   DWord
  ivalue . . . . . . . . . . . .              34   Byte
src_item . . . . . . . . . . . .              10 (4)
  next . . . . . . . . . . . . .               0   DWord
  _type  . . . . . . . . . . . .               4   Word
  srcfile  . . . . . . . . . . .               6   Word
   . . . . . . . . . . . . . . .               8
    content  . . . . . . . . . .               8   DWord
    file . . . . . . . . . . . .               8   DWord
    mi . . . . . . . . . . . . .               8   DWord
  line_num . . . . . . . . . . .               C   DWord
srcline  . . . . . . . . . . . .               8 (4)
  next . . . . . . . . . . . . .               0   DWord
  ph_count . . . . . . . . . . .               4   Byte
  line1  . . . . . . . . . . . .               5   Byte
struct_info  . . . . . . . . . .               C (4)
  head . . . . . . . . . . . . .               0   DWord
  tail . . . . . . . . . . . . .               4   DWord
  alignment  . . . . . . . . . .               8   Byte
  flags  . . . . . . . . . . . .               9   Byte
symbol_queue . . . . . . . . . .               8 (4)
  head . . . . . . . . . . . . .               0   DWord
  tail . . . . . . . . . . . . .               4   DWord


Types:

                N a m e                 Size    Attr

FILE . . . . . . . . . . . . . .          32  _iobuf
HANDLE . . . . . . . . . . . . .           4  Near32 Ptr 
LPASYM . . . . . . . . . . . . .           4  Near32 Ptr asym
LPBYTE . . . . . . . . . . . . .           4  Near32 Ptr Byte
LPDSYM . . . . . . . . . . . . .           4  Near32 Ptr dsym
LPDWORD  . . . . . . . . . . . .           4  Near32 Ptr DWord
LPFILE . . . . . . . . . . . . .           4  Near32 Ptr _iobuf
LPINPUT  . . . . . . . . . . . .           4  Near32 Ptr input_status
LPLINE . . . . . . . . . . . . .           4  Near32 Ptr line_item
LPQSORTCMD . . . . . . . . . . .           4  Near32 Ptr 
LPQWORD  . . . . . . . . . . . .           4  Near32 Ptr QWord
LPSTR  . . . . . . . . . . . . .           4  Near32 Ptr Byte
LPTOKEN  . . . . . . . . . . . .           4  Near32 Ptr asm_tok
LPTSTR . . . . . . . . . . . . .           4  Near32 Ptr Word
LPWORD . . . . . . . . . . . . .           4  Near32 Ptr Word
LPWSTR . . . . . . . . . . . . .           4  Near32 Ptr Word
PVOID  . . . . . . . . . . . . .           4  Near32 Ptr 
QSORTCMD_T . . . . . . . . . . .           4  Proc L Near32 STDCALL
SINT . . . . . . . . . . . . . .           4  DWord
SIZE_T . . . . . . . . . . . . .           4  DWord
TCHAR  . . . . . . . . . . . . .           2  Word
UINT . . . . . . . . . . . . . .           4  DWord
ULONG  . . . . . . . . . . . . .           4  DWord
size_t . . . . . . . . . . . . .           4  DWord
wchar_t  . . . . . . . . . . . .           2  Word
wctype_t . . . . . . . . . . . .           2  Word
wint_t . . . . . . . . . . . . .           2  Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .        GROUP
_DATA  . . . . . . . . . . . . .        32 Bit   000021EB Para    Public  'DATA'
_TEXT  . . . . . . . . . . . . .        32 Bit   00000372 Para    Public  'CODE'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

AddLineQueueX  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
AddStringToIncludePath . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
AssumeInit . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
AssumeSaveState  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ClearSrcStack  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
CondCheckOpen  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
CondInit . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ContextInit  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ContextSaveState . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
DelayExpand  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External FASTCALL
DisableKeyword . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ExprEvalInit . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
FastpassInit . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
FreeLineStore  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
GetCurrOffset  . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
GetEnvironmentPATH . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
GetEnvironmentSize . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
GetEnvironmentTEMP . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
GetLineNumber  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
HllCheckOpen . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
HllInit  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
InputFini  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
InputInit  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
InputPassInit  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
LabelInit  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
LclAlloc . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External FASTCALL
LinnumFini . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
LinnumInit . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
LstInit  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
LstNL  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
LstPrintf  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  C
LstSetPosition . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
LstWrite . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
LstWriteCRef . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
LstWriteSrcLine  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
MacroInit  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
Mangle . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
MemAlloc . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External FASTCALL
MemFini  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
MemInit  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ParseLine  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
PopInputStatus . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
PreprocessLine . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
PrintNote  . . . . . . . . . . .        P Near   0000034A _TEXT    00000028 Public   C
  value  . . . . . . . . . . . .        DWord             ebp + 0008
  args . . . . . . . . . . . . .        VARARG            ebp + 000C
  erbuf  . . . . . . . . . . . .        Byte[512]         ebp - 0200
ProcInit . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ProcessFile  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
PushInputStatus  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
QueueDeleteLinnum  . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ReadEnvironment  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ResWordsFini . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ResWordsInit . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
RestoreState . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
RunLineQueue . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SaveEnvironment  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SaveVariableState  . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SearchFile . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SegmentFini  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SegmentInit  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SegmentSaveState . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SetCPU . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SetMangle  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SkipSavedState . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
StoreLine  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SymCreate  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SymFind  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External FASTCALL
SymInit  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SymMakeAllSymbolsPublic  . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SymPassInit  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
SymSetCmpFunc  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
Tokenize . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
TypesInit  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
WriteError . . . . . . . . . . .        P Near   00000336 _TEXT    00000014 Public   STDCALL
__FTToTime . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_access  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_atoi64  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_atoow . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_chsize  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_close . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_creat . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_eof . . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_fgetwchar . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_filbuf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_filelength  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_filwbuf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_findclose . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_findfirst . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_findnext  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_flsbuf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_flswbuf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_fputwchar . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_freebuf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_ftbuf . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_getbuf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_getst . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_getws . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_isatty  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_itow  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_lseek . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_lseeki64  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_ltow  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_mbspbrk . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_memicmp . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_open  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
_osopen  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_output  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
_print . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  C
_putws . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_read  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_snwprintf . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
_sopen . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
_stbuf . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_stricmp . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_strlwr  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_strnicmp  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_strrev  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_strupr  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_tell  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_ultow . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_vsnwprintf  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_waccess . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wchmod  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcreat  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsdup  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsicmp . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsicoll  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcslwr  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsncoll  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsnicmp  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsnicoll . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsnset . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsrev  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsset  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wcsupr  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wfdopen . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wfindfirst  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wfindnext . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wfopen  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wfreopen  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wfsopenproto  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wgetenv . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wgetfattr . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wopen . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
_wosopen . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_woutput . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wperror . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wpopen  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wremove . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wrename . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_write . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wsopen  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
_wsystem . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wtempnam  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wtmpnam . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wtoi  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wtol  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_wunlink . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
_xtoi64  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
abort  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
asmerr . . . . . . . . . . . . .        P Near   000000F9 _TEXT    0000023D Public   C
  value  . . . . . . . . . . . .        DWord             ebp + 0008
  args . . . . . . . . . . . . .        VARARG            ebp + 000C
  format . . . . . . . . . . . .        Byte[512]         ebp - 0200
  erbuf  . . . . . . . . . . . .        Byte[512]         ebp - 0400
  @C000D . . . . . . . . . . . .        L Near   000001BB _TEXT
  @C000E . . . . . . . . . . . .        L Near   000001C1 _TEXT
  @C000F . . . . . . . . . . . .        L Near   000001D6 _TEXT
  @C000A . . . . . . . . . . . .        L Near   000001BD _TEXT
  @C000B . . . . . . . . . . . .        L Near   000001BD _TEXT
  @C000C . . . . . . . . . . . .        L Near   000001AB _TEXT
  @C001D . . . . . . . . . . . .        L Near   00000315 _TEXT
  @C001E . . . . . . . . . . . .        L Near   0000032F _TEXT
  @C001A . . . . . . . . . . . .        L Near   000002CC _TEXT
  @C001B . . . . . . . . . . . .        L Near   000002DB _TEXT
  @C001C . . . . . . . . . . . .        L Near   000002DD _TEXT
  @C0007 . . . . . . . . . . . .        L Near   00000147 _TEXT
  @C0008 . . . . . . . . . . . .        L Near   00000165 _TEXT
  @C0009 . . . . . . . . . . . .        L Near   00000178 _TEXT
  quit . . . . . . . . . . . . .        L Near   000002FD _TEXT
  toend  . . . . . . . . . . . .        L Near   000002DD _TEXT
  @C0014 . . . . . . . . . . . .        L Near   00000233 _TEXT
  @C0015 . . . . . . . . . . . .        L Near   000002A6 _TEXT
  @C0016 . . . . . . . . . . . .        L Near   0000029E _TEXT
  @C0017 . . . . . . . . . . . .        L Near   000002A4 _TEXT
  @C0010 . . . . . . . . . . . .        L Near   000001F6 _TEXT
  error  . . . . . . . . . . . .        L Near   000002EB _TEXT
  @C0011 . . . . . . . . . . . .        L Near   000001EB _TEXT
  @C0012 . . . . . . . . . . . .        L Near   00000218 _TEXT
  @C0013 . . . . . . . . . . . .        L Near   00000220 _TEXT
  @C0018 . . . . . . . . . . . .        L Near   000002AC _TEXT
  @C0019 . . . . . . . . . . . .        L Near   000002CC _TEXT
atol . . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
bin_init . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
cmpwarg  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
cmpwargs . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
coff_init  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
dostounix  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
elf_init . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
exit . . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
expenviron . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fclose . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
feof . . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fflush . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fgetc  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fgets  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fgetwc . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fgetws . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
filexist . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fopen  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
fprintf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
fputc  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fputs  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fputwc . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fputws . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fread  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
free . . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
fseek  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ftell  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ftobufin . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
fwprintf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
fwrite . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
fwscanf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
getenv . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getenvp  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getfattr . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getftime . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getftime_access  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getftime_create  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getosfhnd  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getwc  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
getwchar . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
islabel  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
islabel0 . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
longjmp  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  C
malloc . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
mbstowcs . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
mbtowc . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memchr . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memcmp . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memcpy . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memmove  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memquote . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memrchr  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memset . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memstri  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memxchg  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
memzero  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
mkbstring  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
omf_FlushCurrSeg . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
omf_OutSelect  . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
omf_init . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
omf_set_filepos  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
osmaperr . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
osopen . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
osread . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
oswrite  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
pe_create_PE_header  . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
perror . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
print_err  . . . . . . . . . . .        P Near   00000000 _TEXT    000000F9 Private  STDCALL
  erbuf  . . . . . . . . . . . .        DWord             ebp + 0008
  format . . . . . . . . . . . .        DWord             ebp + 000C
  args . . . . . . . . . . . . .        DWord             ebp + 0010
  iob  . . . . . . . . . . . . .        _iobuf            ebp - 0020
  @C0004 . . . . . . . . . . . .        L Near   00000093 _TEXT
  @C0005 . . . . . . . . . . . .        L Near   000000F0 _TEXT
  @C0006 . . . . . . . . . . . .        L Near   000000F0 _TEXT
  @C0001 . . . . . . . . . . . .        L Near   00000051 _TEXT
  @C0002 . . . . . . . . . . . .        L Near   00000093 _TEXT
  @C0003 . . . . . . . . . . . .        L Near   0000007B _TEXT
print_source_nesting_structure .        P Near32 00000000 No Seg   00000000 External  STDCALL
printf . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
puts . . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
putwc  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
putwchar . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
qsort  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
readword . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
realloc  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
remove . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
rename . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
rewind . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
searchp  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
set_curr_srcfile . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
setbuf . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
setfattr . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
setfext  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
setftime . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
setftime_access  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
setftime_create  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
setjmp . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
setvbuf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
sprintf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  C
store_fixup  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strcat . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
strchr . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strchri  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strcmp . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strcpy . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
streol . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strext . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strfcat  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strfn  . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strins . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strlabel . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strlen . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
strmove  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strncmp  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strncpy  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strnzcpy . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strpath  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strrchr  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strspace . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strstart . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strstr . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strstri  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strtod . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strtoken . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strtolx  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strtrim  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
strxchg  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
swprintf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
swscanf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
sym_remove_table . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
system . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ungetc . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
ungetwc  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
unixtodos  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
vfprintf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
vfwprintf  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
vsprintf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
vswprintf  . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
vwprintf . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcscat . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcschr . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcscmp . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcscoll  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcscpy . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcscspn  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsdup . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsicmp  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsicoll . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcslen . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcslwr . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsncat  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsncmp  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsncpy  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsnicmp . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsnset  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcspbrk  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsrchr  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsrev . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsset . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsspn . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsstr . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcstod . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcstok . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcstol . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcstoul  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsupr . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wcsxfrm  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wosopen  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL
wprintf  . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
write_logo . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 External  STDCALL
wscanf . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External C
xtol . . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External STDCALL


Symbols:

                N a m e                 Type       Value     Attr

@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             3h 
@Model . . . . . . . . . . . . .        Number             7h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   FLAT
@stack . . . . . . . . . . . . .        Text   FLAT
A1000  . . . . . . . . . . . . .        Byte[22]          19h _DATA STDCALL
A1001  . . . . . . . . . . . . .        Byte[28]          2Fh _DATA STDCALL
A1002  . . . . . . . . . . . . .        Byte[28]          4Bh _DATA STDCALL
A1005  . . . . . . . . . . . . .        Byte[50]          67h _DATA STDCALL
A1006  . . . . . . . . . . . . .        Byte[32]          99h _DATA STDCALL
A1007  . . . . . . . . . . . . .        Byte[23]          B9h _DATA STDCALL
A1008  . . . . . . . . . . . . .        Byte[24]          D0h _DATA STDCALL
A1009  . . . . . . . . . . . . .        Byte[14]          E8h _DATA STDCALL
A1010  . . . . . . . . . . . . .        Byte[29]          F6h _DATA STDCALL
A1011  . . . . . . . . . . . . .        Byte[35]         113h _DATA STDCALL
A1012  . . . . . . . . . . . . .        Byte[43]         136h _DATA STDCALL
A1017  . . . . . . . . . . . . .        Byte[24]         161h _DATA STDCALL
A1901  . . . . . . . . . . . . .        Text   INTER
A2002  . . . . . . . . . . . . .        Byte[53]         179h _DATA STDCALL
A2004  . . . . . . . . . . . . .        Byte[26]         1AEh _DATA STDCALL
A2005  . . . . . . . . . . . . .        Byte[25]         1C8h _DATA STDCALL
A2006  . . . . . . . . . . . . .        Byte[22]         1E1h _DATA STDCALL
A2007  . . . . . . . . . . . . .        Byte[39]         1F7h _DATA STDCALL
A2008  . . . . . . . . . . . . .        Byte[18]         21Eh _DATA STDCALL
A2009  . . . . . . . . . . . . .        Byte[27]         230h _DATA STDCALL
A2010  . . . . . . . . . . . . .        Byte[24]         24Bh _DATA STDCALL
A2011  . . . . . . . . . . . . .        Byte[50]         263h _DATA STDCALL
A2012  . . . . . . . . . . . . .        Byte[58]         295h _DATA STDCALL
A2013  . . . . . . . . . . . . .        Byte[35]         2CFh _DATA STDCALL
A2014  . . . . . . . . . . . . .        Byte[41]         2F2h _DATA STDCALL
A2015  . . . . . . . . . . . . .        Byte[38]         31Bh _DATA STDCALL
A2016  . . . . . . . . . . . . .        Byte[20]         341h _DATA STDCALL
A2018  . . . . . . . . . . . . .        Byte[36]         355h _DATA STDCALL
A2019  . . . . . . . . . . . . .        Byte[37]         379h _DATA STDCALL
A2022  . . . . . . . . . . . . .        Byte[53]         39Eh _DATA STDCALL
A2023  . . . . . . . . . . . . .        Byte[35]         3D3h _DATA STDCALL
A2024  . . . . . . . . . . . . .        Byte[37]         3F6h _DATA STDCALL
A2025  . . . . . . . . . . . . .        Byte[33]         41Bh _DATA STDCALL
A2026  . . . . . . . . . . . . .        Byte[18]         43Ch _DATA STDCALL
A2028  . . . . . . . . . . . . .        Byte[34]         44Eh _DATA STDCALL
A2029  . . . . . . . . . . . . .        Byte[36]         470h _DATA STDCALL
A2030  . . . . . . . . . . . . .        Byte[37]         494h _DATA STDCALL
A2031  . . . . . . . . . . . . .        Byte[31]         4B9h _DATA STDCALL
A2032  . . . . . . . . . . . . .        Byte[24]         4D8h _DATA STDCALL
A2033  . . . . . . . . . . . . .        Byte[29]         4F0h _DATA STDCALL
A2034  . . . . . . . . . . . . .        Byte[25]         50Dh _DATA STDCALL
A2036  . . . . . . . . . . . . .        Byte[42]         526h _DATA STDCALL
A2037  . . . . . . . . . . . . .        Byte[50]         550h _DATA STDCALL
A2039  . . . . . . . . . . . . .        Text   A1009
A2041  . . . . . . . . . . . . .        Byte[32]         582h _DATA STDCALL
A2043  . . . . . . . . . . . . .        Byte[20]         5A2h _DATA STDCALL
A2045  . . . . . . . . . . . . .        Byte[42]         5B6h _DATA STDCALL
A2046  . . . . . . . . . . . . .        Byte[50]         5E0h _DATA STDCALL
A2047  . . . . . . . . . . . . .        Byte[20]         612h _DATA STDCALL
A2048  . . . . . . . . . . . . .        Byte[24]         626h _DATA STDCALL
A2050  . . . . . . . . . . . . .        Byte[31]         63Eh _DATA STDCALL
A2051  . . . . . . . . . . . . .        Byte[19]         65Dh _DATA STDCALL
A2052  . . . . . . . . . . . . .        Byte[18]         670h _DATA STDCALL
A2053  . . . . . . . . . . . . .        Byte[41]         682h _DATA STDCALL
A2054  . . . . . . . . . . . . .        Byte[45]         6ABh _DATA STDCALL
A2055  . . . . . . . . . . . . .        Byte[39]         6D8h _DATA STDCALL
A2056  . . . . . . . . . . . . .        Byte[35]         6FFh _DATA STDCALL
A2057  . . . . . . . . . . . . .        Byte[37]         722h _DATA STDCALL
A2058  . . . . . . . . . . . . .        Byte[43]         747h _DATA STDCALL
A2059  . . . . . . . . . . . . .        Byte[46]         772h _DATA STDCALL
A2060  . . . . . . . . . . . . .        Byte[50]         7A0h _DATA STDCALL
A2061  . . . . . . . . . . . . .        Byte[56]         7D2h _DATA STDCALL
A2062  . . . . . . . . . . . . .        Byte[37]         80Ah _DATA STDCALL
A2063  . . . . . . . . . . . . .        Byte[34]         82Fh _DATA STDCALL
A2064  . . . . . . . . . . . . .        Byte[46]         851h _DATA STDCALL
A2065  . . . . . . . . . . . . .        Byte[14]         87Fh _DATA STDCALL
A2066  . . . . . . . . . . . . .        Byte[39]         88Dh _DATA STDCALL
A2068  . . . . . . . . . . . . .        Byte[31]         8B4h _DATA STDCALL
A2070  . . . . . . . . . . . . .        Byte[29]         8D3h _DATA STDCALL
A2071  . . . . . . . . . . . . .        Byte[41]         8F0h _DATA STDCALL
A2072  . . . . . . . . . . . . .        Byte[51]         919h _DATA STDCALL
A2074  . . . . . . . . . . . . .        Byte[51]         94Ch _DATA STDCALL
A2075  . . . . . . . . . . . . .        Byte[39]         97Fh _DATA STDCALL
A2076  . . . . . . . . . . . . .        Byte[38]         9A6h _DATA STDCALL
A2077  . . . . . . . . . . . . .        Byte[52]         9CCh _DATA STDCALL
A2079  . . . . . . . . . . . . .        Byte[49]         A00h _DATA STDCALL
A2080  . . . . . . . . . . . . .        Byte[47]         A31h _DATA STDCALL
A2081  . . . . . . . . . . . . .        Byte[37]         A60h _DATA STDCALL
A2082  . . . . . . . . . . . . .        Byte[36]         A85h _DATA STDCALL
A2083  . . . . . . . . . . . . .        Byte[20]         AA9h _DATA STDCALL
A2084  . . . . . . . . . . . . .        Byte[25]         ABDh _DATA STDCALL
A2085  . . . . . . . . . . . . .        Byte[57]         AD6h _DATA STDCALL
A2086  . . . . . . . . . . . . .        Byte[23]         B0Fh _DATA STDCALL
A2087  . . . . . . . . . . . . .        Byte[36]         B26h _DATA STDCALL
A2088  . . . . . . . . . . . . .        Byte[38]         B4Ah _DATA STDCALL
A2089  . . . . . . . . . . . . .        Byte[29]         B70h _DATA STDCALL
A2090  . . . . . . . . . . . . .        Byte[24]         B8Dh _DATA STDCALL
A2091  . . . . . . . . . . . . .        Byte[31]         BA5h _DATA STDCALL
A2092  . . . . . . . . . . . . .        Byte[31]         BC4h _DATA STDCALL
A2093  . . . . . . . . . . . . .        Byte[22]         BE3h _DATA STDCALL
A2094  . . . . . . . . . . . . .        Byte[28]         BF9h _DATA STDCALL
A2095  . . . . . . . . . . . . .        Byte[39]         C15h _DATA STDCALL
A2096  . . . . . . . . . . . . .        Byte[45]         C3Ch _DATA STDCALL
A2097  . . . . . . . . . . . . .        Byte[22]         C69h _DATA STDCALL
A2098  . . . . . . . . . . . . .        Byte[27]         C7Fh _DATA STDCALL
A2100  . . . . . . . . . . . . .        Byte[29]         C9Ah _DATA STDCALL
A2101  . . . . . . . . . . . . .        Byte[34]         CB7h _DATA STDCALL
A2103  . . . . . . . . . . . . .        Byte[30]         CD9h _DATA STDCALL
A2104  . . . . . . . . . . . . .        Byte[39]         CF7h _DATA STDCALL
A2105  . . . . . . . . . . . . .        Byte[40]         D1Eh _DATA STDCALL
A2107  . . . . . . . . . . . . .        Byte[52]         D46h _DATA STDCALL
A2108  . . . . . . . . . . . . .        Byte[33]         D7Ah _DATA STDCALL
A2110  . . . . . . . . . . . . .        Byte[27]         D9Bh _DATA STDCALL
A2111  . . . . . . . . . . . . .        Byte[38]         DB6h _DATA STDCALL
A2112  . . . . . . . . . . . . .        Byte[48]         DDCh _DATA STDCALL
A2113  . . . . . . . . . . . . .        Byte[18]         E0Ch _DATA STDCALL
A2114  . . . . . . . . . . . . .        Byte[35]         E1Eh _DATA STDCALL
A2119  . . . . . . . . . . . . .        Byte[32]         E41h _DATA STDCALL
A2120  . . . . . . . . . . . . .        Byte[32]         E61h _DATA STDCALL
A2121  . . . . . . . . . . . . .        Byte[38]         E81h _DATA STDCALL
A2123  . . . . . . . . . . . . .        Byte[34]         EA7h _DATA STDCALL
A2125  . . . . . . . . . . . . .        Byte[23]         EC9h _DATA STDCALL
A2129  . . . . . . . . . . . . .        Byte[40]         EE0h _DATA STDCALL
A2131  . . . . . . . . . . . . .        Byte[47]         F08h _DATA STDCALL
A2132  . . . . . . . . . . . . .        Byte[37]         F37h _DATA STDCALL
A2133  . . . . . . . . . . . . .        Byte[37]         F5Ch _DATA STDCALL
A2136  . . . . . . . . . . . . .        Byte[29]         F81h _DATA STDCALL
A2141  . . . . . . . . . . . . .        Byte[33]         F9Eh _DATA STDCALL
A2142  . . . . . . . . . . . . .        Text   A2002
A2143  . . . . . . . . . . . . .        Byte[20]         FBFh _DATA STDCALL
A2144  . . . . . . . . . . . . .        Byte[28]         FD3h _DATA STDCALL
A2145  . . . . . . . . . . . . .        Byte[24]         FEFh _DATA STDCALL
A2147  . . . . . . . . . . . . .        Byte[29]        1007h _DATA STDCALL
A2148  . . . . . . . . . . . . .        Byte[39]        1024h _DATA STDCALL
A2151  . . . . . . . . . . . . .        Byte[41]        104Bh _DATA STDCALL
A2154  . . . . . . . . . . . . .        Byte[39]        1074h _DATA STDCALL
A2156  . . . . . . . . . . . . .        Byte[28]        109Bh _DATA STDCALL
A2157  . . . . . . . . . . . . .        Byte[26]        10B7h _DATA STDCALL
A2159  . . . . . . . . . . . . .        Byte[30]        10D1h _DATA STDCALL
A2166  . . . . . . . . . . . . .        Byte[25]        10EFh _DATA STDCALL
A2167  . . . . . . . . . . . . .        Byte[44]        1108h _DATA STDCALL
A2169  . . . . . . . . . . . . .        Byte[29]        1134h _DATA STDCALL
A2170  . . . . . . . . . . . . .        Byte[37]        1151h _DATA STDCALL
A2172  . . . . . . . . . . . . .        Byte[28]        1176h _DATA STDCALL
A2175  . . . . . . . . . . . . .        Byte[23]        1192h _DATA STDCALL
A2178  . . . . . . . . . . . . .        Byte[20]        11A9h _DATA STDCALL
A2179  . . . . . . . . . . . . .        Byte[33]        11BDh _DATA STDCALL
A2181  . . . . . . . . . . . . .        Byte[44]        11DEh _DATA STDCALL
A2187  . . . . . . . . . . . . .        Byte[36]        120Ah _DATA STDCALL
A2189  . . . . . . . . . . . . .        Byte[48]        122Eh _DATA STDCALL
A2190  . . . . . . . . . . . . .        Byte[40]        125Eh _DATA STDCALL
A2192  . . . . . . . . . . . . .        Byte[40]        1286h _DATA STDCALL
A2199  . . . . . . . . . . . . .        Byte[44]        12AEh _DATA STDCALL
A2200  . . . . . . . . . . . . .        Byte[36]        12DAh _DATA STDCALL
A2202  . . . . . . . . . . . . .        Byte[32]        12FEh _DATA STDCALL
A2206  . . . . . . . . . . . . .        Byte[31]        131Eh _DATA STDCALL
A2214  . . . . . . . . . . . . .        Byte[46]        133Dh _DATA STDCALL
A2217  . . . . . . . . . . . . .        Byte[32]        136Bh _DATA STDCALL
A3000  . . . . . . . . . . . . .        Byte[28]        138Bh _DATA STDCALL
A3001  . . . . . . . . . . . . .        Byte[31]        13A7h _DATA STDCALL
A3002  . . . . . . . . . . . . .        Byte[38]        13C6h _DATA STDCALL
A3003  . . . . . . . . . . . . .        Byte[26]        13ECh _DATA STDCALL
A3004  . . . . . . . . . . . . .        Byte[46]        1406h _DATA STDCALL
A3005  . . . . . . . . . . . . .        Byte[43]        1434h _DATA STDCALL
A3006  . . . . . . . . . . . . .        Byte[45]        145Fh _DATA STDCALL
A3007  . . . . . . . . . . . . .        Byte[23]        148Ch _DATA STDCALL
A3008  . . . . . . . . . . . . .        Byte[38]        14A3h _DATA STDCALL
A3009  . . . . . . . . . . . . .        Byte[56]        14C9h _DATA STDCALL
A3010  . . . . . . . . . . . . .        Byte[44]        1501h _DATA STDCALL
A3011  . . . . . . . . . . . . .        Byte[41]        152Dh _DATA STDCALL
A3012  . . . . . . . . . . . . .        Byte[55]        1556h _DATA STDCALL
A3013  . . . . . . . . . . . . .        Byte[19]        158Dh _DATA STDCALL
A3014  . . . . . . . . . . . . .        Byte[33]        15A0h _DATA STDCALL
A3015  . . . . . . . . . . . . .        Byte[52]        15C1h _DATA STDCALL
A3016  . . . . . . . . . . . . .        Byte[27]        15F5h _DATA STDCALL
A3017  . . . . . . . . . . . . .        Byte[33]        1610h _DATA STDCALL
A3018  . . . . . . . . . . . . .        Byte[28]        1631h _DATA STDCALL
A3019  . . . . . . . . . . . . .        Byte[50]        164Dh _DATA STDCALL
A3020  . . . . . . . . . . . . .        Text   A1000
A3021  . . . . . . . . . . . . .        Text   A1001
A3022  . . . . . . . . . . . . .        Byte[37]        167Fh _DATA STDCALL
A4003  . . . . . . . . . . . . .        Byte[53]        16A4h _DATA STDCALL
A4005  . . . . . . . . . . . . .        Byte[34]        16D9h _DATA STDCALL
A4006  . . . . . . . . . . . . .        Byte[38]        16FBh _DATA STDCALL
A4007  . . . . . . . . . . . . .        Byte[45]        1721h _DATA STDCALL
A4008  . . . . . . . . . . . . .        Byte[56]        174Eh _DATA STDCALL
A4011  . . . . . . . . . . . . .        Byte[50]        1786h _DATA STDCALL
A4012  . . . . . . . . . . . . .        Byte[62]        17B8h _DATA STDCALL
A4910  . . . . . . . . . . . . .        Text   A1000
A6003  . . . . . . . . . . . . .        Byte[28]        19FFh _DATA STDCALL
A6004  . . . . . . . . . . . . .        Byte[48]        1A1Bh _DATA STDCALL
A6005  . . . . . . . . . . . . .        Byte[47]        1A4Bh _DATA STDCALL
A7000  . . . . . . . . . . . . .        Text   A2192
A7001  . . . . . . . . . . . . .        Text   A2090
A7002  . . . . . . . . . . . . .        Text   A2133
A7003  . . . . . . . . . . . . .        Byte[36]        1A7Ah _DATA STDCALL
A7004  . . . . . . . . . . . . .        Byte[35]        1A9Eh _DATA STDCALL
A7005  . . . . . . . . . . . . .        Byte[22]        1AC1h _DATA STDCALL
A7006  . . . . . . . . . . . . .        Byte[42]        1AD7h _DATA STDCALL
A7007  . . . . . . . . . . . . .        Byte[42]        1B01h _DATA STDCALL
A7008  . . . . . . . . . . . . .        Byte[32]        1B2Bh _DATA STDCALL
A8000  . . . . . . . . . . . . .        Text   A1006
A8001  . . . . . . . . . . . . .        Text   A2167
A8002  . . . . . . . . . . . . .        Text   A2189
A8003  . . . . . . . . . . . . .        Text   A2103
A8004  . . . . . . . . . . . . .        Text   A2004
A8005  . . . . . . . . . . . . .        Byte[49]        17F6h _DATA STDCALL
A8006  . . . . . . . . . . . . .        Byte[63]        1827h _DATA STDCALL
A8007  . . . . . . . . . . . . .        Byte[33]        1866h _DATA STDCALL
A8008  . . . . . . . . . . . . .        Byte[35]        1887h _DATA STDCALL
A8009  . . . . . . . . . . . . .        Byte[23]        18AAh _DATA STDCALL
A8010  . . . . . . . . . . . . .        Byte[17]        18C1h _DATA STDCALL
A8011  . . . . . . . . . . . . .        Byte[58]        18D2h _DATA STDCALL
A8012  . . . . . . . . . . . . .        Byte[24]        190Ch _DATA STDCALL
A8013  . . . . . . . . . . . . .        Byte[47]        1924h _DATA STDCALL
A8014  . . . . . . . . . . . . .        Byte[29]        1953h _DATA STDCALL
A8015  . . . . . . . . . . . . .        Byte[37]        1970h _DATA STDCALL
A8017  . . . . . . . . . . . . .        Byte[12]        1995h _DATA STDCALL
A8018  . . . . . . . . . . . . .        Byte[43]        19A1h _DATA STDCALL
A8019  . . . . . . . . . . . . .        Byte[33]        19CCh _DATA STDCALL
A8020  . . . . . . . . . . . . .        Byte[18]        19EDh _DATA STDCALL
AP_FWAIT . . . . . . . . . . . .        Number             4h 
AP_LOCK  . . . . . . . . . . . .        Number             1h 
AP_NO_FWAIT  . . . . . . . . . .        Number             5h 
AP_REP . . . . . . . . . . . . .        Number             2h 
AP_REPxx . . . . . . . . . . . .        Number             3h 
ASM  . . . . . . . . . . . . . .        Number             0h 
ASMCFLAG_ASSERT  . . . . . . . .        Number            80h 
ASMCFLAG_OFF . . . . . . . . . .        Number             0h 
ASMCFLAG_ON  . . . . . . . . . .        Number             1h 
ASMCFLAG_PUSHF . . . . . . . . .        Number            40h 
ASMC_VERSION . . . . . . . . . .        Number            DFh 
ASMC_VERSSTR . . . . . . . . . .        Text   "2.23"
ASSUME_CS  . . . . . . . . . . .        Number             1h 
ASSUME_DS  . . . . . . . . . . .        Number             3h 
ASSUME_ES  . . . . . . . . . . .        Number             0h 
ASSUME_FS  . . . . . . . . . . .        Number             4h 
ASSUME_GS  . . . . . . . . . . .        Number             5h 
ASSUME_NOTHING . . . . . . . . .        Number     -00000002h 
ASSUME_SS  . . . . . . . . . . .        Number             2h 
A_CREATE . . . . . . . . . . . .        Number             1h 
A_CREATETRUNC  . . . . . . . . .        Number             2h 
A_OPEN . . . . . . . . . . . . .        Number             3h 
A_OPENCREATE . . . . . . . . . .        Number             4h 
A_TRUNC  . . . . . . . . . . . .        Number             5h 
BLOCK_ACTIVE . . . . . . . . . .        Number             0h 
BLOCK_DONE . . . . . . . . . . .        Number             2h 
BLOCK_INACTIVE . . . . . . . . .        Number             1h 
CHAR_BIT . . . . . . . . . . . .        Number             8h 
CHAR_MAX . . . . . . . . . . . .        Number            7Fh 
CHAR_MIN . . . . . . . . . . . .        Number     -00000080h 
CSF_GRPCHK . . . . . . . . . . .        Number             1h 
CSI_BSS  . . . . . . . . . . . .        Number             3h 
CSI_CONST  . . . . . . . . . . .        Number             2h 
CSI_DATA . . . . . . . . . . . .        Number             1h 
CSI_TEXT . . . . . . . . . . . .        Number             0h 
CVEX_MAX . . . . . . . . . . . .        Number             3h 
CVEX_MIN . . . . . . . . . . . .        Number             0h 
CVEX_NORMAL  . . . . . . . . . .        Number             2h 
CVEX_REDUCED . . . . . . . . . .        Number             1h 
CVO_STATICTLS  . . . . . . . . .        Number             1h 
DF_CEXPR . . . . . . . . . . . .        Number             1h 
DF_CGEN  . . . . . . . . . . . .        Number           100h 
DF_LABEL . . . . . . . . . . . .        Number             8h 
DF_NOCONCAT  . . . . . . . . . .        Number            20h 
DF_NOEXPAND  . . . . . . . . . .        Number             4h 
DF_NOSTRUC . . . . . . . . . . .        Number            10h 
DF_PROC  . . . . . . . . . . . .        Number            40h 
DF_STORE . . . . . . . . . . . .        Number            80h 
DF_STRPARM . . . . . . . . . . .        Number             2h 
DRT_ALIAS  . . . . . . . . . . .        Number            2Dh 
DRT_ALIGN  . . . . . . . . . . .        Number            27h 
DRT_ASSUME . . . . . . . . . . .        Number            2Bh 
DRT_CATSTR . . . . . . . . . . .        Number             5h 
DRT_COMM . . . . . . . . . . . .        Number            1Dh 
DRT_CONDDIR  . . . . . . . . . .        Number             0h 
DRT_CONTEXT  . . . . . . . . . .        Number            35h 
DRT_CPU  . . . . . . . . . . . .        Number             Bh 
DRT_DATADIR  . . . . . . . . . .        Number             8h 
DRT_ECHO . . . . . . . . . . . .        Number            2Eh 
DRT_END  . . . . . . . . . . . .        Number             9h 
DRT_ENDP . . . . . . . . . . . .        Number            23h 
DRT_ENDS . . . . . . . . . . . .        Number            29h 
DRT_EQU  . . . . . . . . . . . .        Number            2Fh 
DRT_EQUALSGN . . . . . . . . . .        Number            30h 
DRT_ERRDIR . . . . . . . . . . .        Number             Ah 
DRT_EXCFRAME . . . . . . . . . .        Number            19h 
DRT_EXTERN . . . . . . . . . . .        Number            1Eh 
DRT_EXTERNDEF  . . . . . . . . .        Number            1Fh 
DRT_GROUP  . . . . . . . . . . .        Number            2Ah 
DRT_HLLEND . . . . . . . . . . .        Number            12h 
DRT_HLLEXIT  . . . . . . . . . .        Number            11h 
DRT_HLLSTART . . . . . . . . . .        Number            10h 
DRT_INCBIN . . . . . . . . . . .        Number            31h 
DRT_INCLIB . . . . . . . . . . .        Number            32h 
DRT_INCLUDE  . . . . . . . . . .        Number             3h 
DRT_INSTR  . . . . . . . . . . .        Number            17h 
DRT_INVOKE . . . . . . . . . . .        Number            25h 
DRT_LABEL  . . . . . . . . . . .        Number            2Ch 
DRT_LISTING  . . . . . . . . . .        Number             Ch 
DRT_LISTMAC  . . . . . . . . . .        Number             Dh 
DRT_LOCAL  . . . . . . . . . . .        Number            24h 
DRT_LOOPDIR  . . . . . . . . . .        Number             1h 
DRT_MACINT . . . . . . . . . . .        Number             7h 
DRT_MACRO  . . . . . . . . . . .        Number             4h 
DRT_MODEL  . . . . . . . . . . .        Number            14h 
DRT_NAME . . . . . . . . . . . .        Number            33h 
DRT_OPTION . . . . . . . . . . .        Number            34h 
DRT_ORG  . . . . . . . . . . . .        Number            26h 
DRT_PROC . . . . . . . . . . . .        Number            22h 
DRT_PROTO  . . . . . . . . . . .        Number            20h 
DRT_PUBLIC . . . . . . . . . . .        Number            21h 
DRT_PURGE  . . . . . . . . . . .        Number             2h 
DRT_RADIX  . . . . . . . . . . .        Number            15h 
DRT_RECORD . . . . . . . . . . .        Number            1Ch 
DRT_SAFESEH  . . . . . . . . . .        Number            16h 
DRT_SEGMENT  . . . . . . . . . .        Number            28h 
DRT_SEGORDER . . . . . . . . . .        Number             Eh 
DRT_SIMSEG . . . . . . . . . . .        Number             Fh 
DRT_SIZESTR  . . . . . . . . . .        Number            18h 
DRT_STARTEXIT  . . . . . . . . .        Number            13h 
DRT_STRUCT . . . . . . . . . . .        Number            1Ah 
DRT_SUBSTR . . . . . . . . . . .        Number             6h 
DRT_TYPEDEF  . . . . . . . . . .        Number            1Bh 
DS0000 . . . . . . . . . . . . .        Word[3]         20FDh _DATA STDCALL
DS0001 . . . . . . . . . . . . .        Word[2]         2105h _DATA STDCALL
DS0002 . . . . . . . . . . . . .        Word[2]         2109h _DATA STDCALL
DS0003 . . . . . . . . . . . . .        Word[2]         2145h _DATA STDCALL
DS0004 . . . . . . . . . . . . .        Word[2]         2155h _DATA STDCALL
DS0005 . . . . . . . . . . . . .        Word[2]         2161h _DATA STDCALL
DS0006 . . . . . . . . . . . . .        Word[2]         2175h _DATA STDCALL
DS0007 . . . . . . . . . . . . .        Word[2]         218Dh _DATA STDCALL
DS0008 . . . . . . . . . . . . .        Word[2]         219Dh _DATA STDCALL
DS0009 . . . . . . . . . . . . .        Word[3]         21AFh _DATA STDCALL
DefaultDir . . . . . . . . . . .        DWord              0h *External STDCALL
E0 . . . . . . . . . . . . . . .        DWord[10]       1B4Ch _DATA STDCALL
E1 . . . . . . . . . . . . . . .        DWord[10]       1B94h _DATA STDCALL
E2 . . . . . . . . . . . . . . .        DWord[10]       1F04h _DATA STDCALL
EMPTY  . . . . . . . . . . . . .        Number     -00000002h 
ERR  . . . . . . . . . . . . . .        Number             3h 
ERROR  . . . . . . . . . . . . .        Number     -00000001h 
EXF_ASSUMECHECK  . . . . . . . .        Number            40h 
EXF_EXPLICIT . . . . . . . . . .        Number             2h 
EXF_INDIRECT . . . . . . . . . .        Number             1h 
EXF_IS_ABS . . . . . . . . . . .        Number             4h 
EXF_IS_DOT . . . . . . . . . . .        Number            80h 
EXF_IS_OPEATTR . . . . . . . . .        Number            10h 
EXF_IS_TYPE  . . . . . . . . . .        Number             8h 
EXF_NEGATIVE . . . . . . . . . .        Number            20h 
EXPF_IN_SQBR . . . . . . . . . .        Number             8h 
EXPF_NOERRMSG  . . . . . . . . .        Number             1h 
EXPF_NOUNDEF . . . . . . . . . .        Number             2h 
EXPF_ONEOPND . . . . . . . . . .        Number             4h 
EXPR_ADDR  . . . . . . . . . . .        Number             1h 
EXPR_CONST . . . . . . . . . . .        Number             0h 
EXPR_EMPTY . . . . . . . . . . .        Number     -00000002h 
EXPR_ERROR . . . . . . . . . . .        Number     -00000001h 
EXPR_FLOAT . . . . . . . . . . .        Number             3h 
EXPR_REG . . . . . . . . . . . .        Number             2h 
FALSE  . . . . . . . . . . . . .        Number             0h 
FCT_MSC  . . . . . . . . . . . .        Number             0h 
FCT_WATCOMC  . . . . . . . . . .        Number             1h 
FCT_WIN64  . . . . . . . . . . .        Number             2h 
FH_APPEND  . . . . . . . . . . .        Number            20h 
FH_CRLF  . . . . . . . . . . . .        Number             4h 
FH_DEVICE  . . . . . . . . . . .        Number            40h 
FH_EOF . . . . . . . . . . . . .        Number             2h 
FH_NOINHERIT . . . . . . . . . .        Number            10h 
FH_OPEN  . . . . . . . . . . . .        Number             1h 
FH_PIPE  . . . . . . . . . . . .        Number             8h 
FH_TEXT  . . . . . . . . . . . .        Number            80h 
FPO_EMULATION  . . . . . . . . .        Number             1h 
FPO_NO_EMULATION . . . . . . . .        Number             0h 
INTER  . . . . . . . . . . . . .        Byte[25]           0h _DATA STDCALL
INT_MAX  . . . . . . . . . . . .        Number      7FFFFFFFh 
INT_MIN  . . . . . . . . . . . .        Number      80000000h 
LANG_BASIC . . . . . . . . . . .        Number             6h 
LANG_C . . . . . . . . . . . . .        Number             1h 
LANG_FASTCALL  . . . . . . . . .        Number             7h 
LANG_FORTRAN . . . . . . . . . .        Number             5h 
LANG_NONE  . . . . . . . . . . .        Number             0h 
LANG_PASCAL  . . . . . . . . . .        Number             4h 
LANG_STDCALL . . . . . . . . . .        Number             3h 
LANG_SYSCALL . . . . . . . . . .        Number             2h 
LM_LISTMACRO . . . . . . . . . .        Number             1h 
LM_LISTMACROALL  . . . . . . . .        Number             2h 
LM_NOLISTMACRO . . . . . . . . .        Number             0h 
LOF_LISTED . . . . . . . . . . .        Number             1h 
LOF_SKIPPOS  . . . . . . . . . .        Number             2h 
LONG_MAX . . . . . . . . . . . .        Number      7FFFFFFFh 
LONG_MIN . . . . . . . . . . . .        Number      80000000h 
LST  . . . . . . . . . . . . . .        Number             2h 
LSTTYPE_CODE . . . . . . . . . .        Number             1h 
LSTTYPE_DATA . . . . . . . . . .        Number             0h 
LSTTYPE_DIRECTIVE  . . . . . . .        Number             4h 
LSTTYPE_EQUATE . . . . . . . . .        Number             2h 
LSTTYPE_LABEL  . . . . . . . . .        Number             7h 
LSTTYPE_MACRO  . . . . . . . . .        Number             5h 
LSTTYPE_MACROLINE  . . . . . . .        Number             8h 
LSTTYPE_STRUCT . . . . . . . . .        Number             6h 
LSTTYPE_TMACRO . . . . . . . . .        Number             3h 
LastCodeBufSize  . . . . . . . .        DWord              0h *External STDCALL
LineStore  . . . . . . . . . . .        qdesc              0h *External STDCALL
LineStoreCurr  . . . . . . . . .        Near32             0h *External STDCALL
LinnumQueue  . . . . . . . . . .        qdesc              0h *External STDCALL
MAX_E0 . . . . . . . . . . . . .        Number            12h 
MAX_E1 . . . . . . . . . . . . .        Number            DCh 
MAX_E2 . . . . . . . . . . . . .        Number            17h 
MAX_ID . . . . . . . . . . . . .        Number          1F54h 
MAX_ID_LEN . . . . . . . . . . .        Number            F7h 
MAX_LINE_LEN . . . . . . . . . .        Number           400h 
MAX_STRING_LEN . . . . . . . . .        Number           3E0h 
MAX_STRUCT_ALIGN . . . . . . . .        Number            20h 
MAX_TOKEN  . . . . . . . . . . .        Number           100h 
MAX_W1 . . . . . . . . . . . . .        Number             Fh 
MAX_W2 . . . . . . . . . . . . .        Number             1h 
MAX_W3 . . . . . . . . . . . . .        Number             6h 
MAX_W4 . . . . . . . . . . . . .        Number             9h 
MAX_W5 . . . . . . . . . . . . .        Number            15h 
MB_LEN_MAX . . . . . . . . . . .        Number             1h 
MIN_ID . . . . . . . . . . . . .        Number           3E8h 
MODEL_COMPACT  . . . . . . . . .        Number             3h 
MODEL_FLAT . . . . . . . . . . .        Number             7h 
MODEL_HUGE . . . . . . . . . . .        Number             6h 
MODEL_LARGE  . . . . . . . . . .        Number             5h 
MODEL_MEDIUM . . . . . . . . . .        Number             4h 
MODEL_NONE . . . . . . . . . . .        Number             0h 
MODEL_SMALL  . . . . . . . . . .        Number             2h 
MODEL_TINY . . . . . . . . . . .        Number             1h 
MT_ADDRESS . . . . . . . . . . .        Number            80h 
MT_BITS  . . . . . . . . . . . .        Number            C1h 
MT_BYTE  . . . . . . . . . . . .        Number             0h 
MT_DWORD . . . . . . . . . . . .        Number             3h 
MT_EMPTY . . . . . . . . . . . .        Number            C0h 
MT_FAR . . . . . . . . . . . . .        Number            82h 
MT_FLOAT . . . . . . . . . . . .        Number            20h 
MT_FWORD . . . . . . . . . . . .        Number             5h 
MT_NEAR  . . . . . . . . . . . .        Number            81h 
MT_OWORD . . . . . . . . . . . .        Number             Fh 
MT_PROC  . . . . . . . . . . . .        Number            80h 
MT_PTR . . . . . . . . . . . . .        Number            C3h 
MT_QWORD . . . . . . . . . . . .        Number             7h 
MT_REAL10  . . . . . . . . . . .        Number            29h 
MT_REAL4 . . . . . . . . . . . .        Number            23h 
MT_REAL8 . . . . . . . . . . . .        Number            27h 
MT_SBYTE . . . . . . . . . . . .        Number            40h 
MT_SDWORD  . . . . . . . . . . .        Number            43h 
MT_SIGNED  . . . . . . . . . . .        Number            40h 
MT_SIZE_MASK . . . . . . . . . .        Number            1Fh 
MT_SPECIAL . . . . . . . . . . .        Number            80h 
MT_SPECIAL_MASK  . . . . . . . .        Number            C0h 
MT_SQWORD  . . . . . . . . . . .        Number            47h 
MT_SWORD . . . . . . . . . . . .        Number            41h 
MT_TBYTE . . . . . . . . . . . .        Number             9h 
MT_TYPE  . . . . . . . . . . . .        Number            C4h 
MT_WORD  . . . . . . . . . . . .        Number             1h 
MT_YMMWORD . . . . . . . . . . .        Number            1Fh 
M_186  . . . . . . . . . . . . .        Number             2h 
M_286  . . . . . . . . . . . . .        Number             4h 
M_287  . . . . . . . . . . . . .        Number           400h 
M_386  . . . . . . . . . . . . .        Number             8h 
M_387  . . . . . . . . . . . . .        Number           800h 
M_486  . . . . . . . . . . . . .        Number            10h 
M_586  . . . . . . . . . . . . .        Number            20h 
M_686  . . . . . . . . . . . . .        Number            40h 
M_8086 . . . . . . . . . . . . .        Number             1h 
M_8087 . . . . . . . . . . . . .        Number           100h 
M_CPUMSK . . . . . . . . . . . .        Number            7Fh 
M_DELETE . . . . . . . . . . . .        Number         10000h 
M_PROT . . . . . . . . . . . . .        Number            80h 
M_RDONLY . . . . . . . . . . . .        Number      80000000h 
M_RDWR . . . . . . . . . . . . .        Number      C0000000h 
M_WRONLY . . . . . . . . . . . .        Number      40000000h 
MacroLevel . . . . . . . . . . .        DWord              0h *External STDCALL
ModelToken . . . . . . . . . . .        DWord              0h *External STDCALL
ModuleInfo . . . . . . . . . . .        module_info         0h External STDCALL
N0000  . . . . . . . . . . . . .        Byte[23]        2070h _DATA STDCALL
N0001  . . . . . . . . . . . . .        Byte[33]        2087h _DATA STDCALL
N0002  . . . . . . . . . . . . .        Byte[43]        20A8h _DATA STDCALL
N0003  . . . . . . . . . . . . .        Byte[26]        20D3h _DATA STDCALL
NOTE . . . . . . . . . . . . . .        DWord[4]        20EDh _DATA STDCALL
NOT_ERROR  . . . . . . . . . . .        Number             0h 
NO_OPPRFX  . . . . . . . . . . .        Number          FD00h 
NULL . . . . . . . . . . . . . .        Number             0h 
NUM_FILE_TYPES . . . . . . . . .        Number             4h 
NoLineStore  . . . . . . . . . .        DWord              0h *External STDCALL
OBJ  . . . . . . . . . . . . . .        Number             1h 
OFORMAT_BIN  . . . . . . . . . .        Number             0h 
OFORMAT_COFF . . . . . . . . . .        Number             2h 
OFORMAT_ELF  . . . . . . . . . .        Number             3h 
OFORMAT_OMF  . . . . . . . . . .        Number             1h 
OP3_CL . . . . . . . . . . . . .        Number             1h 
OP3_HID  . . . . . . . . . . . .        Number             5h 
OP3_I  . . . . . . . . . . . . .        Number             4h 
OP3_I8_U . . . . . . . . . . . .        Number             2h 
OP3_NONE . . . . . . . . . . . .        Number             0h 
OP3_XMM  . . . . . . . . . . . .        Number             3h 
OP3_XMM0 . . . . . . . . . . . .        Number             3h 
OP3_YMM  . . . . . . . . . . . .        Number             3h 
OPSYS_DOS  . . . . . . . . . . .        Number             0h 
OPSYS_OS2  . . . . . . . . . . .        Number             1h 
OPTN_ASM_FN  . . . . . . . . . .        Number             0h 
OPTN_CODE_CLASS  . . . . . . . .        Number             8h 
OPTN_DATA_SEG  . . . . . . . . .        Number             7h 
OPTN_ERR_FN  . . . . . . . . . .        Number             3h 
OPTN_LAST  . . . . . . . . . . .        Number             9h 
OPTN_LNKDEF_FN . . . . . . . . .        Number             4h 
OPTN_LST_FN  . . . . . . . . . .        Number             2h 
OPTN_MODULE_NAME . . . . . . . .        Number             5h 
OPTN_OBJ_FN  . . . . . . . . . .        Number             1h 
OPTN_TEXT_SEG  . . . . . . . . .        Number             6h 
OPTQ_FINCLUDE  . . . . . . . . .        Number             0h 
OPTQ_INCPATH . . . . . . . . . .        Number             2h 
OPTQ_LAST  . . . . . . . . . . .        Number             3h 
OPTQ_MACRO . . . . . . . . . . .        Number             1h 
OP_A . . . . . . . . . . . . . .        Number            80h 
OP_AL  . . . . . . . . . . . . .        Number            81h 
OP_AX  . . . . . . . . . . . . .        Number            82h 
OP_CL  . . . . . . . . . . . . .        Number           101h 
OP_CL_ONLY . . . . . . . . . . .        Number           100h 
OP_DX  . . . . . . . . . . . . .        Number           202h 
OP_DX_ONLY . . . . . . . . . . .        Number           200h 
OP_EAX . . . . . . . . . . . . .        Number            84h 
OP_I . . . . . . . . . . . . . .        Number         70000h 
OP_I16 . . . . . . . . . . . . .        Number         20000h 
OP_I32 . . . . . . . . . . . . .        Number         40000h 
OP_I48 . . . . . . . . . . . . .        Number        100000h 
OP_I64 . . . . . . . . . . . . .        Number         80000h 
OP_I8  . . . . . . . . . . . . .        Number         10000h 
OP_I8_U  . . . . . . . . . . . .        Number        870000h 
OP_IGE16 . . . . . . . . . . . .        Number         60000h 
OP_IGE8  . . . . . . . . . . . .        Number         70000h 
OP_I_1 . . . . . . . . . . . . .        Number        210000h 
OP_I_3 . . . . . . . . . . . . .        Number        410000h 
OP_I_ANY . . . . . . . . . . . .        Number        1F0000h 
OP_M . . . . . . . . . . . . . .        Number      9F000000h 
OP_M08 . . . . . . . . . . . . .        Number       1000000h 
OP_M128  . . . . . . . . . . . .        Number      10000000h 
OP_M16 . . . . . . . . . . . . .        Number       2000000h 
OP_M256  . . . . . . . . . . . .        Number      20000000h 
OP_M32 . . . . . . . . . . . . .        Number       4000000h 
OP_M48 . . . . . . . . . . . . .        Number      40000000h 
OP_M64 . . . . . . . . . . . . .        Number       8000000h 
OP_M80 . . . . . . . . . . . . .        Number      80000000h 
OP_MFPTR . . . . . . . . . . . .        Number      C4000000h 
OP_MGT16 . . . . . . . . . . . .        Number       C000000h 
OP_MGT8  . . . . . . . . . . . .        Number       E000000h 
OP_MMX . . . . . . . . . . . . .        Number            10h 
OP_MS  . . . . . . . . . . . . .        Number       F000000h 
OP_M_ANY . . . . . . . . . . . .        Number      FF000000h 
OP_NONE  . . . . . . . . . . . .        Number             0h 
OP_R . . . . . . . . . . . . . .        Number             Fh 
OP_R16 . . . . . . . . . . . . .        Number             2h 
OP_R32 . . . . . . . . . . . . .        Number             4h 
OP_R64 . . . . . . . . . . . . .        Number             8h 
OP_R8  . . . . . . . . . . . . .        Number             1h 
OP_RAX . . . . . . . . . . . . .        Number            88h 
OP_RGT16 . . . . . . . . . . . .        Number             Ch 
OP_RGT8  . . . . . . . . . . . .        Number             Eh 
OP_RSPEC . . . . . . . . . . . .        Number           400h 
OP_SR  . . . . . . . . . . . . .        Number          1800h 
OP_SR386 . . . . . . . . . . . .        Number          1000h 
OP_SR86  . . . . . . . . . . . .        Number           800h 
OP_ST  . . . . . . . . . . . . .        Number          2000h 
OP_STI . . . . . . . . . . . . .        Number          6000h 
OP_ST_REG  . . . . . . . . . . .        Number          4000h 
OP_XMM . . . . . . . . . . . . .        Number            20h 
OP_YMM . . . . . . . . . . . . .        Number            40h 
OT_FLAT  . . . . . . . . . . . .        Number             1h 
OT_GROUP . . . . . . . . . . . .        Number             0h 
OT_SEGMENT . . . . . . . . . . .        Number             2h 
Options  . . . . . . . . . . . .        global_options         0h External STDCALL
PASS_1 . . . . . . . . . . . . .        Number             0h 
PASS_2 . . . . . . . . . . . . .        Number             1h 
PEM_DEFAULT  . . . . . . . . . .        Number             0h 
PEM_MACRO  . . . . . . . . . . .        Number             1h 
PEM_NONE . . . . . . . . . . . .        Number             2h 
PINF_FORCEFRAME  . . . . . . . .        Number             4h 
PINF_FPO . . . . . . . . . . . .        Number            40h 
PINF_HAS_VARARG  . . . . . . . .        Number             1h 
PINF_ISEXPORT  . . . . . . . . .        Number             2h 
PINF_ISFRAME . . . . . . . . . .        Number            20h 
PINF_LOADDS  . . . . . . . . . .        Number             8h 
PINF_PE_TYPE . . . . . . . . . .        Number             1h 
PINF_STACKPARAM  . . . . . . . .        Number            10h 
P_186  . . . . . . . . . . . . .        Number            10h 
P_286  . . . . . . . . . . . . .        Number            20h 
P_286p . . . . . . . . . . . . .        Number            28h 
P_287  . . . . . . . . . . . . .        Number             3h 
P_386  . . . . . . . . . . . . .        Number            30h 
P_386p . . . . . . . . . . . . .        Number            38h 
P_387  . . . . . . . . . . . . .        Number             4h 
P_486  . . . . . . . . . . . . .        Number            40h 
P_486p . . . . . . . . . . . . .        Number            48h 
P_586  . . . . . . . . . . . . .        Number            50h 
P_586p . . . . . . . . . . . . .        Number            58h 
P_64 . . . . . . . . . . . . . .        Number            70h 
P_64p  . . . . . . . . . . . . .        Number            78h 
P_686  . . . . . . . . . . . . .        Number            60h 
P_686p . . . . . . . . . . . . .        Number            68h 
P_86 . . . . . . . . . . . . . .        Number             0h 
P_87 . . . . . . . . . . . . . .        Number             2h 
P_AVX  . . . . . . . . . . . . .        Number          8000h 
P_CPU_MASK . . . . . . . . . . .        Number            F0h 
P_EXT_ALL  . . . . . . . . . . .        Number          FF00h 
P_EXT_MASK . . . . . . . . . . .        Number          FF00h 
P_FPU_MASK . . . . . . . . . . .        Number             7h 
P_K3D  . . . . . . . . . . . . .        Number           200h 
P_MMX  . . . . . . . . . . . . .        Number           100h 
P_NO87 . . . . . . . . . . . . .        Number             1h 
P_PM . . . . . . . . . . . . . .        Number             8h 
P_SSE1 . . . . . . . . . . . . .        Number           400h 
P_SSE2 . . . . . . . . . . . . .        Number           800h 
P_SSE3 . . . . . . . . . . . . .        Number          1000h 
P_SSE4 . . . . . . . . . . . . .        Number          4000h 
P_SSEALL . . . . . . . . . . . .        Number          FC00h 
P_SSSE3  . . . . . . . . . . . .        Number          2000h 
Parse_Pass . . . . . . . . . . .        DWord              0h External STDCALL
REX_B  . . . . . . . . . . . . .        Number             1h 
REX_R  . . . . . . . . . . . . .        Number             4h 
REX_W  . . . . . . . . . . . . .        Number             8h 
REX_X  . . . . . . . . . . . . .        Number             2h 
RWT_BINARY_OP  . . . . . . . . .        Number             5h 
RWT_DIRECTIVE  . . . . . . . . .        Number             3h 
RWT_REG  . . . . . . . . . . . .        Number             2h 
RWT_RES_ID . . . . . . . . . . .        Number             7h 
RWT_STYPE  . . . . . . . . . . .        Number             6h 
RWT_UNARY_OP . . . . . . . . . .        Number             4h 
R_in_OP  . . . . . . . . . . . .        Number             3h 
SCHAR_MAX  . . . . . . . . . . .        Number            7Fh 
SCHAR_MIN  . . . . . . . . . . .        Number     -00000080h 
SEEK_CUR . . . . . . . . . . . .        Number             1h 
SEEK_END . . . . . . . . . . . .        Number             2h 
SEEK_SET . . . . . . . . . . . .        Number             0h 
SEGORDER_ALPHA . . . . . . . . .        Number             2h 
SEGORDER_DOSSEG  . . . . . . . .        Number             1h 
SEGORDER_SEQ . . . . . . . . . .        Number             0h 
SEGTYPE_ABS  . . . . . . . . . .        Number             5h 
SEGTYPE_BSS  . . . . . . . . . .        Number             3h 
SEGTYPE_CDATA  . . . . . . . . .        Number             7h 
SEGTYPE_CODE . . . . . . . . . .        Number             1h 
SEGTYPE_DATA . . . . . . . . . .        Number             2h 
SEGTYPE_ERROR  . . . . . . . . .        Number             Ah 
SEGTYPE_HDR  . . . . . . . . . .        Number             6h 
SEGTYPE_RELOC  . . . . . . . . .        Number             8h 
SEGTYPE_RSRC . . . . . . . . . .        Number             9h 
SEGTYPE_STACK  . . . . . . . . .        Number             4h 
SEGTYPE_UNDEF  . . . . . . . . .        Number             0h 
SFL_FWDREF . . . . . . . . . . .        Number          2000h 
SFL_IAT_USED . . . . . . . . . .        Number             8h 
SFL_INCLUDED . . . . . . . . . .        Number          4000h 
SFL_ISARRAY  . . . . . . . . . .        Number           200h 
SFL_ISDATA . . . . . . . . . . .        Number           400h 
SFL_ISDEFINED  . . . . . . . . .        Number             2h 
SFL_ISEQUATE . . . . . . . . . .        Number            10h 
SFL_ISPROC . . . . . . . . . . .        Number           800h 
SFL_ISPUBLIC . . . . . . . . . .        Number            80h 
SFL_ISSAVED  . . . . . . . . . .        Number          1000h 
SFL_LIST . . . . . . . . . . . .        Number           100h 
SFL_PREDEFINED . . . . . . . . .        Number            20h 
SFL_SCOPED . . . . . . . . . . .        Number             4h 
SFL_USED . . . . . . . . . . . .        Number             1h 
SFL_VARIABLE . . . . . . . . . .        Number            40h 
SFORMAT_64BIT  . . . . . . . . .        Number             3h 
SFORMAT_MZ . . . . . . . . . . .        Number             1h 
SFORMAT_NONE . . . . . . . . . .        Number             0h 
SFORMAT_PE . . . . . . . . . . .        Number             2h 
SFR_IREG . . . . . . . . . . . .        Number            20h 
SFR_SIZMSK . . . . . . . . . . .        Number            1Fh 
SFR_SSBASED  . . . . . . . . . .        Number            40h 
SHRT_MAX . . . . . . . . . . . .        Number          7FFFh 
SHRT_MIN . . . . . . . . . . . .        Number          8000h 
SINT_ISCOM . . . . . . . . . . .        Number             4h 
SINT_ISFAR . . . . . . . . . . .        Number            10h 
SINT_ISVARARG  . . . . . . . . .        Number            20h 
SINT_SEGOFSSIZE  . . . . . . . .        Number             3h 
SINT_WEAK  . . . . . . . . . . .        Number             8h 
SIT_FILE . . . . . . . . . . . .        Number             0h 
SIT_MACRO  . . . . . . . . . . .        Number             1h 
SMAC_ALABEL  . . . . . . . . . .        Number             4h 
SMAC_ISFUNC  . . . . . . . . . .        Number             2h 
SMAC_ISVARARG  . . . . . . . . .        Number             1h 
SMAC_MULTILINE . . . . . . . . .        Number             8h 
SMAC_PURGED  . . . . . . . . . .        Number            10h 
STACK_FAR  . . . . . . . . . . .        Number             1h 
STACK_NEAR . . . . . . . . . . .        Number             0h 
STDCALL_FULL . . . . . . . . . .        Number             0h 
STDCALL_HALF . . . . . . . . . .        Number             2h 
STDCALL_NONE . . . . . . . . . .        Number             1h 
STINF_ISINLINE . . . . . . . . .        Number             1h 
STINF_ISOPEN . . . . . . . . . .        Number             2h 
STINF_ORGINSIDE  . . . . . . . .        Number             4h 
STRING_EXPANDED  . . . . . . . .        Number             1h 
SWITCH_NOTEST  . . . . . . . . .        Number             8h 
SWITCH_PASCAL  . . . . . . . . .        Number             1h 
SWITCH_REGAX . . . . . . . . . .        Number             4h 
SWITCH_TABLE . . . . . . . . . .        Number             2h 
SYM_ALIAS  . . . . . . . . . . .        Number             8h 
SYM_CLASS_LNAME  . . . . . . . .        Number             Bh 
SYM_EXTERNAL . . . . . . . . . .        Number             2h 
SYM_GRP  . . . . . . . . . . . .        Number             4h 
SYM_INTERNAL . . . . . . . . . .        Number             1h 
SYM_MACRO  . . . . . . . . . . .        Number             9h 
SYM_SEG  . . . . . . . . . . . .        Number             3h 
SYM_STACK  . . . . . . . . . . .        Number             5h 
SYM_STRUCT_FIELD . . . . . . . .        Number             6h 
SYM_TMACRO . . . . . . . . . . .        Number             Ah 
SYM_TYPE . . . . . . . . . . . .        Number             7h 
SYM_UNDEFINED  . . . . . . . . .        Number             0h 
StoreState . . . . . . . . . . .        DWord              0h *External STDCALL
SymTables  . . . . . . . . . . .        symbol_queue         0h *External STDCALL
TAB_ALIAS  . . . . . . . . . . .        Number             5h 
TAB_EXT  . . . . . . . . . . . .        Number             1h 
TAB_GRP  . . . . . . . . . . . .        Number             3h 
TAB_LAST . . . . . . . . . . . .        Number             6h 
TAB_PROC . . . . . . . . . . . .        Number             4h 
TAB_SEG  . . . . . . . . . . . .        Number             2h 
TAB_UNDEF  . . . . . . . . . . .        Number             0h 
TRUE . . . . . . . . . . . . . .        Number             1h 
TYPE_NONE  . . . . . . . . . . .        Number             0h 
TYPE_RECORD  . . . . . . . . . .        Number             4h 
TYPE_STRUCT  . . . . . . . . . .        Number             1h 
TYPE_TYPEDEF . . . . . . . . . .        Number             3h 
TYPE_UNION . . . . . . . . . . .        Number             2h 
T_BAD_NUM  . . . . . . . . . . .        Number             Ch 
T_BINARY_OPERATOR  . . . . . . .        Number             5h 
T_CL_BRACKET . . . . . . . . . .        Number            29h 
T_CL_SQ_BRACKET  . . . . . . . .        Number            5Dh 
T_COLON  . . . . . . . . . . . .        Number            3Ah 
T_COMMA  . . . . . . . . . . . .        Number            2Ch 
T_DBL_COLON  . . . . . . . . . .        Number             Dh 
T_DIRECTIVE  . . . . . . . . . .        Number             3h 
T_DOT  . . . . . . . . . . . . .        Number            2Eh 
T_FINAL  . . . . . . . . . . . .        Number             0h 
T_FLOAT  . . . . . . . . . . . .        Number             Bh 
T_HLL_DELAY  . . . . . . . . . .        Number             1h 
T_HLL_DELAYED  . . . . . . . . .        Number             8h 
T_HLL_MACRO  . . . . . . . . . .        Number             2h 
T_HLL_PROC . . . . . . . . . . .        Number             4h 
T_ID . . . . . . . . . . . . . .        Number             8h 
T_INSTRUCTION  . . . . . . . . .        Number             1h 
T_NUM  . . . . . . . . . . . . .        Number             Ah 
T_OP_BRACKET . . . . . . . . . .        Number            28h 
T_OP_SQ_BRACKET  . . . . . . . .        Number            5Bh 
T_PERCENT  . . . . . . . . . . .        Number            25h 
T_QUESTION_MARK  . . . . . . . .        Number            3Fh 
T_REG  . . . . . . . . . . . . .        Number             2h 
T_RES_ID . . . . . . . . . . . .        Number             7h 
T_STRING . . . . . . . . . . . .        Number             9h 
T_STYPE  . . . . . . . . . . . .        Number             6h 
T_UNARY_OPERATOR . . . . . . . .        Number             4h 
UCHAR_MAX  . . . . . . . . . . .        Number            FFh 
UINT_MAX . . . . . . . . . . . .        Number      FFFFFFFFh 
USE16  . . . . . . . . . . . . .        Number             0h 
USE32  . . . . . . . . . . . . .        Number             1h 
USE64  . . . . . . . . . . . . .        Number             2h 
USE_EMPTY  . . . . . . . . . . .        Number            FEh 
USHRT_MAX  . . . . . . . . . . .        Number          FFFFh 
UseSavedState  . . . . . . . . .        DWord              0h *External STDCALL
W1 . . . . . . . . . . . . . . .        DWord[10]       1F60h _DATA STDCALL
W2 . . . . . . . . . . . . . . .        DWord           1F9Ch _DATA STDCALL
W3 . . . . . . . . . . . . . . .        DWord[6]        1FA0h _DATA STDCALL
W4 . . . . . . . . . . . . . . .        DWord[9]        1FB8h _DATA STDCALL
W5 . . . . . . . . . . . . . . .        DWord[10]       1FDCh _DATA STDCALL
W64F_ALL . . . . . . . . . . . .        Number             7h 
W64F_AUTOSTACKSP . . . . . . . .        Number             2h 
W64F_SAVEREGPARAMS . . . . . . .        Number             1h 
W64F_STACKALIGN16  . . . . . . .        Number             4h 
_A_ARCH  . . . . . . . . . . . .        Number            20h 
_A_COMPRESSED  . . . . . . . . .        Number           800h 
_A_ENCRYPTED . . . . . . . . . .        Number          4000h 
_A_HIDDEN  . . . . . . . . . . .        Number             2h 
_A_NORMAL  . . . . . . . . . . .        Number            80h 
_A_NOT_INDEXED . . . . . . . . .        Number          2000h 
_A_OFFLINE . . . . . . . . . . .        Number          1000h 
_A_RDONLY  . . . . . . . . . . .        Number             1h 
_A_REPARSEPOINT  . . . . . . . .        Number           400h 
_A_SPARSE_FILE . . . . . . . . .        Number           200h 
_A_SUBDIR  . . . . . . . . . . .        Number            10h 
_A_SYSTEM  . . . . . . . . . . .        Number             4h 
_A_TEMPORARY . . . . . . . . . .        Number           100h 
_A_VOLID . . . . . . . . . . . .        Number             8h 
_BLANK . . . . . . . . . . . . .        Number            40h 
_CDecl . . . . . . . . . . . . .        Text   C
_CONTROL . . . . . . . . . . . .        Number            20h 
_CType . . . . . . . . . . . . .        Text   STDCALL
_DIGIT . . . . . . . . . . . . .        Number             4h 
_DOT . . . . . . . . . . . . . .        Number             2h 
_FILE_DEFINED  . . . . . . . . .        Number             1h 
_HEX . . . . . . . . . . . . . .        Number            80h 
_INTIOBUF  . . . . . . . . . . .        Number          1000h 
_IOCOMMIT  . . . . . . . . . . .        Number          4000h 
_IOCTRLZ . . . . . . . . . . . .        Number          2000h 
_IOEOF . . . . . . . . . . . . .        Number            10h 
_IOERR . . . . . . . . . . . . .        Number            20h 
_IOFBF . . . . . . . . . . . . .        Number             0h 
_IOFEOF  . . . . . . . . . . . .        Number           800h 
_IOFLRTN . . . . . . . . . . . .        Number          1000h 
_IOLBF . . . . . . . . . . . . .        Number            40h 
_IOMYBUF . . . . . . . . . . . .        Number             8h 
_IONBF . . . . . . . . . . . . .        Number             4h 
_IOREAD  . . . . . . . . . . . .        Number             1h 
_IORW  . . . . . . . . . . . . .        Number            80h 
_IOSETVBUF . . . . . . . . . . .        Number           400h 
_IOSTRG  . . . . . . . . . . . .        Number            40h 
_IOWRT . . . . . . . . . . . . .        Number             2h 
_IOYOURBUF . . . . . . . . . . .        Number           100h 
_LABEL . . . . . . . . . . . . .        Number             1h 
_MAXIOBUF  . . . . . . . . . . .        Number          4000h 
_MAX_DIR . . . . . . . . . . . .        Number           100h 
_MAX_DRIVE . . . . . . . . . . .        Number             3h 
_MAX_EXT . . . . . . . . . . . .        Number           100h 
_MAX_FNAME . . . . . . . . . . .        Number           100h 
_MAX_PATH  . . . . . . . . . . .        Number           104h 
_MINIOBUF  . . . . . . . . . . .        Number           200h 
_NFILE_  . . . . . . . . . . . .        Number            14h 
_NSTREAM_  . . . . . . . . . . .        Number            14h 
_PUNCT . . . . . . . . . . . . .        Number            10h 
_SPACE . . . . . . . . . . . . .        Number             8h 
_UNICODE . . . . . . . . . . . .        Text   
_WCHAR_T_DEFINED . . . . . . . .        Number             1h 
_WCTYPE_T_DEFINED  . . . . . . .        Number             1h 
_WIN32 . . . . . . . . . . . . .        Number             1h 
_WSTDIO_DEFINED  . . . . . . . .        Number             1h 
_WSTDLIB_DEFINED . . . . . . . .        Number             1h 
_WSTRING_DEFINED . . . . . . . .        Number             1h 
__LIBC_INC . . . . . . . . . . .        Number             1h 
__argc . . . . . . . . . . . . .        DWord              0h *External STDCALL
__argv . . . . . . . . . . . . .        DWord              0h *External STDCALL
__ltype  . . . . . . . . . . . .        Byte               0h *External STDCALL
__wargv  . . . . . . . . . . . .        DWord              0h *External STDCALL
_bufin . . . . . . . . . . . . .        Byte               0h *External STDCALL
_diskflag  . . . . . . . . . . .        DWord              0h *External STDCALL
_environ . . . . . . . . . . . .        DWord              0h *External STDCALL
_iob . . . . . . . . . . . . . .        _iobuf             0h *External STDCALL
_nfile . . . . . . . . . . . . .        DWord              0h *External STDCALL
_osfhnd  . . . . . . . . . . . .        Near32             0h *External STDCALL
_osfile  . . . . . . . . . . . .        Byte               0h *External STDCALL
_pgmptr  . . . . . . . . . . . .        DWord              0h *External STDCALL
_wenviron  . . . . . . . . . . .        DWord              0h *External STDCALL
_wpgmptr . . . . . . . . . . . .        DWord              0h *External STDCALL
banner_printed . . . . . . . . .        DWord              0h *External STDCALL
console  . . . . . . . . . . . .        DWord              0h *External STDCALL
hStdError  . . . . . . . . . . .        Near32             0h *External STDCALL
hStdInput  . . . . . . . . . . .        Near32             0h *External STDCALL
hStdOutput . . . . . . . . . . .        Near32             0h *External STDCALL
jmpenv . . . . . . . . . . . . .        S_JMPBUF           0h External STDCALL
maxid  . . . . . . . . . . . . .        DWord[8]        2050h _DATA STDCALL
no_RM  . . . . . . . . . . . . .        Number             1h 
no_WDS . . . . . . . . . . . . .        Number             2h 
stderr . . . . . . . . . . . . .        _iobuf             0h *External STDCALL
stdout . . . . . . . . . . . . .        _iobuf             0h *External STDCALL
table  . . . . . . . . . . . . .        DWord[8]        2030h _DATA STDCALL
wcswcs . . . . . . . . . . . . .        Text   wcsstr
write_to_file  . . . . . . . . .        DWord              0h *External STDCALL

