include quadmath.inc
include limits.inc
include errno.inc

    .assert:on

comp64 macro r, i
    local a, b
    .data
    align 16
    a real16 r
    b real16 r
    .code
    cvtq_i64(r)
    mov rbx,i
    .assert( rax == rbx )
    cvti64_q(rbx)
    movaps b,xmm0
    mov rax,qword ptr a
    mov rdx,qword ptr a[8]
    mov rbx,qword ptr b
    mov rcx,qword ptr b[8]
    exitm<.assert( rax == rbx && rdx == rcx )>
    endm

comp32 macro r, i
    local a, b
    .data
    align 16
    a real16 r
    b real16 r
    .code
    cvtq_i32(r)
    mov edx,i
    .assert(eax == edx)
    cvti32_q(edx)
    movaps b,xmm0
    mov rax,qword ptr a
    mov rdx,qword ptr a[8]
    mov rbx,qword ptr b
    mov rcx,qword ptr b[8]
    exitm<.assert( rax == rbx && rdx == rcx )>
    endm

errval macro retval, type:vararg
    mov edx,errno
    mov errno,0
    mov eax,edx
    exitm<.assert( eax == retval )>
    endm

.code

main proc

  local x:REAL16
  local y:REAL16
  local exponent:dword
  local eptr:LPSTR

    mov errno,0

    errval( 0, comp32(0.0, 0))
    errval( 0, comp32(0.10, 0))
    errval( 0, comp32(1.0, 1))
    errval( 0, comp32(2.0, 2))
    errval( 0, comp32(0.99999999, 0))
    errval( 0, comp32(7777777.0, 7777777))
    errval( 0, comp32(2147483647.0, 2147483647))
    errval( 0, comp32(2147483647.0, INT_MAX))
    errval( 0, comp32(-2147483648.0, INT_MIN))
    errval( 0, comp32(-1.0, UINT_MAX))
    errval( ERANGE, comp32(-100000000000000000000.0, INT_MIN))
    errval( ERANGE, comp32(100000000000000000000.0, INT_MAX))

    errval( 0, comp64(0.0, 0))
    errval( 0, comp64(0.10, 0))
    errval( 0, comp64(1.0, 1))
    errval( 0, comp64(2.0, 2))
    errval( 0, comp64(0.99999999, 0))
    errval( 0, comp64(7777777.0, 7777777))
    errval( 0, comp64(9223372036854775807.0, 9223372036854775807))
    errval( 0, comp64( 9223372036854775807.0, _I64_MAX))
    errval( 0, comp64(-9223372036854775807.0, -9223372036854775807))
    errval( ERANGE, comp64( 9223372036854775808.0, _I64_MAX))
    errval( ERANGE, comp64(-9223372036854775808.0, _I64_MIN))
    errval( 0, comp64(-1.0, _UI64_MAX))
    xor eax,eax
    ret

main endp

    end
